<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>WSL2使用入门</title>
      <link href="/2020/12/09/WSL2%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2020/12/09/WSL2%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-WSL-2"><a href="#安装-WSL-2" class="headerlink" title="安装 WSL 2"></a>安装 WSL 2</h2><a id="more"></a><hr><h3 id="启用“-虚拟机平台-Virtual-Machine-Platform-”可选组件"><a href="#启用“-虚拟机平台-Virtual-Machine-Platform-”可选组件" class="headerlink" title="启用“ 虚拟机平台(Virtual Machine Platform)”可选组件"></a>启用“ 虚拟机平台(Virtual Machine Platform)”可选组件</h3><blockquote><p>控制面板 –&gt; 程序和功能 –&gt;  启用或关闭Windows功能 –&gt; 勾选“适用于 Linux 的 Windows 子系统”以及“虚拟机平台(Virtual Machine Platform)”</p></blockquote><p>以管理员身份打开 PowerShell 并运行：</p><blockquote><p>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform  </p></blockquote><p>启用这些更改后，你需要重新启动计算机。</p><hr><h3 id="使用命令行设置要由-WSL-2-支持的发行版"><a href="#使用命令行设置要由-WSL-2-支持的发行版" class="headerlink" title="使用命令行设置要由 WSL 2 支持的发行版"></a>使用命令行设置要由 WSL 2 支持的发行版</h3><p><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package" target="_blank" rel="noopener">wsl 2 需要更新其内核组件。</a></p><p>以管理员的身份在 PowerShell 中运行：</p><blockquote><p>wsl –set-version <code>&lt;Distro&gt;</code> 2</p></blockquote><p>并确保将 <code>&lt;Distro&gt;</code> 替换为发行版的实际名称。 （你可以使用以下命令找到它们：wsl -l）。 你也可以通过运行与上面相同的命令随时更改回 WSL 1，但将“2”替换为“1”。</p><p>此外，如果你想使 WSL 2 成为默认架构，可以使用以下命令执行此操作：</p><blockquote><p>wsl –set-default-version 2</p></blockquote><p>这将使你安装的任何新发行版初始化为 WSL 2 发行版。</p><hr><h3 id="验证你的发行版使用的-WSL-版本"><a href="#验证你的发行版使用的-WSL-版本" class="headerlink" title="验证你的发行版使用的 WSL 版本"></a>验证你的发行版使用的 WSL 版本</h3><p>要验证每个发行版使用的 WSL 版本，请使用以下命令：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --verbose</span><br><span class="line">或</span><br><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure></div><hr>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>该怎么卖？卖的时间点如何把握？</title>
      <link href="/2020/05/17/%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8D%96%EF%BC%9F%E5%8D%96%E7%9A%84%E6%97%B6%E9%97%B4%E7%82%B9%E5%A6%82%E4%BD%95%E6%8A%8A%E6%8F%A1%EF%BC%9F/"/>
      <url>/2020/05/17/%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8D%96%EF%BC%9F%E5%8D%96%E7%9A%84%E6%97%B6%E9%97%B4%E7%82%B9%E5%A6%82%E4%BD%95%E6%8A%8A%E6%8F%A1%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：公众号-孟岩<br>作者：孟岩</p></blockquote><a id="more"></a><p>今天我们来看读者@王静萍 的问题。她问到投资中「卖」的问题：</p><blockquote><p>收益多少了卖？卖的时间点怎么把握？用定投可以避开「买」的择时，那「卖」依据什么呢？</p></blockquote><p>在之前的文章《 什么时候卖出》中，我说过有三种情况我会卖出。</p><ul><li><p>第一种:买错了（或者说逻辑变了）。这种情况下不管买入后是盈利还是亏损，我都会果断卖出。</p></li><li><p>第二种:变贵了。好公司还需要好价格，如果股票的价格已经远远超过了它的内在价值，我会选择卖出。 </p></li><li><p>第三种:是有更好的标的。如果发现了更好的投资标的，而手头有没有额外的现金，就可以卖出现在的去买入更好的标的。需要注意的是，你究竟有没有能力去判断两个不同的公司未来预期收益率的差别。我做过很多这样的交易，最后成功的概率并不高。</p></li></ul><p>今天这个问题，我邀请到谭昊老师来回答。</p><p>谭老师从投资者的底层逻辑出发，认为卖出并不是一个孤立的动作，应该和你的投资系统相匹配。</p><p>相信你看完后，会豁然开朗。</p><p>这是个好问题，有句谚语说得好，会买的是徒弟，会卖的是师傅。</p><p>但是要准确的回答这个问题，却不能从问题本身入手。好比我经常说的，不能在同一层楼解决这层楼的问题，而必须上一层楼。上一层楼干什么呢？欲穷千里目更上一层楼。上楼，是为了要从系统的角度看问题。</p><p>你要理解卖出，就不能光看卖出这个孤立的动作，卖出当然不是一个孤立的点，而是整个交易系统中的一个环节。就像一串珍珠项链的中间一粒珍珠，你不能脱离它的上下文去看它。</p><p>所以我们要谈卖出的问题，首先，要明白卖出的动作要跟你的交易系统的底层逻辑相匹配。</p><p>为了更清楚地说明这个问题，我举一个充满争议的例子你就明白了，那就是止损。</p><p>投资中到底要不要止损？关于这一点迄今为止没有定论，支持和反对的人都能各自举出一百条理由，以及无数的血泪史和鲜活的案例。 </p><p>可以说按照这样的方式去争论，再过一百年也不会有一个明确的结果出来。因为止损这个行为本身是没有对错的。</p><h2 id="1-止损卖出"><a href="#1-止损卖出" class="headerlink" title="1 止损卖出"></a>1 止损卖出</h2><p>止损这个动作要不要做？</p><p>取决于它是否跟你的买入动作匹配，跟你的整个交易系统的底层逻辑匹配。当匹配的时候它就是对的，不匹配的时候它就是错的。</p><p>比如说你买入的理由是趋势来了，一个股票的价格站上了20日均线，你按照趋势交易系统的逻辑进行了买入操作。那么当价格跌破了20日均线，这个趋势买入逻辑已经不成立了，难道你不应该止损吗？既然你是以趋势买入的，就应该在趋势不存在的时候止损，这不是天经地义的吗？</p><p>但是如果你买入的理由是价值就不同了。</p><p>比如一只股票，你认为它内在价值有10块钱，你在价格8块钱的时候买入了，过了一段时间价格跌到了7块钱。价格被低估的幅度不是更大了吗？按照你的价值低估的买入逻辑，你应该更大幅度的买入才对，这个时候止损不是荒唐吗？</p><p>当然这里不是说价值投资者不能止损，这里是说价值投资者不能按照价格的跌幅来止损，不能用形态走坏了之类的标准来止损，那叫牛头不对马嘴。如果你是按价值方法买入的，那么只有在这个公司基本面走坏，你的价值买入逻辑不存在的时候，你才应该止损。</p><p>止损是卖出的一种情境，如果你把这个情境背后的理论模型搞清楚了，你就能正确的理解卖出这个行为了。</p><p>让我再简单的总结一下，止损这个行为本身没有对错好坏，你必须把它放到你的交易系统的全局中去理解。如果止损这个动作跟你的买入动作相匹配，跟你的交易系统的底层逻辑相匹配，那就是对的，否则就是错的。</p><p>看到这里，相信你已经准备好了，接下来我们来谈更广义的卖出。</p><p>什么时候应该卖出呢？</p><p>正确的答案是，你先搞明白，你的交易系统的底层逻辑是什么？然后根据这个系统去匹配相应的卖出策略。 </p><p>一般来说卖出有三种情形，分别称之为止损卖出，止盈卖出以及失去性价比优势卖出。 </p><p>止损的情形前文已经讲过了，这里不重复了。</p><h2 id="2-止盈卖出"><a href="#2-止盈卖出" class="headerlink" title="2 止盈卖出"></a>2 止盈卖出</h2><p>我们来看看止盈。</p><p>同样的我们在底层把所有的交易系统分为两大类型，一种是趋势类的，一种是价值类的，我们分开讲。</p><p>在趋势类的系统中， 你的买入理由是趋势来了，你盈利的法宝是截断亏损让利润奔跑。所以，在趋势跟踪系统中一般不设目标位卖出，不是说你认为主观上认为股票涨到了多少钱就卖出，因为那个时候趋势可能还在。</p><p>在趋势系统中用的比较多的止盈卖出，是动态跟踪止盈。就是股票从最高位回落一个百分比，你认为趋势被破坏了，此时卖出。</p><p>而在价值类的交易系统中，你买入的理由是股票的价格被低估，那么相对应的卖出的理由应该是股票价格被高估。还是举刚才那个例子，假如你经过测算，如果一只股票的内在价值是10块钱，你8块钱买入了。那么当这支股票涨到15块的时候，因为它的价格明显高估，你就把它卖出了。但具体多少比例算是高估，取决于每个人对公司基本面的认识以及对市场情绪面的把握，这个不能一概而论。</p><p>以上讲的止盈卖出。</p><h2 id="3-失去性价比优势卖出"><a href="#3-失去性价比优势卖出" class="headerlink" title="3 失去性价比优势卖出"></a>3 失去性价比优势卖出</h2><p>还有第三种卖出情形是，因为丧失了足够的性价比优势而卖出，这种情形基本是在价值类的交易系统中使用，因为趋势类的系统不看性价比，只看趋势本身。</p><p>这个方法其实很多的价值类的投资大师都在用，比如巴菲特、邓普顿等等。</p><p>你会同时关注市场上的很多股票，当你持有的某一只A公司的股票经过股价的上涨，它的价格已经高估了，但是接下来还会不会上涨，其实你是不知道的。高估的幅度达到多少应该卖出，其实是没有一个固定标准的。</p><p>但是这个时候出现了另外一家公司B公司，它的股价却明显处于大幅低估的状态，这个时候你卖出a公司，转而买入b公司，相当于把自己的资产向性价比高的地方集中，这是符合价值投资的底层逻辑的。</p><p>事实上，这可能是一个典型的价值投资者最常用的卖出方式，因为你可能永远都不知道高估多少应该卖出，这个是非常困难的。但是在不同的公司中间做性价比的比较，卖出明显高估的，买入明显低估。这个切换的操作是相对容易的。</p><p>而邓普顿在这个基础上更进了一步，他说，你不但要这么做，而且要在全球范围内这么做。所以他曾经去抄底日本，抄底韩国，直至在日本股市赚了很多钱之后，又抛出日本的股票转而投资其他地区。基于这个性价比的比较逻辑。</p><p>至于说定投应该什么时候卖出，你用上面我讲的方法去判断，就一目了然了。</p><p>目前市场上绝大部分的定投策略都是价值类的定投，就是买入相对低估的，性价比高的指数，既然是价值类的定投，那么卖出就参照价值逻辑来卖出就对了。</p><p>而一些定投体系，事实上已经把丧失性价比优势卖出这一条，内嵌到了定投策略当中。</p><p>如果是这样的自带策略的体系，那么理论上你不需要再去主动卖出。如果是自己定投指数基金，那么你就参照价值类交易系统的匹配原则，去制定卖出策略。</p><h2 id="4-卖出的科学与艺术"><a href="#4-卖出的科学与艺术" class="headerlink" title="4 卖出的科学与艺术"></a>4 卖出的科学与艺术</h2><p>让我再简单总结一下关于卖出的科学与艺术。</p><p>卖出基本上可以分为三种情形，止损卖出，止盈卖出和丧失性价比优势的卖出。</p><p>卖出的单一动作是无法评判好坏对错的，它必须跟你的整个交易系统的底层逻辑相匹配。我们用最质朴的方法，把所有的交易系统归为趋势类和价值类两大类型，你再去匹配你的卖出策略，就能豁然开朗。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><ol><li><p>止损卖出</p><p>1.1 趋势交易中，刚刚买入没过多久发现趋势不存在了，变坏了要进行止损卖出<br>1.2 价值投资中，只有在这个公司基本面走坏，你的价值买入逻辑不存在的时候，你才应该止损卖出</p></li><li><p>止盈卖出</p><p>2.1 趋势交易中，上涨趋势已不存在，转换为下跌趋势时进行止盈卖出<br>2.2 价值投资中，当前的价值远高于你所认为的价值时进行止盈卖出</p></li><li><p>丧失性价比优势卖出</p><p>3.1 趋势交易中，趋势不看价值，因此无丧失性价比优势卖出<br>3.2 价值投资中，有更便宜的标的时，要进行卖出，去买入更便宜的表的</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 孟岩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于财富</title>
      <link href="/2020/05/14/%E5%85%B3%E4%BA%8E%E8%B4%A2%E5%AF%8C/"/>
      <url>/2020/05/14/%E5%85%B3%E4%BA%8E%E8%B4%A2%E5%AF%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：公众号-长赢指数投资<br>作者：ETF拯救世界 </p></blockquote><a id="more"></a><p>行文到最后一部分，我也多了一些思考。</p><p>看着微博评论区有些朋友的评论，我在想，是不是我确实跟不上时代了，百万消费上限都不够了？</p><p>我想，对于算是白手起家的、并非暴发而是慢慢致富，尤其是喜欢金融投资的“富一代”，恐怕一无兴趣、二无精力研究如何进行过于奢靡的消费。</p><p>我认识不少传统意义上的“富人”。大部分都在北京，少部分在上海、广东。极个别在三四线以下的城市。</p><p>在微博上我讲过一个远房亲戚的事情。他家在四线城市做渣土。懂行的人都明白能做渣土生意的是怎么回事吧？总而言之就是背景很深，挣得很多，算是突然暴富阶层。</p><p>他们来北京玩，都是背一口袋现金。到商场不问价格掏现金买。然后身边总是跟着一群“闺蜜”，所有闺蜜消费都是她买单。他开A6，他媳妇开路虎。每年花很多钱上下打点。即使如此，我也很难想象他们可以一年消费300万……</p><p>后来结局不太好，前几年突然去世了。40出头。借出去的钱别人都不认，每天很多债主上门讨债。做生意的很多看着风光，家里存款不多。加上几场债务官司，家里一下子变得很萧条。现在他媳妇跟人合开KTV，一个月几千块收入。</p><p>我认识的大多不是这样的暴富阶层，而是一步步通过积累跻身富裕阶层的，金融行业专业人士居多。这样的人都有差不多的状态：</p><p>讲究生活品质，买东西不会特别在意价格。拥有奢侈品，但是不会穷奢极欲买很多。相对来说，女性会消费更多，但也不会特别过分。男性坐在一起聊起日常消费，统一的感觉是：感觉该有的东西都有了，想花钱也不知道还能买什么。都是自己辛苦挣来的钱，该花的花，不会太浪费。</p><p>实际上，很大一部分人走在大街上你看不出他是个有钱人。</p><p>几乎所有人都会买房，而且是品质比较好的房。剩下的就会进行投资，赚更多钱。还有少数也会剑走偏锋，去进行一些无益于家庭稳定的消费。</p><p>大致也就是如此。</p><p>进而我考虑到一个问题：我们这个社会，消费主义是不是过于盛行了？</p><p>还记得前几年为了买苹果4S卖肾的人吗？还记得这几年为了满足自己的物欲，不惜网贷甚至L贷的年轻人吗？JD白条，蚂蚁花呗……所有信息都告诉年轻人，借钱消费是正确的，来吧，我把钱借给你，消费吧！</p><p>借贷消费是一把双刃剑。</p><p>一方面，对于消费来说是好事。如前所述，消费上去了，经济机器运转的更好。对于年轻人来说，能够拥有自己喜欢的东西而不必长时间攒钱再好不过。</p><p>另一方面，高息借贷又是压垮无数年轻人的一根稻草。每一个负债累累的年轻人背后，没有一个网贷机构是无辜的。</p><p>但这次疫情让很多人知道了财富积累的重要性（也深刻理解了为什么我们的计划总是强调“安全”。我们永远为了未来留有可支配现金，不轻易满仓）。</p><p>对于涉世未深的年轻人，我给你的关于财富的建议是：</p><p>第一，不要被消费主义洗脑。你从电视剧里，网络上看到的很多东西都是不现实的。比你资产多10倍甚至100倍的人，有一部分“生活质量”甚至有可能比不上小资的你。拥有物质会让人有一段时间的满足感，但你以为自己拥有了就会幸福的那个东西，未必真的会让你幸福。买东西，要问问自己，我是否需要它。无论它是贵还是便宜，都要“有用”才行。否则，再便宜的辣鸡都是辣鸡。买10个10块钱的垃圾，不如买1个100块的高品质好东西。</p><p>第二，永远要有存款。消费之前，先要拿出一部分钱存起来。存的多了，可以考虑进行金融投资。理想的状态，类货币资产的数额至少应该能覆盖6-12个月支出。其它的钱再投资。</p><p>第三，要么在本行业努力，争取做到前列，拿到更高的回报。要么利用业余时间做一点自己喜欢的副业，增加收入。主业+副业+金融投资，一个人变成三个人，财富积累自然快。收入越多，结余越多，距离自己的目标就会更近。</p><p>第四，理性投资。这个我说的太多了，不再多说。辛苦积累的财富，迅速消失只有四个方式：黄、赌、毒，以及乱投资。</p><p>今天很多朋友都要上班，所以我写一篇长点的东西给你解闷。也希望对你能有点启发。</p><p>我们每个人都在追求财富。财富真的非常重要。但是，有两点你应该知道：</p><p>1、财富永远都是身外之物。你赤条条孤独的来到这世界，最终也会不带一物孤独的离开。况且财富如流水，你今天万贯家财，也许明天就家徒四壁。财富很重要，但永远不是最重要的。什么最重要，你可以问问自己。</p><p>2、君子爱财，取之有道。虽说马无夜草不肥，但有些钱最好不赚。哪些钱不能赚，刑法里面有。再者千金散尽还复来，有了财富，对他人，尤其是爱自己的人不要过于吝啬，很重要。</p><p>希望大家都能实现自己的财富愿望。能够满足自己，爱自己以及自己所爱之人的合理物质需求，不再为金钱所困。</p><p>很多东西，钱真的买不到，这些东西你现在就可以去拥有它。等有了钱，再去买能买到的那些。</p><p>祝周六上班快乐。</p>]]></content>
      
      
      <categories>
          
          <category> ETF拯救世界 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>网站搭建</title>
      <link href="/2020/05/11/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/05/11/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简易网站搭建笔记</p></blockquote><a id="more"></a><h1 id="本地mysql账户搭建"><a href="#本地mysql账户搭建" class="headerlink" title="本地mysql账户搭建"></a>本地mysql账户搭建</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; CREATE DATABASE wordpress;</span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL ON wordpress.* to 'wordpress'@'localhost' IDENTIFIED BY 'v3LIdfs37sh34ngk8';</span><br><span class="line">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br><span class="line">MariaDB [(none)]&gt; exit;</span><br></pre></td></tr></table></figure><h1 id="php-5-6-安装"><a href="#php-5-6-安装" class="headerlink" title="php 5.6 安装"></a>php 5.6 安装</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装 php 5.6</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y php5.6-common php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-xml php5.6-gd php5.6-curl php5.6-json php5.6-fpm php5.6-zip php5.6-mcrypt libapache2-mod-php5.6</span><br></pre></td></tr></table></figure></div><h1 id="php7-2-和-php5-6版本-切换"><a href="#php7-2-和-php5-6版本-切换" class="headerlink" title="php7.2 和 php5.6版本 切换"></a>php7.2 和 php5.6版本 切换</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PHP 5.6 =&gt; PHP 7.2</span><br><span class="line"> sudo a2dismod php5.6</span><br><span class="line"> sudo a2enmod php7.2</span><br><span class="line"> sudo service apache2 restart</span><br><span class="line"> sudo update-alternatives --set php /usr/bin/php7.2</span><br><span class="line"></span><br><span class="line">PHP 7.2 =&gt; PHP 5.6</span><br><span class="line"> sudo a2dismod php7.2</span><br><span class="line"> sudo a2enmod php5.6</span><br><span class="line"> sudo service apache2 restart</span><br><span class="line"> sudo update-alternatives --set php /usr/bin/php5.6</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分级A</title>
      <link href="/2020/05/03/%E5%88%86%E7%BA%A7A/"/>
      <url>/2020/05/03/%E5%88%86%E7%BA%A7A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为个人学习总结E大的公众号关于分级A基金的相关知识</p></blockquote><a id="more"></a><h1 id="投资分级A：宁拿25-收益哭，也不在万点牛市笑"><a href="#投资分级A：宁拿25-收益哭，也不在万点牛市笑" class="headerlink" title="投资分级A：宁拿25%收益哭，也不在万点牛市笑"></a>投资分级A：宁拿25%收益哭，也不在万点牛市笑</h1>]]></content>
      
      
      <categories>
          
          <category> ETF拯救世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/2020/05/02/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/02/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一些，基本常用的docker命令</p></blockquote><a id="more"></a><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><h2 id="Ubuntu系统安装docker"><a href="#Ubuntu系统安装docker" class="headerlink" title="Ubuntu系统安装docker"></a>Ubuntu系统安装docker</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="meta">$</span> sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动 docker ce：</span><br><span class="line"><span class="meta">$</span> sudo systemctl enable docker</span><br><span class="line"><span class="meta">$</span> sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 建立docker 用户组：</span><br><span class="line"><span class="meta">$</span> sudo groupadd docker</span><br><span class="line">将当前用户加入 docker 组：</span><br><span class="line"><span class="meta">$</span> sudo usermod -aG docker $USER</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 测试docker是否安装正确：</span><br><span class="line"><span class="meta">$</span> docker run hello-world</span><br></pre></td></tr></table></figure></div><h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看本地镜像信息：</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取镜像详细信息 ：</span><br><span class="line">docker inspect d7c24664cfc1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除镜像：</span><br><span class="line">docker rmi repository:tag</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下载镜像：</span><br><span class="line">docker pull /public/mysql</span><br></pre></td></tr></table></figure></div><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看所有容器：</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看正在运行中的容器：</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 进入容器：</span><br><span class="line">docker exec -ti 容器id /bin/bash</span><br></pre></td></tr></table></figure></div><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li>数据卷 可以在容器之间共享和重用</li><li>对 数据卷 的修改会立马生效</li><li>对 数据卷 的更新，不会影响镜像</li><li>数据卷 默认会一直存在，即使容器被删除</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span> 创建一个数据卷</span><br><span class="line">docker volume create my-vol</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看所有的 数据卷</span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看指定 数据卷 的信息</span><br><span class="line">docker volume  inspect my-vol</span><br></pre></td></tr></table></figure></div><h3 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h3><blockquote><p>在用 docker run 命令的时候，使用 –mount 标记来将 数据卷 挂载到容器里。在一次 docker run 中可以挂载多个 数据卷。<br>下面创建一个名为 web 的容器，并加载一个 数据卷 到容器的 /webapp 目录。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    # -v my-vol:/webapp \</span><br><span class="line">    --mount source=my-vol,target=/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure></div><h3 id="查看启动的容器里面的数据卷信息"><a href="#查看启动的容器里面的数据卷信息" class="headerlink" title="查看启动的容器里面的数据卷信息"></a>查看启动的容器里面的数据卷信息</h3><blockquote><p>在主机里使用以下命令可以查看 web 容器的信息</p></blockquote><p><code>docker inspect web</code></p><blockquote><p>数据卷 信息在 “Mounts” Key 下面</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        "Type": "volume",</span><br><span class="line">        "Name": "my-vol",</span><br><span class="line">        "Source": "/var/lib/docker/volumes/my-vol/_data",</span><br><span class="line">        "Destination": "/app",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Mode": "",</span><br><span class="line">        "RW": true,</span><br><span class="line">        "Propagation": ""</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure></div><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><p><code>docker volume rm my-vol</code></p><p>数据卷 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令。</p><p>无主的数据卷可能会占据很多空间，要清理请使用以下命令</p><p><code>docker volume prune</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>投资要义</title>
      <link href="/2020/04/09/%E6%8A%95%E8%B5%84%E8%A6%81%E4%B9%89/"/>
      <url>/2020/04/09/%E6%8A%95%E8%B5%84%E8%A6%81%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>原书作者-刘诚</p><a id="more"></a><hr><h1 id="第一层级-系统性机会与系统性风险的识别"><a href="#第一层级-系统性机会与系统性风险的识别" class="headerlink" title="第一层级 系统性机会与系统性风险的识别"></a>第一层级 系统性机会与系统性风险的识别</h1><p>投资体系的三个层级如下。</p><ol><li><p>第一层级：系统性机会与系统性风险的识别；</p></li><li><p>第二层级：资产配置与动态再平衡；</p></li><li><p>第三层级：投资工具的使用。</p></li></ol><p>在投资体系的三个层级中，越基础的层级越简单，同时也越重要。</p><p>第一层级，决定了我们能不能赚钱；第二层级，决定了我们能不能安全、持久地赚钱；而第三层级，决定了我们能赚多少钱。</p><p>通常，我们所说的系统性机会，是指某个领域宏观的、大范围的、整体性的机会</p><p>（1）市盈率（Price Earnings ratio，简称PE）</p><p>计算公式：每股股价/每股收益，或总市值/公司年度净利润。</p><p>（2）市净率（Price Book Value ratio，简称PB）</p><p>计算公式：每股股价/每股净资产，或总市值/公司当前净资产。</p><h2 id="第一章-估值的应用"><a href="#第一章-估值的应用" class="headerlink" title="第一章 估值的应用"></a>第一章 估值的应用</h2><blockquote><p>市盈率的高低与指数值的高低有明显的相关性。市盈率越高，指数未来越容易下跌；市盈率越低，指数未来越容易上涨</p></blockquote><ol><li><p>从市盈率的角度看，当市场整体市盈率低于10倍时，就是明确的系统性机会；当市场整体市盈率超过20倍时，就是明确的系统性风险；</p></li><li><p>从市净率的角度看，当市场整体市净率在1倍附近时，就是明确的系统性机会；当市场整体市净率超过2倍时，就是明确的系统性风险。</p></li></ol><blockquote><p>随着A股市场日益成熟，长期来看，它的估值中枢向成熟市场靠拢是大概率事件。话虽如此，但在实际操作中，我们完全不必以此判断作为行动的依据，因为无论A股市场在下一次牛市顶峰时的市盈率水平达到20倍、30倍还是40倍，我们在整体市盈率低于10倍时开始投资，超过20倍时退出，总是没有错的；同样，无论它在下一次牛市顶峰时的市净率水平达到2倍、3倍还是4倍，我们在整体市净率接近1倍时开始投资，超过2倍时退出，总是没有错的。</p></blockquote><h3 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h3><ol><li>通过市盈率、市净率的高低，我们可以有效识别市场的系统性机会与系统性风险。</li><li>通过构建低市盈率、低市净率的投资组合，我们可以获取远高于市场平均水平的超额收益。</li><li>在实际操作中，将1与2结合使用，在系统性机会期进入市场，在系统性风险期退出市场，同时，在进入市场时构建一个低估值的投资组合，将取得比单独使用1或2更加卓越的成绩。</li></ol><h2 id="第二章-估值的原理"><a href="#第二章-估值的原理" class="headerlink" title="第二章 估值的原理"></a>第二章 估值的原理</h2><ol><li>用经营价值和清算价值去评估同一家公司，可能会得出不同的结论；</li><li>经营价值成立的前提是公司能够永续经营；</li><li>相比于经营价值，清算价值更可靠。</li></ol><blockquote><p>如果我们总是以低于清算价值的价格去购买资产，长期来看，亏损将是一个几乎不可能完成的任务。在股市中，代表清算价值的指标是市净率，如果市净率小于1，就意味着这家公司的交易价格低于其净资产，通常这也意味着它的价格低于其清算价值[插图]。这个指标非常重要，请牢牢记住。</p></blockquote><hr><h1 id="第二层级-资产配置和动态再平衡"><a href="#第二层级-资产配置和动态再平衡" class="headerlink" title="第二层级 资产配置和动态再平衡"></a>第二层级 资产配置和动态再平衡</h1><h2 id="第三章-资产配置"><a href="#第三章-资产配置" class="headerlink" title="第三章 资产配置"></a>第三章 资产配置</h2><h3 id="01-资产配置概述"><a href="#01-资产配置概述" class="headerlink" title="01 资产配置概述"></a>01 资产配置概述</h3><blockquote><p>资产配置中，最简单的应用就是分散化</p></blockquote><h3 id="02-单类资产的内部配置"><a href="#02-单类资产的内部配置" class="headerlink" title="02 单类资产的内部配置"></a>02 单类资产的内部配置</h3><blockquote><p>在实际操作中，笔者会对个股和行业的配置设置严格的上限。每只股票不能超过资产的5%，每个行业不能超过资产的20%。</p></blockquote><blockquote><p>既然分析公司是无用的，那么我们如何确定该买哪些股票呢？方法惊人地简单：永远只买低市盈率和低市净率的股票，分散买！</p></blockquote><blockquote><p>低估值和分散化是一种完美的结合，缺一不可。如果集中买入低估值的公司，一辈子只要遇到一次失败，就会把之前的积累全部清零；如果分散买入高估值的公司，你的资产必将缓慢地缩水，终有一天变得聊胜于无。</p></blockquote><h3 id="03-大类资产配置"><a href="#03-大类资产配置" class="headerlink" title="03 大类资产配置"></a>03 大类资产配置</h3><blockquote><p>从资产的属性上说，股权类资产怕深度下跌，债权类资产怕恶性通胀。</p></blockquote><blockquote><p>绝大部分指数的市盈率的中位数都在10倍以上，而市盈率的最大值更是全部远高于10倍,只要我们在股票市场整体市盈率低于10倍的时候，分散买入一揽子股票，或直接买入指数基金，那么赚钱是迟早的事。但是，韩国股市的PE最小值曾经达到过4.1倍，德国股市的PE最小值达到过2.2倍,如果你在10倍市盈率时进入这两个市场，后续要承担多么巨大的跌幅。</p></blockquote><blockquote><p>其实，投资的原理并不复杂，只要分散买入低估值的股票就能赚钱了，可是为什么最终靠投资致富的人却没有几个呢？除了不能控制人性的贪婪之外，还有一个重要的原因，那就是对极端状况的准备不够充分</p></blockquote><blockquote><p>想要有效地应对这种极端状况，就必须了解“大类资产配置”的概念</p></blockquote><blockquote><p>在我们的资产配置中，不能只有股票或股权类资产，同时还需要持有如债券、货币基金、分级基金A和现金之类的债权类资产</p></blockquote><blockquote><p>当某一类资产的价格崩溃，出现了不可思议的低估值时，我们将另一类价格合理的资产置换成被低估的资产，这个行为显然是正确的。不过这里面有一个问题——我们不知道目前已经很被低估的资产，未来究竟还会有多深的跌幅</p></blockquote><blockquote><p>面对难以预判的事情，最好的办法就是不预判。关于上述问题，最科学的解决方案就是——动态再平衡。</p></blockquote><h3 id="04-动态再平衡"><a href="#04-动态再平衡" class="headerlink" title="04 动态再平衡"></a>04 动态再平衡</h3><p>动态再平衡与传统的投资策略相比，有两个重大的区别：</p><ol><li>它是被动地按照规则去调整仓位，而不是主动地依靠判断去调整仓位；</li><li>它会按照各类资产间的“比例”去调整仓位。</li></ol><blockquote><p>随着水平不断提高，我们也可以在动态再平衡策略中加入一些主动的因素。比如基于对估值的判断，我们可以让股权类和债权类资产的比例在7:3到3:7之间回来变化，股票市场估值低而债券市场估值高时多配股票，相反的情况则多配债券</p></blockquote><blockquote><p>这是一个有趣的现象：越简单的策略，越无懈可击</p></blockquote><h3 id="05-不同市场间的资产配置"><a href="#05-不同市场间的资产配置" class="headerlink" title="05 不同市场间的资产配置"></a>05 不同市场间的资产配置</h3><blockquote><p>越珍惜机会，你就越把握不好</p></blockquote><blockquote><p>低估值，分散化，走遍天下都不怕！</p></blockquote><h3 id="06-总结"><a href="#06-总结" class="headerlink" title="06 总结"></a>06 总结</h3><blockquote><p>这时我们需要对每一个行为进行追问：在确保资产配置足够分散的同时，我是否将足够多的资产配置到了处于系统性机会期的市场？我是否让绝大部分资产远离了处于系统性风险期的市场？当我进行再平衡之后，我的资产配置是否仍符合上述要求？</p></blockquote><hr><h1 id="第三层级-投资工具的使用"><a href="#第三层级-投资工具的使用" class="headerlink" title="第三层级 投资工具的使用"></a>第三层级 投资工具的使用</h1><h2 id="第五章-进阶投资工具"><a href="#第五章-进阶投资工具" class="headerlink" title="第五章 进阶投资工具"></a>第五章 进阶投资工具</h2><h3 id="01-期权"><a href="#01-期权" class="headerlink" title="01 期权"></a>01 期权</h3><blockquote><p>期权（Option）是一种衍生性金融工具，是指买方向卖方支付期权费后，拥有的在未来一段时间内（指美式期权）或在未来某一特定日期（指欧式期权）以事先规定好的价格向卖方购买或出售一定数量的特定商品的权利，但不负有必须买进或卖出的义务。</p></blockquote><h4 id="期权的使用"><a href="#期权的使用" class="headerlink" title="期权的使用"></a>期权的使用</h4><h5 id="期权标的物的估值"><a href="#期权标的物的估值" class="headerlink" title="期权标的物的估值"></a>期权标的物的估值</h5><p>低估值的股票或股票指数更容易在未来获得超额回报。<br>所以我们在投资看涨期权时，一定要选择其标的物估值足够低的。</p><p>应用：在投资期权时，期权标的物的市净率（PB）不能高于1倍，无论是指数还是个股。</p><h5 id="期权溢价率"><a href="#期权溢价率" class="headerlink" title="期权溢价率"></a>期权溢价率</h5><p>期权溢价率的公式是：（期权标的物行权价+期权价格-期权标的物现价）÷期权标的物现价× 100%。</p><p>这个指标可以告诉我们期权的盈亏平衡线在哪里，也就是期权标的物需要涨多少，期权才能保本。对投资者而言，期权的溢价率越低越好。</p><p>应用：期权溢价率必须小于30%。</p><h5 id="期权剩余时间"><a href="#期权剩余时间" class="headerlink" title="期权剩余时间"></a>期权剩余时间</h5><p>期权剩余时间的计算公式为：行权日期-当前日期。期权的剩余时间是指当前时间与到期时间的差，与期权的发行时间无关。</p><p>我们在投资期权时，不必非要等到期权到期，然后将其行权，只需在期权上涨后将其卖出即可（公开交易的欧式期权虽然不能在任意时间行权，但可以在任意时间通过证券市场进行买卖）。<br>一般来说，一张看涨期权，如果其标的物价格上涨，该期权也会上涨，而且由于杠杆的存在，期权的上涨幅度会远远超过其标的物本身。</p><p>应用：期权的剩余时间必须超过2年（730天）。</p><h5 id="杠杆倍数"><a href="#杠杆倍数" class="headerlink" title="杠杆倍数"></a>杠杆倍数</h5><p>关于期权的一个常用指标叫作“杠杆比率”，它反映的是正股股价与其期权价格的比值，计算公式为：杠杆比率=正股现价/（期权价格×行权比例）。请注意，笔者在这里所说的杠杆倍数不是这个意思！</p><p>杠杆倍数是指假设我们以当前价格买入某期权，当它的标的物价格翻倍时，其期权的价格能翻多少倍（假设届时期权溢价率为0），所以严格地说，它应该叫作“标的物价格翻倍时的杠杆倍数”，为了方便表述，我们之后将其称为“杠杆倍数”。这个指标是笔者根据过往投资经验总结出的，并不是市场的通用指标，在任何软件或网站上都无法直接查到。期权对于多数投资者而言仅仅是一个用来炒作的工具，而只有对于那些把期权当作一个有价值的东西进行长期投资（投机）的人来说，杠杆倍数这个指标才是有价值的。</p><p>杠杆倍数的计算公式为：杠杆倍数=（期权标的物价格×2-期权行权价）/（期权价格×行权比例）。</p><p>举例说明，假设某期权价格为0.1元，其对应的标的物股票当前价格为10元，该期权的行权价为12元，行权比例为10:1，即10张期权换1股股票。那么当该股票价格上涨到20元时，期权的内在价值为（10×2-12）/（0.1×10）=8（倍）。</p><p>使用这个指标的前提是我们之前阐述的几个条件被满足，只有当期权标的物的估值足够低，期权剩余的时间足够长时，我们才能够预期该标的物的价格在期权的存续期内有翻倍的可能。当然，我们绝不能认为某种东西的价格必然会翻倍，标的物在特定期限内的涨幅能有多大，这是一个概率分布的问题。我们能够确定的是，低估值的东西有“均值回归”的内在动力，时间越长，回归的可能性越大。</p><p>应用：期权的杠杆倍数必须高于10倍。</p><h5 id="总结我们对期权的要求"><a href="#总结我们对期权的要求" class="headerlink" title="总结我们对期权的要求"></a>总结我们对期权的要求</h5><ol><li>期权标的物必须低估，市净率不超过1倍；</li><li>期权溢价率不能太高，要低于30%；</li><li>期权剩余时间要足够长，必须超过2年；</li><li>期权杠杆倍数要足够高，必须高于10倍。</li></ol><p>对于期权有所了解的读者看到这个标准，想必会认为太过严苛了。同时满足上述四个标准的期权产品几年也未必能遇到一个。是的，这样就对了！请记住，期权是一种极其凶险的投资工具，我们在正常情况下默认的做法是不碰它！只有当它的风险和收益极不对称时，才值得小注一把。注意，是小注一把，而不是放手一拼。个人投资者投资期权的比例，绝不能超过资产的5%，如果做不到这一点，请尽快将本书中关于期权的章节全部撕掉！</p><p>歇斯底里的风险提示之后，让我们回归到专业技术的讨论。有专业背景的投资者看到上述四个严苛的指标后，自然会想到一个问题：要同时满足这四个指标显然很难，那么它们之间是否可以相互补偿？比如，如果期权标的物的估值为0.4PB，那么是否可以接受其溢价率为50%？如果期权的杠杆倍数为30倍，那么是否可以接受其剩余时间为1年？按照标准的金融理论，其实是可以的。但现实中，笔者的回答是：不能。</p><p>两个原因。</p><p>第一，刚才说过，期权是极其凶险的投资工具，我们不应经常使用它。允许几个条件相互补偿，会增加期权进入我们狩猎范围的频率。理论上这是中性的，但那是对于高度冰冷的大脑而言，绝大多数有血有肉的投资者都会在频繁的期权操作中迷失自己。严格执行上述四个指标是对投资者精神状态的一种保护。</p><p>第二，我们应当尽量避免那些“收益率极高但成功率极低”的投资。上述四个指标，其实就是试图让期权的投资在“成功率”与“收益率”之间达成一种均衡。笔者不期待投资某个期权能赚数百倍，但希望能够做到——每投资两次期权，至少有一次不赔光。</p><p>人类毕竟不是机器，在投资中单纯地追求数学上的高期望值，而不考虑成功率，至少会面临两个问题。</p><p>1.人类的青春是有限的，所以我们希望自己的财富每年（至少每几年）都有增长，而不是在长年累月的亏损后，突然在某一天获得成百上千倍的回报。</p><p>2.人类的思考能力是有限的，在经历了连续数十次甚至上百次的亏损之后，我们会开始怀疑自己的做法到底对不对，更尴尬的是，我们无法找到标准答案。投资不是考试，我们只能用残忍的现实来验证自己的方法。这时，两种模式的优劣就会体现出来。理论上高成功率低回报率的方法，如果连续几次不成功，我们就知道自己的方法可能是有什么地方出了问题。而理论上低成功率高回报率的方法，即使连续几十次不成功，我们也很难判断究竟是方法不对还是运气不好。</p><h4 id="期权轮动策略"><a href="#期权轮动策略" class="headerlink" title="期权轮动策略"></a>期权轮动策略</h4><blockquote><p>一种能够放大期权收益的诡异方法——期权轮动策略。属于期权的套利。</p></blockquote><p>期权轮动策略是一种通过在不同期权之间进行切换以提高收益的策略。之所以说它诡异，是因为这一部分收益理论上是不应该存在的。我们先来看一组数据。</p><ol><li>A中法兴七一购A（12793）：0.093港元</li><li>A中汇丰六乙购A（12322）：0.093港元</li><li>A中高盛六乙购A（26378）：0.096港元</li><li>A中渣打六乙购A（29666）：0.1港元</li><li>A中瑞信六乙购A（13261）：0.104港元</li><li>A中瑞银六乙购A（13277）：0.111港元</li></ol><p>这同样是2014年3月的数据。在当时的市场中存在着这样6个相同的期权，它们除了发行商不同外，其他所有条款，如期权形式（欧式期权）、期权方向（看涨期权）、期权标的物（安硕A50中国基金）、到期时间（事实上，它们的到期时间相差7天，相对于2年零10个月的剩余时间，这是一个可以忽略的差异）、行权价格（8.17）以及行权比例（10:1）都一模一样。</p><p>这6个期权的发行商分别是：法兴、汇丰、高盛、渣打、瑞信、瑞银，都是颇有实力的金融机构。如果我们认为它们都不太可能违约的话，那么理论上，这六个期权就是无差别的，他们的价格应该完全相等才对。然而事实上，当时它们中价格最高的是0.111港元，价格最低的是0.093港元，相差约20%！并且，它们之间的相对价差是完全随机的，今天期权A比期权B贵20%，到下个月可能期权B就比期权A贵15%。这种相对差价的出现完全无法预测，但由于他们是完全一样的东西，我们根本不必预测，只要在买入时选择价格最低的那一个，在之后持有期权的过程中，随着价格变化，不断将期权换成价格最低的那一个就可以了！更神奇的是，这种近乎于弱智的市场现象，平均每过几个月就会出现一次！我们只需每天甚至每个月打开交易软件看一眼，就能捡到钱！</p><h4 id="风险提示"><a href="#风险提示" class="headerlink" title="风险提示"></a>风险提示</h4><p>（1）期权是风险极高的投资工具，默认的状态是不使用；</p><p>（2）投资期权的比例不得高于自有资金的5%。</p><hr><h3 id="01-可转债"><a href="#01-可转债" class="headerlink" title="01 可转债"></a>01 可转债</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小强升职记：时间管理故事书</title>
      <link href="/2020/04/07/%E5%B0%8F%E5%BC%BA%E5%8D%87%E8%81%8C%E8%AE%B0%EF%BC%9A%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%95%85%E4%BA%8B%E4%B9%A6/"/>
      <url>/2020/04/07/%E5%B0%8F%E5%BC%BA%E5%8D%87%E8%81%8C%E8%AE%B0%EF%BC%9A%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%95%85%E4%BA%8B%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>原书作者：邹鑫</p><a id="more"></a><h1 id="第一章-你的时间都去哪了"><a href="#第一章-你的时间都去哪了" class="headerlink" title="第一章-你的时间都去哪了"></a>第一章-你的时间都去哪了</h1><h2 id="一、你真的很忙么？"><a href="#一、你真的很忙么？" class="headerlink" title="一、你真的很忙么？"></a>一、你真的很忙么？</h2><blockquote><p>时间黑洞，顾名思义，它会永无止境地吞噬你宝贵的时间。</p></blockquote><blockquote><p>时间黑洞的产生源于大脑喜欢做简单事情的特点，刷朋友圈和写报告哪个更简单？当然是刷朋友圈，所以大脑就会倾向于刷微博，如果你能对比一下陷入时间黑洞里做的事情，和平时做的事情，就会发现这一点。</p></blockquote><h2 id="二、如何记录和分析时间日志"><a href="#二、如何记录和分析时间日志" class="headerlink" title="二、如何记录和分析时间日志"></a>二、如何记录和分析时间日志</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/20200408080359.png" alt="避免时间黑洞的建议"></p><ul><li>提高工作效率的技巧</li></ul><ol><li>找出重要的事情在高效时段内完成。每天早晨别一上班就急着投入工作，先看看今天工作的重点是什么，哪些事情是重要并且紧迫的。将这些事情安排在你的高效时段完成。</li><li>回顾你需要发布或者呈送给上司的资料。我们不可能第一次就把事情做到尽善尽美，自己编写的材料就是自己的名片，在这上面不要吝啬时间，或许它们能让别人对你刮目相看。</li><li>看新闻用RSS。现在很多网站包括Sohu在内都提供RSS的阅读方式。这样的好处是你不用频繁地在地址栏输入URL，更重要的是RSS广告很少，也没有铺天盖地的超链接，能够让你将注意力始终保持在你关心的内容上。这样你就不是在冲浪而是用罗盘在大海里航行，方向始终掌握在自己的手中。</li><li>减少检查邮件的次数。每天两次足够了，并且应该注意，往往在上网聊天或者无所事事的时候就会“习惯性”地检查邮件，因此，应该找些事做来分散自己的注意力。</li></ol><h2 id="如何找到自己的价值观？"><a href="#如何找到自己的价值观？" class="headerlink" title="如何找到自己的价值观？"></a>如何找到自己的价值观？</h2><blockquote><p>价值观是指一个人对周围的客观事物（包括人、事、物）的意义、重要性的总评价和总看法</p></blockquote><h3 id="价值观没有对错"><a href="#价值观没有对错" class="headerlink" title="价值观没有对错"></a>价值观没有对错</h3><h3 id="职业价值观自测量表"><a href="#职业价值观自测量表" class="headerlink" title="职业价值观自测量表"></a>职业价值观自测量表</h3><hr><h1 id="第四章-如何养成一个好习惯"><a href="#第四章-如何养成一个好习惯" class="headerlink" title="第四章-如何养成一个好习惯"></a>第四章-如何养成一个好习惯</h1><blockquote><p>时间不是节省出来的，而是创造出来的。</p></blockquote><h2 id="一、培养习惯首先找到驱动力"><a href="#一、培养习惯首先找到驱动力" class="headerlink" title="一、培养习惯首先找到驱动力"></a>一、培养习惯首先找到驱动力</h2><ul><li><p>走到今天，我才体会到，人生就像是在雪地里行走，向后看，是自己一路走来的轨迹；向前看，是白茫茫的一片。不要问‘该往哪走’，只要回答‘想往哪走’。自己的双脚就是书写历史的工具。</p></li><li><p>培养习惯的秘诀是少、慢，而不是多、快</p></li><li><p>每个月早起超过25天就好，偶尔放自己一马</p></li><li><p>首先我们养成习惯，然后习惯改变我们</p></li><li><p>我的感悟是驱动力&gt;约束力，养成习惯就是打开一扇从里面锁住的门，用约束力在外面猛砸有时也管用，但不如用驱动力从里面打开那样优雅、有效，记住：力量来自于你的内心。</p></li><li><p>所以培养习惯首先要找到驱动力！</p></li></ul><h2 id="二、再微不足道的成就都要大肆庆祝！"><a href="#二、再微不足道的成就都要大肆庆祝！" class="headerlink" title="二、再微不足道的成就都要大肆庆祝！"></a>二、再微不足道的成就都要大肆庆祝！</h2><blockquote><p>第二个朋友是来自台湾的美华，一个普普通通的女孩，她自从读了《晨间日记的奇迹》（佐藤传著）之后，就决定每天早起，并且说出一句深深打动我的话：‘再微不足道的成就，都要大肆庆祝’。我给你看一段她坚持400天早起后制作的视频：21天，用一顿丰盛的早餐，为这小小的成就庆祝！66天，给自己鼓掌说赞！98天，用一顿牛排大餐提前庆祝历史性的100天！迟来的200天纪念和生日礼物是GRD Ⅲ相机，从此用影像来记录身边的美好事物！365天，一周年！为自己准备一块精致的水果蛋糕，再插上一根炫彩的蜡烛！400天，用亲手制作的影片来纪念和传播早起的力量。</p></blockquote><h2 id="三、培养习惯不是一个人的事"><a href="#三、培养习惯不是一个人的事" class="headerlink" title="三、培养习惯不是一个人的事"></a>三、培养习惯不是一个人的事</h2><blockquote><p>我们为什么要千方百计地自律呢？</p></blockquote><blockquote><p>因为自律即自由！这句话是康德说的，你想想看，当早晨闹钟响起的时候，你想要起床锻炼身体，结果你还是赖床了，这时候你的主人是谁？不想起床的欲望！我们换一种结果，闹钟响起，你真的就起床锻炼身体了，这时候你的主人是谁？是你自己！这才是自由！所以，我们不是在培养习惯，也不是在时间管理，而是选择内心自由的生活方式！</p></blockquote><hr><h1 id="第五章-如何让想法落地"><a href="#第五章-如何让想法落地" class="headerlink" title="第五章-如何让想法落地"></a>第五章-如何让想法落地</h1><h2 id="一、用S-M-A-R-T法则厘清目标"><a href="#一、用S-M-A-R-T法则厘清目标" class="headerlink" title="一、用S.M.A.R.T法则厘清目标"></a>一、用S.M.A.R.T法则厘清目标</h2><ul><li>Smart法则<br>它是制定目标的5个原则。</li></ul><ol><li>S——Specific<br>这里指的是目标一定要明确，不能够模糊。</li><li>M——Measurable<br>目标的可衡量性。是否有一个实现目标的标准。</li><li>A——Attainable<br>目标的可实现性。一个目标必须是可以实现的，或者说经过努力是可以实现的。</li><li>R——Relevant<br>目标必须和其他目标具有相关性。完成这个目标对你的其他目标有何帮助？</li><li>T——Time-based<br>目标必须具有明确的截止期限。即一个目标只有在一定的时间内达成才有意义。</li></ol><h2 id="二、用思维导图梳理计划"><a href="#二、用思维导图梳理计划" class="headerlink" title="二、用思维导图梳理计划"></a>二、用思维导图梳理计划</h2><h2 id="三、用甘特图掌控进度"><a href="#三、用甘特图掌控进度" class="headerlink" title="三、用甘特图掌控进度"></a>三、用甘特图掌控进度</h2><h2 id="四、用九宫格平衡人生"><a href="#四、用九宫格平衡人生" class="headerlink" title="四、用九宫格平衡人生"></a>四、用九宫格平衡人生</h2><blockquote><p>我认为人有五大需求，分别是心灵、健康、情感、心智、财务，这些需求的平衡满足，才是富足的人生，所以我以此制订我的年度目标：”老付分别在格子里填上“心灵/成功日记”，“心灵/微梦想”，“心灵/事业”，“情感/人际关系”，“情感/家庭”，“心智/阅读、技能”，“健康”，“财务”。</p></blockquote><ul><li>心灵/成功日记：每天一篇成功日记</li><li>心灵/微梦想：完成10个微梦想</li><li>心灵/事业：写一本书；每周更新一篇博客</li><li>情感/人际关系：和这些朋友至少每月沟通一次</li><li>情感/家庭：每周煲汤给家里人喝；带家里人出去旅游一次</li><li>心智/阅读、技能：读50本书，写50篇读书笔记</li><li>健康：每天6:30起床；每周有氧运动2次</li><li>财务：保密</li></ul><p><img src="http://oss.jingwl.top/graph-bed/2020/20200407215014.png" alt="人生九宫格"></p><blockquote><p>他原来对工作的理解是：按时上班，做好自己的事情，然后下班。但是现在他开始充分地享受工作的每一分钟，因为每一分钟都是他成长的机会。他以前总是将注意力放在如何解决问题上，而现在，他有了更多的精力去思考如何将事情做得更好。</p></blockquote><blockquote><p>优秀的人有优秀的系统，普通的人有普通的系统，失败的人没有系统！</p></blockquote><hr><h1 id="第六章-建立高效办公区"><a href="#第六章-建立高效办公区" class="headerlink" title="第六章-建立高效办公区"></a>第六章-建立高效办公区</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>frp远程控制Windows</title>
      <link href="/2020/03/22/frp%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6Windows/"/>
      <url>/2020/03/22/frp%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6Windows/</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用frp来实现windows系统的远程桌面控制</p></blockquote><hr><a id="more"></a><h1 id="frp服务端配置"><a href="#frp服务端配置" class="headerlink" title="frp服务端配置"></a>frp服务端配置</h1><p>frp服务端配置文件frps.ini的配置内容如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure></div><p>frp服务端后台启动命令如下：  </p><p><code>nohup /usr/local/frp/frp_0.30.0_linux_amd64/frps -c /usr/local/frp/frp_0.30.0_linux_amd64/frps.ini &amp;</code></p><hr><h1 id="frp客户端配置"><a href="#frp客户端配置" class="headerlink" title="frp客户端配置"></a>frp客户端配置</h1><p>frp客户端配置文件frpc.ini的配置内容如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tcp]</span> </span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span> </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span> </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7002</span></span><br></pre></td></tr></table></figure></div><p>frp客户端启动命令如下：  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 进入frp目录</span><br><span class="line"><span class="built_in">cd</span> c://frp </span><br><span class="line"># 启动frp客户端命令</span><br><span class="line">frpc -c frpc.ini</span><br></pre></td></tr></table></figure></div><hr><h1 id="windows系统开机自动启动frp客户端"><a href="#windows系统开机自动启动frp客户端" class="headerlink" title="windows系统开机自动启动frp客户端"></a>windows系统开机自动启动frp客户端</h1><blockquote><p>完成以上2个步骤的配置后，基本就可以实现穿透内网的windows的远程访问啦<br>但是还不能达到win系统开机自动启动frp客户端，无法实现真正意义上的<strong>远程无人值守控制</strong></p></blockquote><p>为了达到真正意义上的无人值守操作需要进行以下步骤：  </p><h2 id="一、-编写启动frp客户端的bat脚本"><a href="#一、-编写启动frp客户端的bat脚本" class="headerlink" title="一、 编写启动frp客户端的bat脚本"></a>一、 编写启动frp客户端的bat脚本</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BAT"><figure class="iseeu highlight /bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">start</span>  "wumin" "C:\Windows\System32\<span class="built_in">cmd</span>.exe" </span><br><span class="line"><span class="built_in">cd</span> c://frp</span><br><span class="line">frpc -c frpc.ini</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure></div><h2 id="二、-配置电脑开机不用登录账号自动运行bat文件"><a href="#二、-配置电脑开机不用登录账号自动运行bat文件" class="headerlink" title="二、 配置电脑开机不用登录账号自动运行bat文件"></a>二、 配置电脑开机不用登录账号自动运行bat文件</h2><ol><li><p>进入控制面板-系统和安全-管理工具，找到任务计划程序，进入任务计划程序库，创建基本任务。</p></li><li><p>添加基本任务名称和描述，名称必填，可以做个具体指向性的，好区分。</p></li><li><p>选计算机启动时开始该任务</p></li><li><p>选启动程序</p></li><li><p>查找程序位置，例如run.bat文件位置</p></li><li><p>这步很关键，要注意，一定要选 当单击 完成 时，打开此任务属性的对话框。</p></li><li><p>在弹出的对话框中，选择 不管用户是否登录都要运行。这一步很关键，选择后，就可以达到用户不登录只要电脑启动就执行程序。</p></li><li><p>上一步确定后，会弹出用户名输入对应密码，一般都是管理权限的用户名，如果没有，建议进入用户管理设置。</p></li><li><p>最后，完成。可以重启电脑测试结果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> frp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS 提示工具-Tooltip</title>
      <link href="/2020/03/19/CSS-%E6%8F%90%E7%A4%BA%E5%B7%A5%E5%85%B7-Tooltip/"/>
      <url>/2020/03/19/CSS-%E6%8F%90%E7%A4%BA%E5%B7%A5%E5%85%B7-Tooltip/</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用CSS实现当鼠标移动到单元格上时，显示隐藏的信息。<br>例如，单元格显示的是用户的ID，当鼠标移动到用户ID上时，显示用户的姓名。</p></blockquote><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">  <span class="selector-class">.tooltip_5691</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted black;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tooltip_5691</span> <span class="selector-class">.tooltiptext_5691</span> &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: black;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 定位 */</span></span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tooltip_5691</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltiptext_5691</span> &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: visible;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tooltip_5691"</span>&gt;用户ID：<span class="number">1</span></span><br><span class="line">&lt;span class="tooltiptext_5691"&gt;用户姓名1&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tooltip_5691"</span>&gt;用户ID：<span class="number">2</span></span><br><span class="line">&lt;span class="tooltiptext_5691"&gt;用户姓名2&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux shell中的eval命令</title>
      <link href="/2020/03/19/Linux-shell%E4%B8%AD%E7%9A%84eval%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/19/Linux-shell%E4%B8%AD%E7%9A%84eval%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>语法：eval cmdLine</p><p>eval会对后面的cmdLine进行两遍扫描，如果第一遍扫描后，cmdLine是个普通命令，则执行此命令；如果cmdLine中含有变量的间接引用，则保证间接引用的语义。</p><a id="more"></a><p>举例如下：</p><p>set 11 22 33 44</p><p>如果要输出最近一个参数，即44，可以使用如下命令，</p><p>echo $4</p><p>但是如果我们不知道有几个参数的时候，要输出最后一个参数，大家可能会想到使用$#来输出最后一个参数，</p><p>如果使用命令：</p><p>echo “\$$#”</p><p>则得到的结果是 $4，而不是我们想要的44。这里涉及到一个变量间接引用的问题，我们的本意是输出 $4，默认情况下，命令后忽略变量间接引用的情况。</p><p>这时候，就可以使用eval命令。</p><p>eval echo “\$$#”</p><p>得到的结果为44</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>钻石坑里的心理状态</title>
      <link href="/2020/03/19/%E9%92%BB%E7%9F%B3%E5%9D%91%E9%87%8C%E7%9A%84%E5%BF%83%E7%90%86%E7%8A%B6%E6%80%81/"/>
      <url>/2020/03/19/%E9%92%BB%E7%9F%B3%E5%9D%91%E9%87%8C%E7%9A%84%E5%BF%83%E7%90%86%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文来源于 EFT拯救世界的公众号-长赢指数投资（chinaetfs） 写于2018年11月4日</p></blockquote><a id="more"></a><p>莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。<br>料峭春风吹酒醒，微冷，山头斜照却相迎。回想向来萧瑟处，归去，也无风雨也无晴。</p><p>其实人这一生，最难得就是平和二字。<br>多少飞来横祸，悲惨人生，都是缘起心态不够平和。万事皆然，投资当然亦如是。</p><p>在这样十年只得两三次的钻石大坑，我想跟各位聊聊心态的问题。</p><p>新的情绪波动<br>这几年一路熊市一路按摩，不断提示也许远超绝大多数人想象的大熊市有可能到来。<br>这样的预防针一针针的打下去，效果果然非常好。在今年这样几乎跌的所有人目瞪口呆痛苦不堪的时候，咱们这里却是欢乐祥和，甚至不少朋友希望继续大跌……从这个角度讲，本人也是非常欣慰。</p><p>然而我隐隐感受到一种情绪在不少朋友们内心中开始滋生蔓延甚至已经要影响到很多人的投资行为。</p><p>这种情绪叫做急躁。</p><p>这急躁，来源于很多人害怕自己在这样的钻石坑里买的太少，没法在下轮牛市中改变人生。</p><p>于是，我看到了有朋友想尽办法要上杠杆；看到了有朋友开始琢磨要卖房买股；又看到有朋友在家人进行了一些“不必要消费”的时候大发雷霆……</p><p>即使没有这些表现，我相信很多朋友也会在几天反弹后因为自己没有在反弹前买入更多而后悔不已，心情抑郁。</p><p>这样的情绪，这样的心情我都很理解。在这个世界上，绝大多数人都认为自己的钱不够多。在一个可识别的，很大概率是一定程度上可以改变命运的好机会来到自己眼前的时候，难免急于求成。</p><p>如果像以前一样，毫无准备的被扔到大坑里，根本不知道大机会就在眼前，也就算了。现在被安排的明明白白的来到了钻石坑，还抓不住大机会，岂不浪费？</p><p>我非常理解。</p><p>几乎所有人都喜欢钱。有人需要用钱去买房，有人需要用钱买喜欢的东西，有人需要用钱实现自己环游世界的梦想，有人需要用足够的钱做后盾，对厌恶已久的老板说一声——老子不干了。</p><p>不过，古语有云，财不入急门，我个人深以为然。</p><p>问题的关键，在于当你的预期也许与资本市场模糊的未来走势不匹配时，你会不会心态崩盘。</p><p>模糊和概率<br>熟悉我的朋友知道，在我的投资体系中，最核心的就是概率两个字。进行金融投资，某种意义上是一种赌博。当然，很多人会对这种说法嗤之以鼻——我辛辛苦苦研究企业研究基本面研究宏观经济研究图形走势怎么变成赌博了？<br>当然是赌博。</p><p>不过金融投资最有意思的地方在于，这是一种可以计算胜率的赌博。当你通过各种研究，计算出你自己的胜率大的时候，就开始下注。胜率越大，下的注就越重。如果这个游戏，这个世界够理性，那你就大概率会取得胜利。</p><p>但是，我希望各位了解的是，没有什么100%一定发生的事情。即使有0.001%的可能性发生某件事，那么就真的有可能发生。</p><p>咱们的指数投资走到今天，毫无疑问的，已经是一件获胜概率极大的事件。</p><p>首先，咱们的投资标的不会死。其次，咱们的成本非常低。</p><p>前一个要素我就不多说了，各位都理解。第二个，成本非常低，低到什么程度？一句话你就明白了：</p><p>我们的成本，低到即使在这样暴跌到十年只有两三回的钻石坑里，账面浮亏最大的朋友也就十个点左右。十个点有多么容易回本？你心里清楚，我不多说。</p><p>所以，只要不发生意外，咱们的胜率极大。据权威机构测算，咱们的胜率达到了96.41%。这样的胜率，已经是三个以上的标准差，恭喜各位！</p><p>我相信，这也是很多朋友急于上杠杆，基于急于卖房满仓的原因。</p><p>从常理分析，90%多的胜率已经很大，为什么不能孤注一掷？</p><p>还是概率。</p><p>如前所述，即使一件事有0.001%的可能性发生，那么它就真的有可能发生。我们有没有可能输？会怎么样输掉？</p><p>当然有可能。记得我从三年前开始就说的一句话吗——如果所有人都要死，我们一定是最后一批倒下的。</p><p>没错，我们一定是最后一批倒下的，但，悲哀的是，依然会倒下。我们可以跑赢99%的人，但还是有可能会倒下。</p><p>那么，我们会因为什么倒下？</p><p>当然有很多种可能。比如说，小行星撞地球了、某种神秘病毒干掉了50%的人类、股市关门了、经济出现系统性问题、价值中枢不断下降三十年不涨……没可能吗，当然都有可能。虽然上面这些事情发生的概率不一样，但依然是有发生概率的。</p><p>不说其他的，就说“价值中枢不断下降，A股三十年不涨”这一点，恐怕就会要了你的亲命。没错，我可以帮你把成本控制到极低。未来哪怕真的可能三十年不涨，我也会有办法通过做波段把成本降的越来越低。但是——成本再低有什么用？牛市不来，市场不涨，你不会赔钱，但依然根本无法赚到大钱，改变人生，是不是？</p><p>我的意思，当然不是在钻石坑里吓唬你。我的意思，是资本市场的未来是模糊的。任何事情都有可能发生。我的仓位配置，是足以应对绝大多数情况的，相信也是适合大多数人的。</p><p>网上看看，你会发现这一路走来，人性暴露的多么明显。有人乐观之极，早早满仓，已经被黄土埋了一半。有人越跌越害怕，在最低点开始对未来极度绝望，慌不择路的卖成空仓等待崩盘。这就是不同的人对模糊的未来有不同的预期。</p><p>你我当然是这个随波逐流的浮华世界中难得兼具理性和能力的少数人。我们在牛市顶峰激流勇退告老还乡，在熊市过程中步步为营攻城略地，在钻石坑毫不畏惧大举反攻……然而，通过计算概率得到的胜利，并不能改变的事实是，我们依然无法完全清晰准确的知道未来会发生什么。我们只是知道，这个地方，获胜的概率很大，所以下了重注。</p><p>上杠杆，我不是说不行。卖房买股，也不是不行。缩减一切消费，节省每一分钱都来买股票，也可以。</p><p>但我希望你知道，以及记住，以及做好准备的是——</p><p>未来，是模糊的，不可预测的。你在做的，是大概率会胜利的事情。但是，并不是一定会胜利的。当未来发生的事实与你极度乐观的预期不匹配时，希望你的情绪不要崩盘。</p><p>正如开场那首词里说的：一蓑烟雨任平生，归去，也无风雨也无晴。</p><p>咱们做投资，无论胜败，无论涨跌，内心都应该是平静如水，笑看风云。急、贪、惧都是失败的根源。这些，也还请各位好好再想想。</p><p>最后，我给点自己的经验与建议：</p><p>人这一生，充满未知。你根本不可能知道明天会遇到什么事。所谓“今朝有酒今朝醉”的人生态度当然为我所不耻，然而节制一切人生之乐只为明天的财富积累我也并不赞成。</p><p>每一天都应该是快乐的。不要因为钱变得不快乐。如果你觉得把所有钱攒下来去投资很快乐，那当然没问题。但如果你攒钱攒的很辛苦，又或者让身边的人很辛苦，那就没有必要。还是像我以前说的，拿出一部分收入来享受人生吧。因为未来是模糊的，快快乐乐心态平和才能熬过最难的时光，才有可能迎来最终的胜利，对吗？</p><p>最后，再给一个终极贴士：</p><p>本钱不够，即使赚十倍也不够？</p><p>很简单，只看你愿不愿意去做——再努力一些，发挥你自己的优势，去赚钱：去兼职，去接私活，去做第二职业，去努力学习开创事业上升空间，升职加薪。</p><p>对于本金少的朋友，想办法多赚点钱，把那些钱继续投资，是真正事半功倍的王道。</p><p>写了很多，不知各位是否真正理解了我的意思。</p><p>不再多说，祝各位周末快乐！</p>]]></content>
      
      
      <categories>
          
          <category> ETF拯救世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu mysql datadir 目录修改</title>
      <link href="/2020/03/15/Ubuntu-mysql-datadir-%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9/"/>
      <url>/2020/03/15/Ubuntu-mysql-datadir-%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要记录一下，经过实操的mysql数据目录修改方案；<br>Server version: 5.7.28-0ubuntu0.18.04.4 (Ubuntu)</p></blockquote><a id="more"></a><ol><li>创建MySQL另外存储的目录</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /database/mysql</span><br></pre></td></tr></table></figure></div><ol start="2"><li>将以前的数据库复制到新的存储目录</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -av /var/lib/mysql/* /database/mysql</span><br><span class="line">chown -R mysql:mysql /database/mysql</span><br><span class="line">chmod -R 777 /database/mysql</span><br></pre></td></tr></table></figure></div><ol start="3"><li>删除日志 （不删除会报错）</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /database/mysql/ib_logfile0</span><br><span class="line">rm -rf /database/mysql/ib_logfile1</span><br></pre></td></tr></table></figure></div><ol start="4"><li>修改mysql配置文件</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">修改 datadir=/var/lib/mysql 为你需要修改的目录 这里是 datadir=/database/mysql</span><br></pre></td></tr></table></figure></div><ol start="5"><li>修改apparmor的配置文件use.sbin.mysqld </li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apparmor.d/usr.sbin.mysqld</span><br><span class="line"></span><br><span class="line">将</span><br><span class="line">  /var/lib/mysql/ r,</span><br><span class="line">  /var/lib/mysql/** rwk,</span><br><span class="line"></span><br><span class="line">修改为</span><br><span class="line">  /database/mysql/ r,</span><br><span class="line">  /database/mysql/** rwk,</span><br></pre></td></tr></table></figure></div><ol start="6"><li>apparmor 重部署</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service apparmor reload </span><br><span class="line">service apparmor restart</span><br></pre></td></tr></table></figure></div><ol start="7"><li>重启mysql</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></div><ol start="8"><li>登录MySql并验证数据目录</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span>show variables like '%dir%';</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何阅读一本书</title>
      <link href="/2020/03/09/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2020/03/09/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="如何阅读一本书"><a href="#如何阅读一本书" class="headerlink" title="如何阅读一本书"></a>如何阅读一本书</h1><blockquote><p>原文来自孟岩的公众号文章 - <a href="https://mp.weixin.qq.com/s?__biz=MzIzNTQ4ODg4OA==&amp;mid=2247485173&amp;idx=1&amp;sn=d4a00cf5520d049a263c551df5d47673&amp;chksm=e8e715e2df909cf4c535bc61f307af87df197f1fb554ed53c1da8f89d6bd15f1ed314c24e758&amp;mpshare=1&amp;scene=24&amp;srcid=&amp;sharer_sharetime=1583743158899&amp;sharer_shareid=7f88951f2298e00bd399759b890669f4&amp;key=914a1ead42d26eb7afe124240cb6481994743f8355e5487ceed59b532c9434fed9ec585f5aa62f964a63ab335a99d2b42d7c1c39ed9ecf02c678758e26feb973449a9dcdf73c7b7b962022b3bc3f586b&amp;ascene=14&amp;uin=MTc1MDE0MjU0MA%3D%3D&amp;devicetype=Windows+10&amp;version=62080079&amp;lang=zh_CN&amp;exportkey=AUVMQNVZIdZ0SL%2BlNr%2FFOGc%3D&amp;pass_ticket=3zH12%2FNVs%2BbKmbMINFA5Dz5LABbr0M08519eVEqcd%2BRCA0V0rILv9QJYJH8EmbWL" target="_blank" rel="noopener">如何阅读一本书</a></p></blockquote><a id="more"></a><h2 id="读书的目的是什么？"><a href="#读书的目的是什么？" class="headerlink" title="读书的目的是什么？"></a>读书的目的是什么？</h2><blockquote><p>消遣、获得资讯、增进理解力</p></blockquote><p>艾德勒认为当我们阅读过一本好书之后，我们对那本书论述主题的观点会多少有点儿变化，而我们对一般事物的看法也会多少有些调整。这说明<strong>这本书已经变成了我们自身的一部分</strong>。</p><p>这个角度仔细想想也是满恐怖的，我们读的每一本书，都在日积月累、不知不觉的塑造着我们自己。</p><p>艾德勒提出有四种阅读方式：基础阅读、检视阅读、分析阅读以及主题阅读，这四个层次的要求依次提升。</p><p>艾德勒告诉我们，<strong>这个世界上 95% 的书连“略读”（检视阅读的一部分）都不值得，但有很少的一些书值得我们用“分析阅读”和“主题阅读”的方式仔细阅读，甚至一读再读，让我们和这本书一起成长</strong>。</p><hr><h2 id="作者和读者的关系是什么？"><a href="#作者和读者的关系是什么？" class="headerlink" title="作者和读者的关系是什么？"></a>作者和读者的关系是什么？</h2><p>作者很像一位投手，好的作者知道如何“控球”，他们知道如何与“接球手”沟通，可以精确的把球送到“接球手”手中。而一个毫无“控球”能力的“暴投”作家，他投出的球很难被读者“接住”。</p><p>对于作者和读者而言，成功的沟通，都发生在作者想要传递给读者的信息，刚好都被读者掌握住了。</p><p>如果是一个完美的作者和一个完美的读者，作者拟定的骨架（纲要）和读者发现的骨架（纲要）应该是完全相同的。</p><hr><h2 id="怎样快速阅读一本书？"><a href="#怎样快速阅读一本书？" class="headerlink" title="怎样快速阅读一本书？"></a>怎样快速阅读一本书？</h2><p>按照艾德勒所说，80% 的“理解力”来源于 20% （甚至更少）的书。因此，<strong>大多数书应该先做略读，之后再决定是否值得用“分析阅读”的方式仔细研读</strong>。</p><p>怎样略读呢？</p><ol><li><p>先看书名页，如果有序的话就快速的看一下，注意作者的视角和目的。</p></li><li><p>研究目录页，对这本书的基本框架做概括性的理解。这就好比出发旅行之前先看一下地图一样。遗憾的是，大多数人读书根本不看目录（包括我），事实上很多作者在编排目录上是花费巨大精力的。</p></li><li><p>查看索引和新书腰封，读一下出版者的介绍。</p></li><li><p>从目录中挑一些你熟悉或者感兴趣的章节来看。</p></li><li><p>把书打开来，东翻翻西翻翻，找几段甚至几页来读读。</p></li><li><p>读全书的最后两三页。艾德勒认为很少有作者能够抵抗在结尾将自己观点重新整理一遍的诱惑，因此读一下最后两三页是很重要的。</p></li></ol><p>这样 6 个步骤就完成了对一本书的略读，这是一种非常“主动”的阅读，大概一个小时就能完成。</p><p>略读完成后，你已经得到了一本书的“骨架”，并且可以决定是否值得用“分析阅读”的方式继续精读。</p><hr><h2 id="如何仔细阅读一本书？"><a href="#如何仔细阅读一本书？" class="headerlink" title="如何仔细阅读一本书？"></a>如何仔细阅读一本书？</h2><p>艾德勒认为关于一本书，我们应该提出四个主要的问题：</p><ol><li><p>整体来说，这本书在谈什么？</p></li><li><p>作者细部说了什么，怎么说的？</p></li><li><p>这本书说得有道理吗？是全部有道理，还是部分有道理？</p></li><li><p>这本书跟我们有什么关系？</p></li></ol><p>特别是第四个问题，作为合格的读者，<strong>我们一定要超越“知道这是怎么回事儿”，而要进一步明白“如果我们想做些什么，应该如何利用这些知识”。这才算增加了“理解力”</strong>。</p><p>为了回答这四个问题，我们需要采用“分析阅读”的方式。</p><p>在阅读的过程中，应该特别重视作者提出的“<strong>论点</strong>”和“<strong>假设</strong>”。这部分内容通常会比较枯燥，但实际最为重要。这是作者要重点表达的东西，也是一本书真正要传递的知识。为了证明论点而具体展开的案例部分，则可以快速阅读。如果你对这个论点没有异议的话，甚至可以跳过不读。</p><p>艾德勒认为<strong>一个好的读者应该有能力控制阅读的速度</strong>。阅读并不是越快越好，而是能做到“该快则快”、“该慢则慢”。戴雨森写过一篇有关高效阅读技巧的文章（见阅读原文），文中他也说过类似的话：“<strong>读书和投资、做企业一样，平均分配精力是愚蠢的</strong>。读书人的精力应该重点放在书中提出的论点，以及论述逻辑上面。”</p><p>另一件重要的事情是读书笔记。阅读是一项主动的行为，如果不把思考写下来，通常我们并不知道自己在想什么。这个写下来的过程，也是帮助我们回答那四个问题的过程。</p><p>读书笔记分为三个层次：</p><p>1）在重点以及有力量的句子下划线；</p><p>2）把自己提出的问题，或者与自己的经历和见解共鸣或相悖的内容记录在书页的空白处；</p><p>3）将全书的整体架构写下来，列出基本的大纲与前后篇章，以及最重要的核心论点。</p><p>当我们努力的完成这些，回答了前面的 4 个问题，才算是和作者通过文字完成了心灵上的交流。</p><hr><h2 id="读的多还是读的精重要？"><a href="#读的多还是读的精重要？" class="headerlink" title="读的多还是读的精重要？"></a>读的多还是读的精重要？</h2><p>杨绛先生说：“<strong>中国人的问题在于想的太多，而书读的太少</strong>”，而英国哲学家霍布斯则说：“<strong>如果我像一般人一样读那么多书，我就跟他们一样愚蠢了</strong>”。</p><p>这两句话都没有错。</p><p>我从艾德勒这里得到的答案是：</p><ol><li><p><strong>读书的质量很重要</strong>。同一本书，躺在床上任由文字从眼前划过，和上面介绍的主动阅读的效果是完全不一样的。如果我们足够努力，读的足够精，我们可以尽可能的达到作者的程度；</p></li><li><p><strong>好书值得反复读</strong>。我相信你也有同样的感觉，很多好书在重读的时候会有不同的感悟。这是因为在初读的时候，这本书的层次远超过我们，随着阅历的增加，重读的时候我们才能明白一些以前没有读懂的东西；</p></li><li><p><strong>通过略读和粗读扩大阅读量</strong>，但也应该要抓住书的框架和作者想表达的核心观点。</p></li></ol><hr><h2 id="这本书跟我们有什么关系？"><a href="#这本书跟我们有什么关系？" class="headerlink" title="这本书跟我们有什么关系？"></a>这本书跟我们有什么关系？</h2><p>读完这本书，我想回答一下艾德勒提出的最后一个问题：这本书跟我们有什么关系？</p><p>虽然书名是《如何阅读一本书》，但艾德勒告诉我们的，不止读书。</p><p>这是一个信息爆炸的时代，我们生怕被时代拉下而拼命增加信息的获取量。你订阅了多少公众号？买了多少知识付费的课程？参加了多少各种各样的培训？</p><p>如果我们的目的是通过获取“知识”来提升我们的系统的话，“质量比数量”、“精比多”，要更加重要。</p><p><strong>“筛选”真正好的信息（无论是公众号、课程还是书），主动的“精”读它，提问题、找框架、反复读、做笔记，努力理解作者想传递的信息，达到与作者匹配的程度，才能真正的增加“理解力”</strong>。</p><p>少即是多，少才是多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vscode远程免密配置</title>
      <link href="/2020/01/31/vscode%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/31/vscode%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d4e1d366fb9a06ae17d66a8" target="_blank" rel="noopener">原文链接</a></p><a id="more"></a><h3 id="vscode远程开发插件"><a href="#vscode远程开发插件" class="headerlink" title="vscode远程开发插件"></a>vscode远程开发插件</h3><p>Remote Development</p><h3 id="配置远程免密"><a href="#配置远程免密" class="headerlink" title="配置远程免密"></a>配置远程免密</h3><ol><li><p>在本地机器生成秘钥对</p><p>windows上利用gitbash(git的命令行)，输入以下命令生成秘钥:</p><p><code>ssh-keygen -t rsa -C &quot;这里任意输入&quot;</code></p></li><li><p>在远程服务器上生成秘钥</p><p>命令与在Windows上相同：</p><p><code>ssh-keygen -t rsa -C &quot;这里任意输入&quot;</code></p></li><li><p>拷贝公钥到远程服务器上</p><p>将本地ssh的公钥(id_rsa.pub)拷贝到远程服务器的root目录下<br>然后在shell中输入如下命令：<br><code>cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>  </p></li><li><p>Remote Development 插件的配置</p><p>点击VSCode侧边栏的小屏幕标志再点击齿轮配置你的远程信息    </p><p>Host 显示在连接选项中的名字, HostName 你的ssh服务器的地址 User 你登录ssh时的用户名    </p><p>配置完之后保存就可以看到侧边栏中更新了可以连接的服务器,接下来就可以像在本地开发一样进行远程开发了  </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google工作整理术-第三部分</title>
      <link href="/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/"/>
      <url>/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="克服大大小小的挑战"><a href="#克服大大小小的挑战" class="headerlink" title="克服大大小小的挑战"></a>克服大大小小的挑战</h1><a id="more"></a><h2 id="第十二章-避免大脑压力，集中精力工作"><a href="#第十二章-避免大脑压力，集中精力工作" class="headerlink" title="第十二章 避免大脑压力，集中精力工作"></a>第十二章 避免大脑压力，集中精力工作</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-02.png" alt="你一定要知道的"></p><hr><h2 id="第十三章-在海滩上收邮件：怎样把工作和生活完美融合"><a href="#第十三章-在海滩上收邮件：怎样把工作和生活完美融合" class="headerlink" title="第十三章 在海滩上收邮件：怎样把工作和生活完美融合"></a>第十三章 在海滩上收邮件：怎样把工作和生活完美融合</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-03.png" alt="你一定要知道的"></p><hr><h2 id="第十四章-如何处理意外事件"><a href="#第十四章-如何处理意外事件" class="headerlink" title="第十四章 如何处理意外事件"></a>第十四章 如何处理意外事件</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-04.png" alt="你一定要知道的"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Google工作整理术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google工作整理术-第二部分</title>
      <link href="/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/"/>
      <url>/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="全球的Google工作生活方式，和无序说再见吧"><a href="#全球的Google工作生活方式，和无序说再见吧" class="headerlink" title="全球的Google工作生活方式，和无序说再见吧"></a>全球的Google工作生活方式，和无序说再见吧</h1><a id="more"></a><h2 id="第五章-超越泰勒主义–为什么说搜素很重要"><a href="#第五章-超越泰勒主义–为什么说搜素很重要" class="headerlink" title="第五章 超越泰勒主义–为什么说搜素很重要"></a>第五章 超越泰勒主义–为什么说搜素很重要</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-29-04.png" alt="你一定要知道的"></p><hr><h2 id="第六章-是法国的巴黎，还是拉斯维加斯的巴黎？-如何玩转搜素"><a href="#第六章-是法国的巴黎，还是拉斯维加斯的巴黎？-如何玩转搜素" class="headerlink" title="第六章 是法国的巴黎，还是拉斯维加斯的巴黎？-如何玩转搜素"></a>第六章 是法国的巴黎，还是拉斯维加斯的巴黎？-如何玩转搜素</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-29-05.png" alt="你一定要知道的"></p><hr><h2 id="第七章-彩色笔与过滤器：我们为什么一定要养成信息过滤的好习惯"><a href="#第七章-彩色笔与过滤器：我们为什么一定要养成信息过滤的好习惯" class="headerlink" title="第七章 彩色笔与过滤器：我们为什么一定要养成信息过滤的好习惯"></a>第七章 彩色笔与过滤器：我们为什么一定要养成信息过滤的好习惯</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-05.png" alt="你一定要知道的"></p><hr><h2 id="第八章-纸质文档与电子文档，哪个好"><a href="#第八章-纸质文档与电子文档，哪个好" class="headerlink" title="第八章 纸质文档与电子文档，哪个好"></a>第八章 纸质文档与电子文档，哪个好</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-29-08.png" alt="你一定要知道的"><br><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-29-09.png" alt="合适使用纸质工具"><br><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-29-10.png" alt="什么时候选用数字工具"></p><hr><h2 id="第九章-活用电子邮箱：把它变成可搜素的历史档案库"><a href="#第九章-活用电子邮箱：把它变成可搜素的历史档案库" class="headerlink" title="第九章 活用电子邮箱：把它变成可搜素的历史档案库"></a>第九章 活用电子邮箱：把它变成可搜素的历史档案库</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-30-01.png" alt="你一定要知道的"></p><hr><h2 id="第十章-为什么应该在网上保存日程表"><a href="#第十章-为什么应该在网上保存日程表" class="headerlink" title="第十章 为什么应该在网上保存日程表"></a>第十章 为什么应该在网上保存日程表</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-30-02.png" alt="你一定要知道的"></p><hr><h2 id="第十一章-如何轻松管理文档及网上内容"><a href="#第十一章-如何轻松管理文档及网上内容" class="headerlink" title="第十一章 如何轻松管理文档及网上内容"></a>第十一章 如何轻松管理文档及网上内容</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-30-03.png" alt="你一定要知道的"></p>]]></content>
      
      
      <categories>
          
          <category> Google工作整理术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google工作整理术-第一部分</title>
      <link href="/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/"/>
      <url>/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="全面认识自己"><a href="#全面认识自己" class="headerlink" title="全面认识自己"></a>全面认识自己</h1><a id="more"></a><hr><h2 id="第一章-鸡尾酒会与麦片：探索我们的大脑"><a href="#第一章-鸡尾酒会与麦片：探索我们的大脑" class="headerlink" title="第一章 鸡尾酒会与麦片：探索我们的大脑"></a>第一章 鸡尾酒会与麦片：探索我们的大脑</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-15-01.png" alt="你一定要知道的"></p><hr><h2 id="第二章-我是上班一族：让朝九晚五的工作和生活不再混乱"><a href="#第二章-我是上班一族：让朝九晚五的工作和生活不再混乱" class="headerlink" title="第二章 我是上班一族：让朝九晚五的工作和生活不再混乱"></a>第二章 我是上班一族：让朝九晚五的工作和生活不再混乱</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-06.png" alt="你一定要知道的"></p><hr><h2 id="第三章-赛车、篮球、短裤及歌剧：认识自己的短处，突破制约"><a href="#第三章-赛车、篮球、短裤及歌剧：认识自己的短处，突破制约" class="headerlink" title="第三章 赛车、篮球、短裤及歌剧：认识自己的短处，突破制约"></a>第三章 赛车、篮球、短裤及歌剧：认识自己的短处，突破制约</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-07.png" alt="你一定要知道的"></p><hr><h2 id="第四章-登山还是在家健身：目标清晰，才能竟然有序"><a href="#第四章-登山还是在家健身：目标清晰，才能竟然有序" class="headerlink" title="第四章 登山还是在家健身：目标清晰，才能竟然有序"></a>第四章 登山还是在家健身：目标清晰，才能竟然有序</h2><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-08.png" alt="你一定要知道的"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Google工作整理术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google工作整理术-框架</title>
      <link href="/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/01/29/Google%E5%B7%A5%E4%BD%9C%E6%95%B4%E7%90%86%E6%9C%AF-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="本书的框架"><a href="#本书的框架" class="headerlink" title="本书的框架"></a>本书的框架</h1><a id="more"></a><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><blockquote><p>讨论的对象是你</p></blockquote><ul><li>你如何思考，你如何感觉</li><li>你所处的社会是什么样子</li><li>社会如何对你施加影响</li><li>你所受的制约是什么</li><li>你应该怎样超越这些制约</li><li>你的真正目标是什么</li><li>为实现这些目标你该如何进行组织</li></ul><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><blockquote><p>作者分享有关有序组织的技巧、技术和策略</p></blockquote><ul><li>如何搜索内容</li><li>如何组织信息</li><li>如何掌握所有的电子邮件、代办事项、相关文档、工作日历</li><li>作者分享一些工具和技术</li></ul><h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><blockquote><p>针对我们身处的21世纪面临的大大小小的挑战，将会讨论如何进行有序组织</p></blockquote><ul><li>如何把分散精力的情况减少到最少</li><li>为什么没有工作生活两不误之类的好事</li><li>处理那些意料之外的事情，如何帮助你有条不紊地准备好体能和脑力</li></ul><hr><p><img src="http://oss.jingwl.top/graph-bed/2020/2020-01-31-01.png" alt="有关有序组织的原理"></p>]]></content>
      
      
      <categories>
          
          <category> Google工作整理术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手动升级nextcloud</title>
      <link href="/2019/12/21/%E6%89%8B%E5%8A%A8%E5%8D%87%E7%BA%A7nextcloud/"/>
      <url>/2019/12/21/%E6%89%8B%E5%8A%A8%E5%8D%87%E7%BA%A7nextcloud/</url>
      
        <content type="html"><![CDATA[<ol><li><p>备份现有的Nextcloud Server数据库，数据目录和 config.php文件。</p><p>备份数据库<br>mysqldump -hlocalhost -uroot -proot nextcloud | gzip &gt; nextcloud.sql.gz</p></li></ol><a id="more"></a><ol start="2"><li><p>从nextcloud.com/install/下载最新的Nextcloud Server版本（存档文件）并将其解压缩 到当前安装之外的空目录中。</p><p>wget –no-check-certificate <a href="https://download.nextcloud.com/server/releases/nextcloud-17.0.0.zip" target="_blank" rel="noopener">https://download.nextcloud.com/server/releases/nextcloud-17.0.0.zip</a></p></li><li><p>停止Web服务器。</p><p>sudo systemctl stop apache2</p></li><li><p>重命名当前的Nextcloud目录nextcloud-old。</p><p>rm -r nextcloud-old<br>mv nextcloud nextcloud-old</p></li><li><p>解压缩新存档会创建一个nextcloud填充了新服务器文件的新目录。例如/var/www/html，将此目录及其内容复制到旧服务器的原始位置，以便再次使用/var/www/html/nextcloud。</p><p>unzip nextcloud-17.0.x.zip</p></li><li><p>将config.php文件从旧的Nextcloud目录复制到新的Nextcloud目录。</p><p>cp nextcloud-old/config/config.php nextcloud/config/</p></li><li><p>如果将data/目录保存在目录中，请将nextcloud/其从旧版本的Nextcloud复制到新目录中nextcloud/。<br>如果您将其保留在其外，nextcloud/则无需对其执行任何操作，因为其位置是使用原始配置进行的config.php，并且没有任何升级步骤会触及它。</p></li><li><p>如果您使用的是第三方应用程序，请查看新nextcloud/apps/ 目录以查看它们是否存在。<br>如果没有，请将它们从旧apps/ 目录复制到新目录。确保第三方应用程序目录的目录权限与其他目录权限相同。</p><p>cp nextcloud-old/apps/calendar/ -r nextcloud/apps/<br>cp nextcloud-old/apps/twofactor_totp/ -r nextcloud/apps/<br>cp nextcloud-old/apps/news/ -r nextcloud/apps/<br>cp nextcloud-old/apps/files_markdown/ -r nextcloud/apps/</p></li><li><p>调整文件所有权和权限：</p><p>chown -R www-data:www-data nextcloud<br>find nextcloud/ -type d -exec chmod 750 {} \;<br>find nextcloud/ -type f -exec chmod 640 {} \;</p></li><li><p>重新启动Web服务器。</p><p>sudo systemctl start apache2</p></li><li><p>现在使用命令行启动升级occ，就像Ubuntu Linux上的这个例子一样：</p><p>cd nextcloud<br>sudo -u www-data php occ upgrade</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> nextcloud </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>feilong源码学习-AggregateUtil</title>
      <link href="/2019/12/20/feilong%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-AggregateUtil/"/>
      <url>/2019/12/20/feilong%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-AggregateUtil/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录feilong源码-AggregateUtil统计类学习笔记<br>AggregateUtil 是一个专门用来统计数据的一个工具类，有点类似于SQL里面的统计函数</p><hr><a id="more"></a><h2 id="feilong源码工具类特点"><a href="#feilong源码工具类特点" class="headerlink" title="feilong源码工具类特点"></a>feilong源码工具类特点</h2><ul><li><p>工具类灵活运用泛型</p><p>初次查看feilong源码，让我眼前一亮的是源码中的工具类能够做到特别灵活的运用java中的泛型，这样工具类的方法在被调用的时候可拓展性就非常的强，此时我想起了我自己之前在项目中写过的那几个工具类，好像也就项目自己能用用吧，拓展性可谈不上。</p></li><li><p>先做校验</p><p>在规范的开发过程中我们写方法之前都要做边缘验证，feilong源码中很好的体现了这一点，在每个方法之前都先做了校验;</p></li></ul><hr><h2 id="AggregateUtil类中相关知识点"><a href="#AggregateUtil类中相关知识点" class="headerlink" title="AggregateUtil类中相关知识点"></a>AggregateUtil类中相关知识点</h2><h3 id="Java参数类型后面三个点-String…-和数组-String-的区别"><a href="#Java参数类型后面三个点-String…-和数组-String-的区别" class="headerlink" title="Java参数类型后面三个点(String…)和数组(String[])的区别"></a>Java参数类型后面三个点(String…)和数组(String[])的区别</h3><p>java类型后面三个点(String…)，是从Java 5开始，是Java语言对方法参数支持一种新写法，叫可变长度参数列表，其语法就是类型后跟…，表示此处接受的参数为0到多个Object类型的对象，或者是一个Object[]。 </p><p>例如我们有一个方法叫做test(String…strings)，那么你还可以写方法test()，但你不能写test(String[] strings)，这样会出编译错误，系统提示出现重复的方法。</p><p>在使用的时候，对于test(String…strings)，你可以直接用test()去调用，标示没有参数，也可以用去test(“aaa”)，也可以用test(new String[]{“aaa”,”bbb”})。</p><p>另外如果既有test(String…strings)函数，又有test()函数，我们在调用test()时，会优先使用test()函数。只有当没有test()函数式，我们调用test()，程序才会走test(String…strings)。</p><hr><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 调用PropertyUtil类中的泛型方法getProperty(obj, propertyName)，指定方法返回类型为Number类型  </span><br><span class="line">PropertyUtil.&lt;Number&gt; getProperty(obj, propertyName)</span><br></pre></td></tr></table></figure></div><hr><h3 id="LRU算法原理与实践"><a href="#LRU算法原理与实践" class="headerlink" title="LRU算法原理与实践"></a>LRU算法原理与实践</h3><p><a href="https://www.jianshu.com/p/720dda0c418f" target="_blank" rel="noopener">原文链接</a></p><h4 id="LRU算法简介"><a href="#LRU算法简介" class="headerlink" title="LRU算法简介"></a>LRU算法简介</h4><p>在操作系统中进行内存管理时会采用一些页面置换算法，如LRU、LFU和FIFO等。其中LRU应用较为广泛。LRU的全称是Least Recently Used，即最近最少使用算法。</p><p>大家都知道在缓存的大小是有限的，那么我们应该基于什么策略进行缓存数据呢？LRU提供的思路是将最近没有使用的数据从缓存中移除，这样的思路在实际的环境中比较符合常识。</p><h4 id="LRU算法原理"><a href="#LRU算法原理" class="headerlink" title="LRU算法原理"></a>LRU算法原理</h4><p>LRU算法的原理比较简单，数据存储的数据结构为链表。当访问数据时，如缓存中有数据，则将该数据移动至链表的顶端；没有该数据则在顶端加入该数据，并移除链表中的底端的数据。</p><p>LRU涉及一个概念叫做缺页中断，缺页中断的次数即一次访问过程时没有没有在缓存中找到数据。</p><p>假如页面大小为3，序列为4、3、2、3、5，下面的缺页次数为4次</p><table><thead><tr><th>4</th><th>3</th><th>2</th><th>3</th><th>5</th></tr></thead><tbody><tr><td>4</td><td>3</td><td>2</td><td>3</td><td>5</td></tr><tr><td>null</td><td>4</td><td>3</td><td>2</td><td>3</td></tr><tr><td>null</td><td>null</td><td>4</td><td>4</td><td>2</td></tr><tr><td>缺页</td><td>缺页</td><td>缺页</td><td>不缺</td><td>缺页</td></tr></tbody></table><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>LRU算法原理较为简单，但是实现较为复杂，尤其是处理页面替换时，在Java中的LinkedHashMap的访问有序性恰好满足LRU的需求。下面通过LeetCode第146题描述下算法的实现过程</p><p>样例：</p><p>实现如下操作，且时间复杂度为O(1)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* capacity */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // returns 1</span><br><span class="line">cache.put(3, 3);    // evicts key 2</span><br><span class="line">cache.get(2);       // returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    // evicts key 1</span><br><span class="line">cache.get(1);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3</span><br><span class="line">cache.get(4);       // returns 4</span><br></pre></td></tr></table></figure></div><p>代码实现：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class LRUCache &#123;</span><br><span class="line">    private LinkedHashMap&lt;Integer, Integer&gt; map;</span><br><span class="line">    private final int CAPACITY;</span><br><span class="line">    public LRUCache(int capacity) &#123;</span><br><span class="line">        CAPACITY = capacity;</span><br><span class="line">        map = new LinkedHashMap&lt;Integer, Integer&gt;(capacity, 0.75f, true)&#123;</span><br><span class="line">            protected boolean removeEldestEntry(Map.Entry eldest) &#123;</span><br><span class="line">                return size() &gt; CAPACITY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    public int get(int key) &#123;</span><br><span class="line">        return map.getOrDefault(key, -1);</span><br><span class="line">    &#125;</span><br><span class="line">    public void put(int key, int value) &#123;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="Map相关知识"><a href="#Map相关知识" class="headerlink" title="Map相关知识"></a>Map相关知识</h2><p>在feilong-AggregateUtil类中，有好几处都巧用map，特此学习了一些map相关知识点记录于此。</p><h3 id="HashMap-LinkedHashMap-TreeMap什么时候用"><a href="#HashMap-LinkedHashMap-TreeMap什么时候用" class="headerlink" title="HashMap/LinkedHashMap/TreeMap什么时候用"></a>HashMap/LinkedHashMap/TreeMap什么时候用</h3><ul><li>HashMap 是线程不安全的哈希表，如果需要同步用Collections.synchronizedMap(map); 键不能重复，值可以，可以存储null键值，取数据无顺序之分</li><li>LinkedHashMap：是一个维持双向链表，是一个有序的Map，怎么put的进去的输出时怎么取出，FIFO的顺序</li><li>TreeMap： 在需要排序的时候使用，在一个map放入很多数据，需要按照什么规则排序显示的时候。</li></ul><h3 id="HashMap、HashTable的key和value是否可为null"><a href="#HashMap、HashTable的key和value是否可为null" class="headerlink" title="HashMap、HashTable的key和value是否可为null"></a>HashMap、HashTable的key和value是否可为null</h3><ul><li>HashMap对象的key、value值均可为null。  </li><li>HahTable对象的key、value值均不可为null。</li><li>且两者的的key值均不能重复，若添加key相同的键值对，后面的value会自动覆盖前面的value，但不会报错。</li></ul><p>参考链接：<br><a href="https://blog.csdn.net/justloveyou_/article/details/62893086" target="_blank" rel="noopener">Map 综述（一）：彻头彻尾理解 HashMap</a><br><a href="https://blog.csdn.net/justloveyou_/article/details/71713781" target="_blank" rel="noopener">Map 综述（二）：彻头彻尾理解 LinkedHashMap</a></p>]]></content>
      
      
      <categories>
          
          <category> feilong </category>
          
      </categories>
      
      
        <tags>
            
            <tag> feilong </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2019/12/20/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/12/20/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">参考链接</a></p><a id="more"></a><h2 id="Ubuntu18-04搭建Hexo博客"><a href="#Ubuntu18-04搭建Hexo博客" class="headerlink" title="Ubuntu18.04搭建Hexo博客"></a>Ubuntu18.04搭建Hexo博客</h2><ul><li><p>安装nodejs<br>sudo apt-get install nodejs</p></li><li><p>安装git<br>sudo apt-get install git</p></li><li><p>安装npm：<br>apt install npm</p></li><li><p>使用npm安装hexo<br>npm install -g hexo-cli</p></li><li><p>创建hexo文件夹<br>mkdir hexo<br>cd hexo</p></li><li><p>创建博客文件夹（在hexo目录下执行命令）<br>hexo init myhome<br>cd myhome</p></li><li><p>安装依赖<br>npm install</p></li><li><p>安装搜索<br>npm install hexo-generator-search –save</p></li><li><p>启动hexo服务（在myhome目录下执行命令）：<br>hexo s</p></li></ul><p>此时可以通过<a href="http://ip:4000访问" target="_blank" rel="noopener">http://ip:4000访问</a></p><p>发布新的文章：<br>hexo n “博客名字”</p><h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><ul><li><p>Git配置（在myhome目录下执行命令）：<br>cd myhome<br>git config –global user.name “username”   // username为你自己的github用户名<br>git config –global user.email “email”</p></li><li><p>生成秘钥：<br>ssh-keygen -t rsa -C “email”<br>连续3个回车。如果不需要密码的话。<br>如果不是第一次，就选择overwrite.</p></li><li><p>添加密钥到ssh-agent<br>eval “$(ssh-agent -s)”</p></li><li><p>添加生成的 SSH key 到 ssh-agent。<br>ssh-add ~/.ssh/id_rsa</p></li><li><p>登陆Github, 添加 ssh :<br>cat ~/.ssh/id_rsa.pub<br>把id_rsa.pub文件里的内容复制到github仓库里面的ssh配置里面，勾选可以读取。</p></li><li><p>测试：<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>选择yes<br>Hi humingx! You’ve successfully authenticated, but GitHub does not provide shell access.<br>如果看到Hi后面是你的用户名，就说明成功了。</p></li><li><p>配置文件配置</p></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_config.yml里最后一段的配置：</span><br><span class="line">#Deployment 这里设置了Git获</span><br><span class="line">#这里一定要注意不要写错了，否则部署到Github上会出问题</span><br><span class="line">#Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: &apos;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH/mm/ss&quot;)&#125;&#125;&apos;</span><br></pre></td></tr></table></figure></div><ul><li><p>安装git依赖：<br>command npm install hexo-deployer-git –save</p></li><li><p>编译<br>hexo g</p></li><li><p>部署 在myhome目录下 执行以下命令将自动更新到Github<br>hexo d</p></li><li><p>最后：<br>username.github.io<br>就可以访问博客了~</p></li><li><p>将自己的域名绑定到username.github.io域名上面：</p></li></ul><ol><li>解析自己的域名，记录类型为CNAME，记录值为username.github.io,主机记录为blog；</li><li>登录GitHub，进入仓库，点击settings，设置Custom domain，输入域名：blog.myhome.top</li><li>进入myhome/source目录下，vim CNAME    ,输入域名： blog.myhome.top  , 保存</li><li>进入myhome目录，依次输入命令：hexo clean 、   hexo g   、  hexo d</li><li>输入自己的域名blog.myhome.top,可以访问！</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>在myhome目录中的themes文件夹中查看自己的主题是什么  </p><p>下载主题到themes文件夹中<br>在myhome目录下下载next主题示例<br>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p><p>接下来修改主题为next<br>打开站点的_config.yml配置文件，修改主题为next：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"># theme: landscape</span><br><span class="line"># theme: next</span><br></pre></td></tr></table></figure></div><p>打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure></div><p>next主题有四个样式，我用的是Pisces，选择你自己喜欢的样式，选择好后，再次部署网站，hexo clean 、 hexo g 、hexo d，查看效果。<br>选择其他主题，按照上述过程即可实现。</p><p>可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。<br>写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h2><p>在站点配置文件_config.yml修改基本的站点信息：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Jingwl&apos;s Blog</span><br><span class="line">subtitle: Hello,world</span><br><span class="line">description: Jingwl</span><br><span class="line">keywords:</span><br><span class="line">author: Jingwl</span><br><span class="line">avatar: # 网站头像外部链接</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure></div></p><p>依次是网站标题、副标题、网站描述、keywords、作者、网站头像外部链接、网站语言、时区等。</p><ul><li><p>在next主题的配置文件_config.yml中设置博文分享的插件jiathis，值设置为true。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Share</span><br><span class="line">  jiathis: true</span><br><span class="line"># This plugin is more useful in China, make sure you known how to use it.</span><br><span class="line"># And you can find the use guide at official webiste: http://www.jiathis.com/.</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">#jiathis:</span><br><span class="line">  ##uid: Get this uid from http://www.jiathis.com/</span><br><span class="line">#add_this_id:</span><br></pre></td></tr></table></figure></div></li><li><p>增加侧栏菜单条目：<br>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。<br>如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about || user</span><br><span class="line">  tags: /tags || tags</span><br><span class="line">  archives: /archives || archive</span><br><span class="line">  categories: /categories || th</span><br><span class="line">  #schedule: /schedule/</span><br><span class="line">  #love: /love/</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  categories: th</span><br></pre></td></tr></table></figure></div><h2 id="文章模板设置"><a href="#文章模板设置" class="headerlink" title="文章模板设置"></a>文章模板设置</h2><p>修改文件<br>hexo/jingwl/scaffolds/post.md</p><h2 id="hexo-修改默认端口"><a href="#hexo-修改默认端口" class="headerlink" title="hexo 修改默认端口"></a>hexo 修改默认端口</h2><p>默认使用4000端口，用hexo s -p 80 ，可以暂时修改启动端口。</p><p>但是每次启动都要写”-p 80”才行，过于繁琐。</p><p>永久修改方法：</p><p>找到node_modules\hexo-server\index.js文件，可以修改默认的port值！</p><h2 id="hexo-访问加速"><a href="#hexo-访问加速" class="headerlink" title="hexo 访问加速"></a>hexo 访问加速</h2><p><a href="https://sunhang.top/2019/11/30/github-coding/?t=1586611684865" target="_blank" rel="noopener">详情链接</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql 常用命令</title>
      <link href="/2019/12/20/sql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/12/20/sql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本文记录一些工作与日常中会用到的一些SQL命令，需要用到的时候方便查找</p><a id="more"></a><h2 id="mysql-字段相关命令"><a href="#mysql-字段相关命令" class="headerlink" title="mysql 字段相关命令"></a>mysql 字段相关命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- mysql表新增字段</span><br><span class="line">ALTER TABLE table_name ADD filed INT(11) DEFAULT &apos;0&apos; COMMENT &apos;&apos;;</span><br><span class="line">-- 在指定字段名后新增字段</span><br><span class="line">ALTER TABLE table_name ADD filed DECIMAL(16,2) DEFAULT &apos;0.00&apos; COMMENT &apos;&apos; AFTER filed;</span><br><span class="line">-- hive表新增字段</span><br><span class="line">alter table tmp.tmp_20xx add columns(usr_id int);</span><br><span class="line"></span><br><span class="line">-- 表删除字段</span><br><span class="line">alter table t2 drop column c;</span><br><span class="line"></span><br><span class="line">-- 表修改字段类型</span><br><span class="line">ALTER TABLE DIM_INTEGRAL_TYPE MODIFY PRODUCT_ID int(5);</span><br><span class="line">-- 表修改字段名称类型</span><br><span class="line">ALTER TABLE table_name CHANGE old_field new_field VARCHAR(16) DEFAULT &apos;0&apos; COMMENT &apos;&apos;;</span><br></pre></td></tr></table></figure></div><h2 id="mysql-用戶及权限相关"><a href="#mysql-用戶及权限相关" class="headerlink" title="mysql 用戶及权限相关"></a>mysql 用戶及权限相关</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 更新mysql用户的密码</span><br><span class="line">use mysql</span><br><span class="line">update user set authentication_string=password(&apos;password&apos;) where user=&apos;user_name&apos;;</span><br><span class="line"></span><br><span class="line">-- 创建用户 host为localhost时，表示可本地登录；使用通配符%时，表示可以从任意远程主机登陆。</span><br><span class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class="line"></span><br><span class="line">-- 限制用户权限</span><br><span class="line">--‘db_test’为指定的数据库，’user_test’是限制的用户，’localhost’表示只能本地访问，如果想让远程IP访问，可将’localhost’换成’%’</span><br><span class="line">GRANT SELECT, INSERT, UPDATE, REFERENCES, DELETE, CREATE, DROP, ALTER, INDEX, CREATE VIEW, SHOW VIEW ON `db_test`.* TO &apos;user_test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></div><h2 id="mysql-表及索引相关命令"><a href="#mysql-表及索引相关命令" class="headerlink" title="mysql 表及索引相关命令"></a>mysql 表及索引相关命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 修改表名</span><br><span class="line">ALTER  TABLE old_table RENAME TO new_table_name;</span><br><span class="line"></span><br><span class="line">-- 创建索引</span><br><span class="line">ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br><span class="line">ALTER TABLE table_name ADD UNIQUE (column_list);</span><br><span class="line">ALTER TABLE table_name ADD PRIMARY KEY (column_list);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">DROP INDEX index_name ON talbe_name;</span><br><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br><span class="line">ALTER TABLE table_name DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">-- 查找表的占用大小 数据大小 索引大小</span><br><span class="line">SELECT table_name as &apos;表名&apos; ,table_comment as &apos;表注释&apos;,table_rows as &apos;条数&apos;,data_length as &apos;数据大小&apos;,index_length as &apos;索引大小&apos;,(data_length + index_length) as &apos;总大小&apos;</span><br><span class="line">FROM information_schema.tables </span><br><span class="line">WHERE table_schema = &apos;fund&apos;</span><br><span class="line">-- ORDER BY data_length DESC</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">-- 查找库里所有表名表注释</span><br><span class="line">SELECT table_name 表名,TABLE_COMMENT 表注释 </span><br><span class="line">FROM INFORMATION_SCHEMA.TABLES </span><br><span class="line">WHERE table_schema=&apos;audit&apos; </span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">-- 修改表注释</span><br><span class="line">ALTER TABLE ODS_FP_FORECAST_AUTO_CALCULATION_INCOME_DATA COMMENT &apos;财务平台预测模块收入自动计算数据表&apos;;</span><br></pre></td></tr></table></figure></div><h2 id="mysql-dump相关命令"><a href="#mysql-dump相关命令" class="headerlink" title="mysql dump相关命令"></a>mysql dump相关命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 从服务器dump表</span><br><span class="line">mysqldump -uusername -ppasswd -h127.0.0.1 -P3306 db tablename &gt; /root/tablename.sql</span><br><span class="line">-- 从服务器dump表,只保留数据，不带表结构  加个 -t 就搞定了</span><br><span class="line">mysqldump -uusername -ppasswd -h127.0.0.1 -P3306 db tablename -t &gt; /root/tablename.sql</span><br><span class="line">-- 从服务器dump表 附带 where 条件</span><br><span class="line">mysqldump -uusername -ppasswd -h127.0.0.1 -P3306 db tablename --where &quot;id &gt; 302 AND pay_type IN (1,10)&quot; &gt; /root/tablename.sql</span><br><span class="line">-- 备份整个数据库到1个文件</span><br><span class="line">mysqldump -uusername -ppasswd -h127.0.0.1 -P3306 --single-transaction --verbose --default-character-set=utf8 db_name | gzip &gt; /root/dbname.sql.gz</span><br></pre></td></tr></table></figure></div><h2 id="mysql-保留小数点相关命令"><a href="#mysql-保留小数点相关命令" class="headerlink" title="mysql 保留小数点相关命令"></a>mysql 保留小数点相关命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select cast(19.16558 as decimal(9,2))精确到几位</span><br><span class="line">select format(123.3434,3) 保留小数点后3位</span><br><span class="line">select round(123.5); 四舍五入</span><br><span class="line">select ceil(123.5);向上取整</span><br><span class="line">select floor(123.5);向下取整</span><br></pre></td></tr></table></figure></div><h2 id="mysql-端口修改"><a href="#mysql-端口修改" class="headerlink" title="mysql 端口修改"></a>mysql 端口修改</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看端口 : </span><br><span class="line">show global variables like &apos;port&apos;;</span><br><span class="line"></span><br><span class="line">修改端口 : </span><br><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">重启服务 ：</span><br><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></div><h2 id="mysql-创建表相关"><a href="#mysql-创建表相关" class="headerlink" title="mysql 创建表相关"></a>mysql 创建表相关</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 创建时间、更新时间</span><br><span class="line">INSERT_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;插入时间&apos;,</span><br><span class="line">UPDATE_TIME TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;更新时间&apos;,</span><br><span class="line"></span><br><span class="line">-- hive 建表语句</span><br><span class="line">CREATE TABLE tmp.table_name(</span><br><span class="line">  filed string comment &apos;&apos;, </span><br><span class="line">) comment &apos;&apos;</span><br><span class="line">PARTITIONED BY (log_date string)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">-- mysql 建表语句</span><br><span class="line">CREATE TABLE table_name (</span><br><span class="line">  ID int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;&apos;,</span><br><span class="line">  field varchar(16) NOT NULL COMMENT &apos;&apos;</span><br><span class="line">  INSERT_TIME timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;插入时间&apos;,</span><br><span class="line">  UPDATE_TIME timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`ID`),</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;&apos;</span><br><span class="line">;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git相关命令</title>
      <link href="/2019/12/15/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/12/15/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux下Git和GitHub环境的搭建"><a href="#Linux下Git和GitHub环境的搭建" class="headerlink" title="Linux下Git和GitHub环境的搭建"></a>Linux下Git和GitHub环境的搭建</h2><ol><li>安装Git，使用命令 <code>sudo apt-get install git</code></li><li>创建GitHub帐号</li></ol><a id="more"></a><ol start="3"><li>生成ssh key，使用命令 <code>ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code>，your_email是你的email<br>默认在用户的家目录下.ssh/id_rsa.pub文件里面</li><li>回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。</li><li>测试ssh key是否成功，使用命令<code>ssh -T git@github.com</code>，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</li><li>配置Git的配置文件，username和email<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//配置用户名</span><br><span class="line">git config --global user.name &quot;your name&quot;   </span><br><span class="line">//配置email</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="利用Git从本地上传到GitHub"><a href="#利用Git从本地上传到GitHub" class="headerlink" title="利用Git从本地上传到GitHub"></a>利用Git从本地上传到GitHub</h2><ol><li>进入要所要上传文件的目录输入命令<code>git init</code></li><li>创建一个本地仓库，使用命令 <code>git remote add origin git@github.com:yourName/yourRepo.git</code>，youname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库</li><li>比如你要添加一个文件xxx到本地仓库，使用命令 <code>git add xxx”，可以使用“git add .</code>自动判断添加哪些文件，然后把这个添加提交到本地的仓库，使用命令 <code>git commit -m &#39;说明这次的提交&#39;</code>，最后把本地仓库提交到远程的GitHub仓库，使用命令 <code>git push origin master</code></li></ol><h2 id="从GitHub克隆项目到本地"><a href="#从GitHub克隆项目到本地" class="headerlink" title="从GitHub克隆项目到本地"></a>从GitHub克隆项目到本地</h2><ol><li>到GitHub的某个仓库，然后复制右边的有个<code>HTTPS clone url</code></li><li>回到要存放的目录下，使用命令 <code>git clone https://github.com/chenguolin/scrapy.git</code>，url只是一个例子</li><li>如果本地的版本不是最新的，可以使用命令 <code>git fetch origin</code></li><li>把更新的内容合并到本地分支，可以使用命令 <code>git merge origin/master</code>，如果你不想手动去合并，那么你可以使用： <code>git pull origin master</code>，这个命令可以拉去最新版本并自动合并</li></ol><h2 id="GitHub的分支管理"><a href="#GitHub的分支管理" class="headerlink" title="GitHub的分支管理"></a>GitHub的分支管理</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol><li>创建一个本地分支： git branch &lt;新分支名字&gt;</li><li>将本地分支同步到GitHub上面： git push &lt;本地仓库名&gt; &lt;新分支名&gt;</li><li>切换到新建立的分支： git checkout &lt;新分支名&gt;</li><li>为你的分支加入一个新的远程端： git remote add &lt;远程端名字&gt; &lt;地址&gt;</li><li>查看当前仓库有几个分支: git branch</li></ol><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol><li>从本地删除一个分支： git branch -d &lt;分支名称&gt;</li><li>同步到GitHub上面删除这个分支： git push &lt;本地仓库名&gt; :&lt;GitHub端分支&gt;</li></ol><h2 id="不用一直输入密码"><a href="#不用一直输入密码" class="headerlink" title="不用一直输入密码"></a>不用一直输入密码</h2><ol><li>git config –global credential.helper store</li><li>git push origin your-branch   (会让你输入用户名和密码，这时你输入就好了，然后下次再git push /pull 的时候就不用密码)</li></ol><h2 id="fatal-refusing-to-merge-unrelated-histories-解决方法"><a href="#fatal-refusing-to-merge-unrelated-histories-解决方法" class="headerlink" title="fatal: refusing to merge unrelated histories 解决方法 :"></a>fatal: refusing to merge unrelated histories 解决方法 :</h2><p><code>git pull origin master --allow-unrelated-histories</code></p><h2 id="git仓库删除所有历史提交记录"><a href="#git仓库删除所有历史提交记录" class="headerlink" title="git仓库删除所有历史提交记录"></a>git仓库删除所有历史提交记录</h2><ol><li><p>Checkout<br><code>git checkout --orphan latest_branch</code></p></li><li><p>Add all the files<br><code>git add -A</code></p></li><li><p>Commit the changes<br><code>git commit -am &quot;commit message&quot;</code></p></li><li><p>Delete the branch<br><code>git branch -D master</code></p></li><li><p>Rename the current branch to master<br><code>git branch -m master</code></p></li><li><p>Finally, force update your repository<br><code>git push -f origin master</code></p></li></ol><h2 id="自建git服务器"><a href="#自建git服务器" class="headerlink" title="自建git服务器"></a>自建git服务器</h2><ol><li>安装git</li></ol><p><code>sudo apt-get install git</code></p><ol start="2"><li>创建一个git用户，用来运行git服务</li></ol><p><code>sudo adduser git</code></p><ol start="3"><li>创建证书登录</li></ol><p>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</p><p>对于需要登录的用户采用ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>”命令创建（windows需要打开git bash),创建的时候会提示你密钥生成的位置，以及让你生成对应的密码——一般来说，公钥会生成在.ssh路径下；</p><ol start="4"><li>初始化仓库</li></ol><p>先选定一个目录作为Git仓库，假定是/repo，在/repo目录下输入命令：</p><p><code>sudo git init --bare hello.git</code></p><p>执行完上面的命令，Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。</p><ol start="5"><li>拉取仓库</li></ol><p><code>git clone git@server:/repo/sample.git</code></p><h2 id="git远程仓库地址变更"><a href="#git远程仓库地址变更" class="headerlink" title="git远程仓库地址变更"></a>git远程仓库地址变更</h2><p><code>git remote set-url origin http://192.168.100.235:9797/john/git_test.git</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux技巧</title>
      <link href="/2019/12/15/Linux%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/12/15/Linux%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>在此记录一些，日常与工作中经常会用到的一些Linux技巧，命令，算是做个小总结吧。</p><a id="more"></a><h4 id="批量替换文件内容"><a href="#批量替换文件内容" class="headerlink" title="批量替换文件内容"></a>批量替换文件内容</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 批量替换内容 ossfs-bj 批量替换为 ossfs/bj</span><br><span class="line">grep "ossfs-bj" -rl ./ | xargs sed -i "s/ossfs-bj/ossfs\/bj/g"</span><br></pre></td></tr></table></figure></div><h4 id="批量修改文件后缀"><a href="#批量修改文件后缀" class="headerlink" title="批量修改文件后缀"></a>批量修改文件后缀</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把.html 后缀的改成 .php后缀</span><br><span class="line">rename "s/.html/.php/" *</span><br></pre></td></tr></table></figure></div><h4 id="Linux的du用法排除某个目录"><a href="#Linux的du用法排除某个目录" class="headerlink" title="Linux的du用法排除某个目录"></a>Linux的du用法排除某个目录</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du -sh /* --exclude="proc"</span><br><span class="line"><span class="meta">#</span> 或使用 模糊匹配 都行</span><br><span class="line">du -sh /* --exclude="*proc*"</span><br></pre></td></tr></table></figure></div><h4 id="服务器日志定时清理-保留14天"><a href="#服务器日志定时清理-保留14天" class="headerlink" title="服务器日志定时清理,保留14天"></a>服务器日志定时清理,保留14天</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr/local/resin/log/* -name '*log*' -mtime +14 -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure></div><h4 id="linux几种快速清空文件内容的方法"><a href="#linux几种快速清空文件内容的方法" class="headerlink" title="linux几种快速清空文件内容的方法"></a>linux几种快速清空文件内容的方法</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> : &gt; filename   #其中的 : 是一个占位符, 不产生任何输出.</span><br><span class="line"><span class="meta">$</span> &gt; filename</span><br><span class="line"><span class="meta">$</span> echo “” &gt; filename</span><br><span class="line"><span class="meta">$</span> echo /dev/null &gt; filename</span><br><span class="line"><span class="meta">$</span> echo &gt; filename</span><br><span class="line"><span class="meta">$</span> cat /dev/null &gt; filename</span><br><span class="line"><span class="meta">$</span> cp /dev/null filename</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于【缓存穿透、缓存击穿、缓存雪崩、热点数据失效】问题的解决方案</title>
      <link href="/2019/12/15/%E5%85%B3%E4%BA%8E%E3%80%90%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E3%80%91%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/12/15/%E5%85%B3%E4%BA%8E%E3%80%90%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E3%80%91%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="本文转载自公众号：乔二爷"><a href="#本文转载自公众号：乔二爷" class="headerlink" title="本文转载自公众号：乔二爷"></a>本文转载自公众号：乔二爷</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNzk4MzA5MA==&amp;mid=2247483739&amp;idx=1&amp;sn=38c69ba17fd095b42d4e066758945434&amp;chksm=fadfe046cda86950ba42bedc5494103d60d6784b72f0e8706055de820ed47798662a8cdfadbb&amp;mpshare=1&amp;scene=24&amp;srcid=1215ey12YbzOMvQ1fRFkjXk4&amp;sharer_sharetime=1576400637960&amp;sharer_shareid=7f88951f2298e00bd399759b890669f4&amp;key=1ed37e8b659a14659809a4dd40a3ea4492a19eacc8e029628706ea45c76f9607a305be16d18731d1de51dfd7f45d3a8fc73fe08b0a2066400787e9a95d29d6d0becb6c4beb52e8cb0626ab3e0e4b9d17&amp;ascene=14&amp;uin=MTc1MDE0MjU0MA%3D%3D&amp;devicetype=Windows+10&amp;version=62070158&amp;lang=zh_CN&amp;exportkey=Aex2DynF56Bl3XfwAFKYoVk%3D&amp;pass_ticket=JYSNqtgLCu%2FkdnyOPXyetuJszOmD%2BG56jMtmr9mCjyYTl863bKvqf36zzIpLKC6b" target="_blank" rel="noopener">原文链接</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们的平常的项目中多多少少都会使用到缓存，因为一些数据我们没有必要每次查询的时候都去查询到数据库。特别是高 QPS 的系统，每次都去查询数据库，对于你的数据库来说将是灾难。</p><p>今天我们不牵涉多级缓存的知识，就把系统使用到的缓存方案，不管是一级还是多级的都统称为缓存，主要是为了讲述使用缓存的时候可能会遇到的一些问题以及一些解决办法。</p><p>我们使用缓存时，我们的业务系统大概的调用流程如下图：</p><p><img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-06.png" alt=""></p><p>当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能会出现一些现象。</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h3><p>正常情况下，我们去查询数据都是存在。那么请求去查询一条压根数据库中根本就不存在的数据，也就是缓存和数据库都查询不到这条数据，但是请求每次都会打到数据库上面去。</p><p>这种查询不存在数据的现象我们称为缓存穿透。</p><h3 id="缓存穿透带来的问题"><a href="#缓存穿透带来的问题" class="headerlink" title="缓存穿透带来的问题"></a>缓存穿透带来的问题</h3><p>试想一下，如果有黑客会对你的系统进行攻击，拿一个不存在的id 去查询数据，会产生大量的请求到数据库去查询。可能会导致你的数据库由于压力过大而宕掉。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="缓存空值"><a href="#缓存空值" class="headerlink" title="缓存空值"></a>缓存空值</h4><p>之所以会发生穿透，就是因为缓存中没有存储这些空数据的key。从而导致每次查询都到数据库去了。</p><p>那么我们就可以为这些key 设置的值设置为null 丢到缓存里面去。后面再出现查询这个key 的请求的时候，直接返回null ,就不用在到 数据库中去走一圈了。但是别忘了设置过期时间。</p><h4 id="BloomFilter"><a href="#BloomFilter" class="headerlink" title="BloomFilter"></a>BloomFilter</h4><p>BloomFilter 类似于一个hase set 用来判断某个元素（key）是否存在于某个集合中。</p><p>这种方式在大数据场景应用比较多，比如 Hbase 中使用它去判断数据是否在磁盘上。还有在爬虫场景判断url 是否已经被爬取过。</p><p>这种方案可以加在第一种方案中，在缓存之前在加一层 BloomFilter ，在查询的时候先去 BloomFilter 去查询 key 是否存在，如果不存在就直接返回，存在再走查 缓存 -&gt; 查 DB。</p><p>流程图如下：</p><p><img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-07.png" alt=""></p><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>针对于一些恶意攻击，攻击带过来的大量key 是不存在的，那么我们采用第一种方案就会缓存大量不存在 key 的数据。此时我们采用第一种方案就不合适了，我们完全可以先对使用第二种方案进行过滤掉这些key。</p><p>针对这种key 异常多，请求重复率比较低的数据，我们就没有必要进行缓存，使用第二种方案直接过滤掉。</p><p>对于空数据的key 有限的，重复率比较高的，我们则可以采用第一种方式进行缓存。</p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="什么是击穿"><a href="#什么是击穿" class="headerlink" title="什么是击穿"></a>什么是击穿</h3><p>缓存击穿是我们可能遇到的第二个使用缓存方案可能遇到的问题。</p><p>在平常高并发的系统中，大量的请求同时查询一个 key 时，此时 这个key 正好失效了，就会导致大量的请求都打到数据库上面去。这种现象我们成为击穿。</p><h3 id="会带来什么问题"><a href="#会带来什么问题" class="headerlink" title="会带来什么问题"></a>会带来什么问题</h3><p>会造成某一时刻数据库请求量过大，压力剧增。</p><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>上面的现象是多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上使用一个 互斥锁来锁住它。其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有缓存了，就直接走缓存。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="什么是缓存雪崩"><a href="#什么是缓存雪崩" class="headerlink" title="什么是缓存雪崩"></a>什么是缓存雪崩</h3><p>缓存雪崩的情况是说，当某一时刻发生大规模的缓存失效的情况。比如你的缓存服务宕机了，会有大量的请求进来直接打到DB上面。结果就是DB 称不住，挂掉。</p><h3 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="事前：使用集群缓存，保证缓存服务的高可用"><a href="#事前：使用集群缓存，保证缓存服务的高可用" class="headerlink" title="事前：使用集群缓存，保证缓存服务的高可用"></a>事前：使用集群缓存，保证缓存服务的高可用</h4><p>这种方案就是在发生雪崩前对缓存集群实现高可用，如果是使用 Redis，可以使用 主从+哨兵 ，Redis Cluster 来避免 Redis 全盘崩溃的情况。</p><h4 id="事中：使用-ehcache-本地缓存-Hystrix-限流-amp-降级-避免-MySQL-被打死的情况发生。"><a href="#事中：使用-ehcache-本地缓存-Hystrix-限流-amp-降级-避免-MySQL-被打死的情况发生。" class="headerlink" title="事中：使用 ehcache 本地缓存 + Hystrix 限流&amp;降级 ,避免 MySQL 被打死的情况发生。"></a>事中：使用 ehcache 本地缓存 + Hystrix 限流&amp;降级 ,避免 MySQL 被打死的情况发生。</h4><p>使用 ehcache 本地缓存的目的也是考虑在 Redis Cluster 完全不可用的时候，ehcache 本地缓存还能够支撑一阵。</p><p>使用 Hystrix 进行 限流 &amp; 降级 ，比如一秒来了5000个请求，我们可以设置假设只能有一秒 2000 个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑，然后去调用我们自己开发的降级组件（降级）。比如设置的一些默认值呀之类的。以此来保护最后的 MySQL 不会被大量的请求给打死。</p><h4 id="事后：开启-Redis-持久化机制，尽快恢复缓存集群"><a href="#事后：开启-Redis-持久化机制，尽快恢复缓存集群" class="headerlink" title="事后：开启 Redis 持久化机制，尽快恢复缓存集群"></a>事后：开启 Redis 持久化机制，尽快恢复缓存集群</h4><p>一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</p><p>防止雪崩方案如下图所示：</p><p><img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-08.png" alt=""></p><h2 id="热点数据集中失效问题怎么解决"><a href="#热点数据集中失效问题怎么解决" class="headerlink" title="热点数据集中失效问题怎么解决"></a>热点数据集中失效问题怎么解决</h2><p>我们在设置缓存的时候，一般会给缓存设置一个失效时间，过了这个时间，缓存就失效了。对于一些热点的数据来说，当缓存失效以后会存在大量的请求过来，然后打到数据库去，从而可能导致数据库崩溃的情况。</p><h3 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="设置不同的失效时间"><a href="#设置不同的失效时间" class="headerlink" title="设置不同的失效时间"></a>设置不同的失效时间</h4><p>为了避免这些热点的数据集中失效，那么我们在设置缓存过期时间的时候，我们让他们失效的时间错开。比如在一个基础的时间上加上或者减去一个范围内的随机值。</p><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>结合上面的击穿的情况，在第一个请求去查询数据库的时候对他加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。但是也是由于它会阻塞其他的线程，此时系统吞吐量会下降。需要结合实际的业务去考虑是否要这么做。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="noopener">缓存穿透，缓存击穿，缓存雪崩解决方案分析</a><br><a href="https://blog.csdn.net/wang0112233/article/details/79558612" target="_blank" rel="noopener">Redis缓存雪崩、缓存穿透、热点Key解决方案和分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis-安装与配置</title>
      <link href="/2019/12/15/Redis-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/12/15/Redis-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>wget <a href="http://download.redis.io/releases/redis-5.0.7.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.7.tar.gz</a></p><h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><p>tar -zxvf redis-5.0.7.tar.gz</p><a id="more"></a><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>cd redis-5.0.7 执行命令 make</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>cd redis-5.0.7/src 执行命令 make install</p><h1 id="内部一些文件的移动"><a href="#内部一些文件的移动" class="headerlink" title="内部一些文件的移动"></a>内部一些文件的移动</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.7</span><br><span class="line">mkdir etc</span><br><span class="line">mkdir bin</span><br><span class="line">mv redis.conf etc/</span><br><span class="line">cd src</span><br><span class="line">mv mkreleasehdr.sh  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server  redis-trib.rb ../bin</span><br></pre></td></tr></table></figure></div><h1 id="配置Redis服务可后台启动"><a href="#配置Redis服务可后台启动" class="headerlink" title="配置Redis服务可后台启动"></a>配置Redis服务可后台启动</h1><p><code>vim redis-5.0.7/etc/redis.conf</code></p><p>搜索 <code>daemonize</code></p><p>将 no 改为 yes</p><h1 id="带上配置文件启动redis-server-可后台启动redis"><a href="#带上配置文件启动redis-server-可后台启动redis" class="headerlink" title="带上配置文件启动redis-server(可后台启动redis)"></a>带上配置文件启动redis-server(可后台启动redis)</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.7/bin/</span><br><span class="line">./redis-server ../etc/redis.conf</span><br></pre></td></tr></table></figure></div><h1 id="客户端登录"><a href="#客户端登录" class="headerlink" title="客户端登录"></a>客户端登录</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.7/bin/</span><br><span class="line"><span class="meta">#</span> 连接本地redis</span><br><span class="line">./redis-cli</span><br><span class="line"><span class="meta">#</span> 有时候会有中文乱码。要在 redis-cli 后面加上 --raw</span><br></pre></td></tr></table></figure></div><p>exit 命令退出客户端命令行</p><h1 id="Redis服务关闭"><a href="#Redis服务关闭" class="headerlink" title="Redis服务关闭"></a>Redis服务关闭</h1><p>pkill redis-server</p><h1 id="设置Redis密码"><a href="#设置Redis密码" class="headerlink" title="设置Redis密码"></a>设置Redis密码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 默认无密码</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) "requirepass"</span><br><span class="line">2) ""</span><br><span class="line"><span class="meta">#</span> 设置请求密码</span><br><span class="line">127.0.0.1:6379&gt; config set requirepass 123</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span> 获取密码，无权限，无法访问</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"><span class="meta">#</span> 认证密码</span><br><span class="line">127.0.0.1:6379&gt; auth 123</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span> 认证通过后，获取密码</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) "requirepass"</span><br><span class="line">2) "123"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></div><h1 id="设置Redis可远程访问"><a href="#设置Redis可远程访问" class="headerlink" title="设置Redis可远程访问"></a>设置Redis可远程访问</h1><p>由于 redis 采用的安全策略，默认会只准许本地访问。需要通过简单配置，完成允许外网访问。</p><p>修改 redis 的配置文件，将所有 bind 信息全部屏蔽。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> bind 192.168.1.100 10.0.0.1 </span><br><span class="line"><span class="meta">#</span> bind 192.168.1.8 </span><br><span class="line"><span class="meta">#</span> bind 127.0.0.1</span><br></pre></td></tr></table></figure></div><p>修改完成后，需要重新启动 redis 服务。</p><p>至此，就能够链接到 redis 服务，并且能够正确显示了。</p><p>链接远程Redis:</p><p><code>redis-cli -h host -p port -a password</code></p><p>强烈建议不要在公网访问 redis,因为 redis 的处理速度非常快，所以如果你的密码比较简单，很容易就会通过暴力破解破解出密码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"><span class="meta">#</span> 150k passwords per second against a good box. This means that you should</span><br><span class="line"><span class="meta">#</span> use a very strong password otherwise it will be very easy to break.</span><br></pre></td></tr></table></figure></div><h1 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) "loglevel"</span><br><span class="line">2) "notice"</span><br></pre></td></tr></table></figure></div><p>使用*号获取所有配置项</p><h1 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET loglevel "notice"</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line"></span><br><span class="line">1) "loglevel"</span><br><span class="line">2) "notice"</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis 数据类型</title>
      <link href="/2019/12/15/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/12/15/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p></blockquote><a id="more"></a><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul><li><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p></li><li><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比.png图片或者序列化的对象。</p></li><li><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET test &quot;test-string&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET test </span><br><span class="line">&quot;test-string&quot;</span><br></pre></td></tr></table></figure></div><p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 test，对应的值为 test-string。</p><p>注意：一个键最大能存储 512MB。</p><h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><p>Redis hash 是一个键值(key=&gt;value)对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 删除前面测试用过的key值test</span><br><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hmset test field1 &apos;test1&apos; field2 &apos;test2&apos; field3 &apos;test3&apos;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hget test field1</span><br><span class="line">&quot;test1&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget test field2</span><br><span class="line">&quot;test2&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget test field3</span><br><span class="line">&quot;test3&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget test field4</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></div><p>实例中我们使用了 Redis HMSET, HGET 命令，HMSET 设置了两个 field=&gt;value 对, HGET 获取对应 field 对应的 value。</p><p>每个 hash 可以存储 232 -1 键值对（40多亿）。</p><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush test redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush test mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush test mysql</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange test 0 10</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></div><p>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test mysql</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test mysql</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS test</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></div><p>注意：以上实例中 mysql 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p><p>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。</p><h2 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 3 redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 2 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 1 mysql</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 1 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE test 0 1000</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></div><h2 id="各个数据类型应用场景"><a href="#各个数据类型应用场景" class="headerlink" title="各个数据类型应用场景"></a>各个数据类型应用场景</h2><table><thead><tr><th>类型</th><th>简介</th><th>特性</th><th>场景</th></tr></thead><tbody><tr><td>String(字符串)</td><td>二进制安全</td><td>可以包含任何数据,比.png图片或者序列化的对象,一个键最大能存储512M</td><td>—</td></tr><tr><td>Hash(字典)</td><td>键值对集合,即编程语言中的Map类型</td><td>适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td>存储、读取、修改用户属性</td></tr><tr><td>List(列表)</td><td>链表(双向链表)</td><td>增删快,提供了操作某一段元素的API</td><td>1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td>Set(集合)</td><td>哈希表实现,元素不重复</td><td>1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td>1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td>Sorted Set(有序集合)</td><td>将Set中的元素增加一个权重参数score,元素按score有序排列</td><td>数据插入集合时,已经进行天然排序</td><td>1、排行榜 2、带权重的消息队列</td></tr></tbody></table><h2 id="Redis-笔记"><a href="#Redis-笔记" class="headerlink" title="Redis 笔记"></a>Redis 笔记</h2><p>注意：Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p><p>Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p><p>每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE test 0 1000</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; ZRANGEBYSCORE test 0 1000</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379[1]&gt;</span><br></pre></td></tr></table></figure></div><p>Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个空Redis实例占用的内在只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis 简介</title>
      <link href="/2019/12/15/Redis-%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/12/15/Redis-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><a id="more"></a><p>Redis 与其他 key-value 缓存产品有以下三个特点：</p><ol><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ol><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h2><ul><li><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p></li><li><p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 OSS 挂载到服务器</title>
      <link href="/2019/12/14/%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/12/14/%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://help.aliyun.com/document_detail/32196.html" target="_blank" rel="noopener">ecs服务器挂载ossfs官方教程</a></p><h3 id="获取用户AccessKey"><a href="#获取用户AccessKey" class="headerlink" title="获取用户AccessKey :"></a>获取用户AccessKey :</h3><p>登录阿里云OSS控制台，获取用户AccessKey：<br>AccessKeyID：xxxxxxxxxxxxxxxx<br>AccessKeySecret：xxxxxxxxxxxxxxxx</p><a id="more"></a><h3 id="在服务器创建ossfs密码文件"><a href="#在服务器创建ossfs密码文件" class="headerlink" title="在服务器创建ossfs密码文件"></a>在服务器创建ossfs密码文件</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo oss-jwl-bj:AccessKeyID:AccessKeySecret &gt; /etc/passwd-ossfs  </span><br><span class="line">chmod 640 /etc/passwd-ossfs</span><br></pre></td></tr></table></figure></div><h3 id="将Bucket挂载到指定目录"><a href="#将Bucket挂载到指定目录" class="headerlink" title="将Bucket挂载到指定目录"></a>将Bucket挂载到指定目录</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /ossfs/bj/</span><br><span class="line">-- 内网  </span><br><span class="line">ossfs oss-jwl-bj /ossfs/bj/ -ourl=oss-cn-beijing-internal.aliyuncs.com -oallow_other -ononempty</span><br><span class="line">-- 外网  </span><br><span class="line">ossfs oss-jwl-bj /ossfs/bj/ -ourl=oss-cn-beijing.aliyuncs.com -oallow_other -ononempty</span><br></pre></td></tr></table></figure></div><h3 id="设置OSS开机自动挂载"><a href="#设置OSS开机自动挂载" class="headerlink" title="设置OSS开机自动挂载"></a>设置OSS开机自动挂载</h3><p>将上面的命令添加到以下文件中<br><code>vim /etc/rc.local</code></p><p>重启服务器测试oss是否开机挂载<br><code>df -h</code></p><h3 id="卸载硬盘"><a href="#卸载硬盘" class="headerlink" title="卸载硬盘"></a>卸载硬盘</h3><p><code>fusermount -u /ossfs/bj</code></p>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入分析Session和Cookie</title>
      <link href="/2019/12/11/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Session%E5%92%8CCookie/"/>
      <url>/2019/12/11/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Session%E5%92%8CCookie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5b7c1f4d6fb9a019f221ca14" target="_blank" rel="noopener">原文链接</a></p><a id="more"></a><h2 id="为什么需要cookie和session"><a href="#为什么需要cookie和session" class="headerlink" title="为什么需要cookie和session"></a>为什么需要cookie和session</h2><p>在Web发展史中，我们知道浏览器与服务器间采用的是http协议，而这种协议是无状态的，所以这就导致了服务器无法知道是谁在浏览网页，但很明显，一些网页需要知道用户的状态，例如登陆，购物车等。 </p><p>所以为了解决这一问题，先后出现了四种技术，分别是隐藏表单域，URL重写，cookie，session。而用的最多也是比较重要的就是cookie和session了。 </p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h3><ol><li>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。</li><li>浏览器需要保存这段数据，不得轻易删除。</li><li>此后每次浏览器访问该服务器，都必须带上这段数据。</li></ol><blockquote><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。</p></blockquote><h3 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a>Cookie的创建</h3><p>当前Cookie有两个版本，分别对应两种设置响应头：“Set-Cookie”和“Set-Cookie2”。<br>在Servlet中并不支持Set-Cookie2，所以我们来看看Set-Cookie的属性项：</p><table><thead><tr><th>属性项</th><th>属性介绍</th></tr></thead><tbody><tr><td>NAME=VALUE</td><td>键值对，可以设置保存的Key/Value，这里NAME不能和其他属性项名字一样</td></tr><tr><td>Expires</td><td>过期时间，在这个时间点后Cookie失效</td></tr><tr><td>Domain</td><td>生成Cookie域名</td></tr><tr><td>Path</td><td>该Cookie是在当前那个路径下生成的</td></tr><tr><td>Secure</td><td>加密设置，设置他之后，只会在SSH连接时才会回传该Cookie</td></tr></tbody></table><h3 id="属性中-Domain-的作用"><a href="#属性中-Domain-的作用" class="headerlink" title="属性中 Domain 的作用"></a>属性中 Domain 的作用</h3><p>在 cookie 中其属性 domain 的作用是：  </p><ul><li>决定了cookie的作用域</li></ul><p>cookie的作用域：</p><ul><li>cookie的作用域是domain本身以及domain下的所有子域名。</li></ul><p>为什么cookie无法设置除当前域名或者其父域名之外的其他domain？  </p><ul><li>这个是浏览器出于对cookie的保护造成的，也就是cookie无法跨域设置。</li></ul><p>为什么cookie的作用域一定要设置正确？  </p><ul><li>当我们给网站设置cookie时，在网站的其他域名下也会接收到这些cookie。这些没用的cookie看似不占多少流量，但如果对一个日PV千万的站点来说，那浪费的资源就不是一点点了。</li></ul><p>对于域名的设置有2点要注意的地方：</p><ol><li>在setcookie中省略domain参数，那么domain默认为当前域名。</li><li>domain参数可以设置父域名以及自身，但不能设置其它域名，包括子域名，否则cookie不起作用。</li></ol><h3 id="开始创建-Cookie"><a href="#开始创建-Cookie" class="headerlink" title="开始创建 Cookie"></a>开始创建 Cookie</h3><p>Web服务器通过发送一个称为Set-Cookie的http消息来创建一个Cookie：</p><p><code>Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</code></p><p>这里我们思考一个问题，当我们在服务器创建多个Cookie时，这些Cookie最终是在一个Header项中还是以独立的Header存在的呢？</p><ul><li>构建http返回字节流时是将Header中所有的项顺序写出，而没有进行任何修改。所以可以想象在浏览器在接收http返回的数据时是分别解析每一个Header项。</li></ul><p>++ 接着，在客户端进行保存，如何保存呢？这里又要对Cookie进行进一步的了解。 ++</p><h2 id="Cookie-的分类"><a href="#Cookie-的分类" class="headerlink" title="Cookie 的分类"></a>Cookie 的分类</h2><h3 id="会话级别的-Cookie"><a href="#会话级别的-Cookie" class="headerlink" title="会话级别的 Cookie"></a>会话级别的 Cookie</h3><p>所谓会话级别Cookie，就是在浏览器关闭之后Cookie就会失效。</p><h3 id="持久级别的-Cookie"><a href="#持久级别的-Cookie" class="headerlink" title="持久级别的 Cookie"></a>持久级别的 Cookie</h3><p>保存在硬盘的Cookie，只要设置了过期时间就是硬盘级别Cookie。</p><hr><p>好的，现在cookie保存在了客户端，当我们去请求一个URL时，浏览器会根据这个URL路径将符合条件的Cookie放在请求头中传给服务器。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>各位客官看到这里实属不易，但我们还是要想想，Cookie是有大小限制和数量限制的，并且越来越多的Cookie代表客户端和服务器的传输量增加，可不可以每次传的时候不传所有cookie值，而只传一个唯一ID，通过这个ID直接在服务器查找用户信息呢？答案是有的，这就是我们的session。</p><h3 id="理解Session"><a href="#理解Session" class="headerlink" title="理解Session"></a>理解Session</h3><h4 id="Session-是啥？"><a href="#Session-是啥？" class="headerlink" title="Session 是啥？"></a>Session 是啥？</h4><p>Session是基于Cookie来工作的，同一个客户端每次访问服务器时，只要当浏览器在第一次访问服务器时，服务器设置一个id并保存一些信息(例如登陆就保存用户信息，视具体情况)，并把这个id通过Cookie存到客户端，客户端每次和服务器交互时只传这个id，就可以实现维持浏览器和服务器的状态，而这个ID通常是NAME为JSESSIONID的一个Cookie。</p><h4 id="Session-有哈好处啊？"><a href="#Session-有哈好处啊？" class="headerlink" title="Session 有哈好处啊？"></a>Session 有哈好处啊？</h4><p>session 的信息是存储在服务器端，所以很好的解决了安全性问题</p><h4 id="让-Session-正常工作的4种方式"><a href="#让-Session-正常工作的4种方式" class="headerlink" title="让 Session 正常工作的4种方式"></a>让 Session 正常工作的4种方式</h4><ol><li>通过URL传递SessionID</li><li>通过Cookie传递SessionID</li><li>通过SSL传递SessionID</li><li>通过隐藏表单传递SessionID</li></ol><h4 id="Session-的工作时序图"><a href="#Session-的工作时序图" class="headerlink" title="Session 的工作时序图"></a>Session 的工作时序图</h4><p>我们先来看看 session 工作的时序图</p><p><img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-01.png" alt="session时序图"></p><h4 id="一、创建Session"><a href="#一、创建Session" class="headerlink" title="一、创建Session"></a>一、创建Session</h4><p>当客户端访问到服务器，服务器会为这个客户端通过request.getSession()方法创建一个Session，如果当前SessionID还没有对应的HttpSession对象，就创建一个新的，并添加到org.apache.catalina.Manager的sessions容器中保存，这就做到了对状态的保持。  </p><p>当然，这个SessionID是唯一的。  </p><p>一个常见的误解是以为session在有客户端访问时就被创建，然而事实是直到某server端程序调用 HttpServletRequest.getSession(true)这样的语句时才被创建。  </p><p>注意如果JSP没有显示的使用 <code>&lt;% @page session=&quot;false&quot;%&gt;</code> 关闭session，则JSP文件在编译成Servlet时将会自动加上这样一条语句 <code>HttpSession session = HttpServletRequest.getSession(true);</code><br>这也是JSP中隐含的 session对象的来历。<br>由于session会消耗内存资源，因此，如果不打算使用session，应该在所有的JSP中关闭它。</p><p>引申:</p><ol><li>访问*.html的静态资源因为不会被编译为Servlet，也就不涉及session的问题。</li><li>当JSP页面没有显式禁止session的时候，在打开浏览器第一次请求该jsp的时候，服务器会自动为其创建一个session，并赋予其一个sessionID，发送给客户端的浏览器。以后客户端接着请求本应用中其他资源的时候，会自动在请求头上添加：<br><code>Cookie:JSESSIONID=客户端第一次拿到的session ID</code><br>这样，服务器端在接到请求时候，就会收到session ID，并根据ID在内存中找到之前创建的session对象，提供给请求使用。这也是session使用的基本原理</li></ol><p>—-搞不懂这个，就永远不明白session的原理。</p><h4 id="二、session保存"><a href="#二、session保存" class="headerlink" title="二、session保存"></a>二、session保存</h4><p>session存放在哪里： </p><ul><li>服务器端的内存中。不过session可以通过特殊的方式做持久化管理。</li></ul><p>当Servlet容器关闭：</p><ul><li>StandardManager将持久化没过期的StandardSession对象(必须调用Servlet容器中的stop和start命令，不能直接kill)</li></ul><p>当Servlet容器重启时：</p><ul><li>StandardManager初始化会重读这个文件，解析出所有session对象。</li></ul><h4 id="三、session的销毁"><a href="#三、session的销毁" class="headerlink" title="三、session的销毁"></a>三、session的销毁</h4><p>这里有一个误区，也是我之前的错误理解，就是我将session的生命周期理解成一次会话，浏览器打开就创建，浏览器关闭就销毁，这样理解是错的！！  </p><ol><li>Session超时：超时指的是连续一定时间服务器没有收到该Session所对应客户端的请求，并且这个时间超过了服务器设置的Session超时的最大时间。</li><li>程序调用HttpSession.invalidate()</li><li>服务器关闭或服务停止</li></ol><h4 id="四、检查session失效"><a href="#四、检查session失效" class="headerlink" title="四、检查session失效"></a>四、检查session失效</h4><p>检查每个Session是否失效是在Tomcat的一个后台线程完成的(backgroundProcess()方法中)；除了后台进程检验session是否失效外，调用request.getSession()也会检查该session是否过期，当然，调用这种方法如果过期的话又会重新创建一个新的session。</p><h4 id="五、session的id是从哪里来的，sessionID是如何使用的"><a href="#五、session的id是从哪里来的，sessionID是如何使用的" class="headerlink" title="五、session的id是从哪里来的，sessionID是如何使用的"></a>五、session的id是从哪里来的，sessionID是如何使用的</h4><p>当客户端第一次请求session对象时候，服务器会为客户端创建一个session，并将通过特殊算法算出一个session的ID，用来标识该session对象，当浏览器下次（session继续有效时）请求别的资源的时候，浏览器会偷偷地将sessionID放置到请求头中，服务器接收到请求后就得到该请求的sessionID，服务器找到该id的session返还给请求者（Servlet）使用。一个会话只能有一个session对象，对session来说是只认id不认人。</p><h4 id="六、同一客户端机器多次请求同一个资源，session一样吗？"><a href="#六、同一客户端机器多次请求同一个资源，session一样吗？" class="headerlink" title="六、同一客户端机器多次请求同一个资源，session一样吗？"></a>六、同一客户端机器多次请求同一个资源，session一样吗？</h4><p>一般来说，每次请求都会新创建一个session。</p><p>其实，这个也不一定的，总结下：  </p><ol><li>对于多标签的浏览器（比如360浏览器）来说，在一个浏览器窗口中，多个标签同时访问一个页面，session是一个。 </li><li>对于多个浏览器窗口之间，同时或者相隔很短时间访问一个页面，session是多个的，和浏览器的进程有关。  </li><li>对于一个同一个浏览器窗口，直接录入url访问同一应用的不同资源，session是一样的。  </li></ol><h2 id="做个总结"><a href="#做个总结" class="headerlink" title="做个总结"></a>做个总结</h2><h3 id="相同点和不同点"><a href="#相同点和不同点" class="headerlink" title="相同点和不同点"></a>相同点和不同点</h3><h4 id="相同点-有关系的地方"><a href="#相同点-有关系的地方" class="headerlink" title="相同点(有关系的地方)"></a>相同点(有关系的地方)</h4><p>Session和Cookie都是为了让http协议又状态而存在<br>Session通过Cookie工作，Cookie传输的SessionID让Session知道这个客户端到底是谁</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>Session将信息保存到服务器，Cookie将信息保存在客户端</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>当浏览器第一次访问服务器时，服务器创建Session并将SessionID通过Cookie带给浏览器保存在客户端，同时服务器根据业务逻辑保存相应的客户端信息保存在session中；客户端再访问时上传Cookie，服务器得到Cookie后获取里面的SessionID，来维持状态。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现开根号sqrt</title>
      <link href="/2018/12/09/%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%A0%B9%E5%8F%B7sqrt/"/>
      <url>/2018/12/09/%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%A0%B9%E5%8F%B7sqrt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513476&amp;idx=1&amp;sn=9b88e4c10e56f5c980b03da7cacb9d21&amp;chksm=80d67a47b7a1f351cc0c7251966884053a7a1e4be9e6c83451aae93b7abad4bf428c32547741&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">原文参考链接</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个函数, 完成 开根号 的操作, 方法签名如下：</p><p>double sqrt(int v, double t)</p><a id="more"></a><h3 id="要求"><a href="#要求" class="headerlink" title="要求:"></a>要求:</h3><ul><li>不能调用系统库函数, 诸如 Math.sqrt(v) 之类的;</li></ul><ul><li>假设函数的返回结果为 r,  要求 r 要满足一定的误差条件， 用公式表达就是：    <img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-02.png" alt="image">,其中 <img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-03.png" alt="image">是真实的值,t  为给定的一个误差, 例如0.1 。   举例而言, 我调用你的接口 sqrt(9, 0.1) ， 返回值是3.05,    就满足上面的误差范围， 因为9的平方根是3 ，  |3.05 - 3| = 0.05  ， 0.05 是小于0.1的。   如果返回值是2.95 也是满足条件的。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">double</span> t)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span> || t == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">double</span> m = (<span class="keyword">double</span>)v/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> h = v;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> v2 = <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"第一条测试语句："</span>+m);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        v1 = m*m + t*t - <span class="number">2</span>*m*t;</span><br><span class="line">        v2 = m*m + t*t + <span class="number">2</span>*m*t;</span><br><span class="line">        System.out.println(<span class="string">"第二条测试语句："</span>+v1+<span class="string">"|"</span>+v2);</span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">        * 限定条件为：</span></span><br><span class="line"><span class="comment">        * 假设函数的返回结果为 r,  要求 r 要满足一定的误差条件， </span></span><br><span class="line"><span class="comment">        * 用公式表达就是：|r-根号下v| &lt;= t , </span></span><br><span class="line"><span class="comment">        * 其中 根号下v 是真实的值 ,t为给定的一个误差, 例如0.1 。</span></span><br><span class="line"><span class="comment">        * 转换表达式为：</span></span><br><span class="line"><span class="comment">        * r*r + t*t -2rt &lt;= v</span></span><br><span class="line"><span class="comment">        * r*r + t*t +2rt &gt;= v</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="keyword">if</span> ( v1 &lt;= v &amp;&amp; v2 &gt;= v )&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v1 &lt; v &amp;&amp; v2 &lt; v )&#123;</span><br><span class="line">                l = m;</span><br><span class="line">                m = (l + h)/<span class="number">2</span>;</span><br><span class="line">                System.out.println(<span class="string">"第三条测试语句："</span>+m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( v1 &gt; v &amp;&amp; v2 &gt; v )&#123;</span><br><span class="line">                h = m;</span><br><span class="line">                m = (h - l)/<span class="number">2</span> + l;</span><br><span class="line">                System.out.println(<span class="string">"第四条测试语句："</span>+m);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>两列数据去重问题</title>
      <link href="/2018/12/09/%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/09/%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="两列数据去重问题描述："><a href="#两列数据去重问题描述：" class="headerlink" title="两列数据去重问题描述："></a>两列数据去重问题描述：</h3><pre><code>现有两列数据，列A(发信人ID)，列B(收信人ID)，用户的ID为数字组成；我们称A和B为一对关系，可用C来表示：C=A&amp;B，对于C列在整个表中是没有重复值的；但是如果用D来表示：D=B&amp;A，那么D列和C列合并在一起会出现重复值；现在我们要解决的问题就是:将A、B组合当中的第一行或者第二行，去掉一行，保留一个唯一行。</code></pre><a id="more"></a> <ul><li>列子：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A       B       C       D   </span><br><span class="line">1       2       12      21  </span><br><span class="line">2       1       21      12  </span><br><span class="line">3       4       34      43</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将C列放到一个集合中，对C列的集合进行遍历，如果当前元素（12）的置换结果（21）</span><br><span class="line">在集合C中，那么删除当前元素（12）。当C列集合迭代结束后，当前C列就实现了本题</span><br><span class="line">目当中的去重。</span><br></pre></td></tr></table></figure></div><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该类实现数据去重 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">unique</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String[]&gt; list = <span class="keyword">new</span> ArrayList&lt;String[]&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        getList();</span><br><span class="line">        dataUnique(list);</span><br><span class="line">        output(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"/usr/java/files/unique/AB.txt"</span>)));</span><br><span class="line">            String line = br.readLine();</span><br><span class="line">            String[] temp = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (line!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                temp = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">                temp[<span class="number">0</span>] = line.split(<span class="string">"\t"</span>)[<span class="number">0</span>];</span><br><span class="line">                temp[<span class="number">1</span>] = line.split(<span class="string">"\t"</span>)[<span class="number">1</span>];</span><br><span class="line">                list.add(temp);</span><br><span class="line">                line = br.readLine();</span><br><span class="line">            &#125;   </span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123; </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据去重</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dataUnique</span><span class="params">(ArrayList&lt;String[]&gt; list)</span></span>&#123;</span><br><span class="line">        Iterator&lt;String[]&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            String[] temp = it.next();</span><br><span class="line">            <span class="comment">// int count = 0;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                <span class="comment">// count++;</span></span><br><span class="line">                <span class="keyword">if</span> (temp[<span class="number">0</span>].equals(list.get(i)[<span class="number">1</span>]) &amp;&amp; temp[<span class="number">1</span>].equals(list.get(i)[<span class="number">0</span>])) &#123;</span><br><span class="line">                    <span class="comment">// System.out.println("删除前："+list.size());</span></span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="comment">// System.out.println("删除后："+list.size());</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="comment">// System.out.println("遍历了多少次："+count);</span></span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出去重后的文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(ArrayList&lt;String[]&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"/usr/java/files/unique/unique.txt"</span>)));</span><br><span class="line">            <span class="keyword">for</span> (String[] temp : list) &#123;</span><br><span class="line">                bw.write(temp[<span class="number">0</span>]+<span class="string">"\t"</span>+temp[<span class="number">1</span>]+<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Mockito进行Java单元测试</title>
      <link href="/2018/12/08/%E4%BD%BF%E7%94%A8Mockito%E8%BF%9B%E8%A1%8CJava%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/12/08/%E4%BD%BF%E7%94%A8Mockito%E8%BF%9B%E8%A1%8CJava%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：桃子妈咪<br>链接：<a href="https://www.jianshu.com/p/3d6f76df21f9" target="_blank" rel="noopener">https://www.jianshu.com/p/3d6f76df21f9</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p></blockquote><blockquote><p>Google在3月份推出了一个关于Android MVP架构的官方Sample，除MVP架构本身之外，在这个Sample中配备了完善的单元测试用例，这对学习如何在Android中进行单元测试具有极高的价值。这篇文章主要是对其中使用的Mock框架-Mockito的学习总结。</p></blockquote><a id="more"></a><h4 id="什么是Mock？"><a href="#什么是Mock？" class="headerlink" title="什么是Mock？"></a>什么是Mock？</h4><p>Mock是虚拟对象，是为了模拟真实对象而创建的，这些虚拟对象的行为是可控的。为方便理解，可以把Mock视为『汽车碰撞实验』中的『假人』。<br><img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-04.png" alt="image"><br><img src="http://oss.jingwl.top/graph-bed/2019/2019-12-15-05.png" alt="image"></p><h4 id="为什么需要Mock？"><a href="#为什么需要Mock？" class="headerlink" title="为什么需要Mock？"></a>为什么需要Mock？</h4><ol><li>真实软件架构中的对象行为是不确定的（eg:时间、对象的状态）</li><li>真实对象的一些状态又很难构造（eg:网络抖动）</li><li>真实对象在进行某种操作时需要很长时间，影响测试进度（eg:一些数据库的初始化）</li><li>TDD（测试驱动开发）要求先写测试代码，再进行开发，那么经常会出现真实对象还没有开发完成的现象，又或者真实对象是一个硬件，只能模拟</li><li>实际测试中需要关注真实对象如何被调用，真实对象内部状态如何</li></ol><p>上述的问题都是可以通过引入Mock来解决的。</p><h4 id="什么是Mockito？"><a href="#什么是Mockito？" class="headerlink" title="什么是Mockito？"></a>什么是Mockito？</h4><p>Mockito是用于Java单元测试的一个Mock框架。</p><h4 id="为什么选择Mockito？"><a href="#为什么选择Mockito？" class="headerlink" title="为什么选择Mockito？"></a>为什么选择Mockito？</h4><ol><li>Mockito是StackOverflow社区票选的最佳Java Mock框架</li><li>Github 中位于Top4的Library</li><li>使用简洁、优雅的API即可写出漂亮的单元测试用例，这些单元测试语法符合自然语言，方便阅读</li></ol><h4 id="Mockito可以完成哪些功能？"><a href="#Mockito可以完成哪些功能？" class="headerlink" title="Mockito可以完成哪些功能？"></a>Mockito可以完成哪些功能？</h4><ol><li>验证Mock对象某函数是否执行，执行次数</li><li>Mock对象某函数有返回值，可以设置返回值。对于void的函数，可以设置抛出异常（即常说的安装桩）</li><li>验证Mock对象函数执行顺序</li><li>参数匹配（有很多内建的参数，也可以自己实现），这样使得验证函数交互或者设置返回值更加灵活</li><li>可以捕获参数用于后续进一步验证或设置</li></ol><h4 id="Mockito常用API及使用方法"><a href="#Mockito常用API及使用方法" class="headerlink" title="Mockito常用API及使用方法"></a>Mockito常用API及使用方法</h4><ol><li>创建Mock对象-创建Mock对象有两种方法</li></ol><ul><li>使用mock函数 - <code>public static &lt;T&gt; T mock(Class&lt;T&gt; classToMock)</code></li><li>使用@Mock注释 - 但必须在@Test函数中初始化或使用内建的Junit Runner</li></ul><ol start="2"><li><p>验证Mock对象函数是否执行、执行次数 - <code>public static &lt;T&gt; T verify(T mock,VerificationMode mode)</code>，其中mode可以为times(x), atLeastOnce() 或者 never()<br><code>verify(mock, times(5)).someMethod(&quot;was called five times&quot;);</code><br><code>verify(mock, atLeast(2)).someMethod(&quot;was called at least two times&quot;);</code><br><code>verify(mock, atLeastOnce()).someMethod(anyString());</code></p></li><li><p>给模拟对象的有返回值的函数安装桩 -<br><code>when(methodCall).thenReturn() 或 when(methodCall).thenThrow()</code></p></li><li><p>给模拟对象返回void的函数安装桩 -<br><code>doThrow(new RuntimeException()).when(mockObject).methodCall();</code></p></li><li><p>参数匹配-Mockito默认使用java的equals判断函数参数值，但有时为了更加灵活，可以使用参数匹配功能<br><code>when(mockedObject.methodCall(anyInt())).thenReturn(&quot;element&quot;)</code> <code>when(mockedObject.contains(argThat(isValid())).thenReturn(&quot;element&quot;);//isValid()是自定义的参数匹配</code></p></li><li><p>验证模拟对象函数执行顺序<br><code>personDAL.add(any()); personDAL.getAll(); InOrder inOrder = inOrder(personDAL); inOrder.verify(personDAL).add(any()); inOrder.verify(personDAL).getAll();</code></p></li><li><p>捕获模拟对象函数参数，进一步验证捕获的参数<br><code>ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class); verify(mock).doSomething(argument.capture()); assertEquals(&quot;John&quot;, argument.getValue().getName());</code></p></li></ol><p>关于Mockito会继续根据实际项目进一步整理实践知识。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> test </tag>
            
            <tag> mockito </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件上传-FileItem类</title>
      <link href="/2018/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-FileItem%E7%B1%BB/"/>
      <url>/2018/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-FileItem%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="http://blog.csdn.net/smallhorn/article/details/7864658" target="_blank" rel="noopener">http://blog.csdn.net/smallhorn/article/details/7864658</a></p></blockquote><p> FileItem类的常用方法</p><hr><p>1.boolean  isFormField():</p><p>isFormField方法用来判断FileItem对象里面封装的数据是一个普通文本表单字段，还是一个文件表单字段。如果是普通文本表单字段，返回一个true否则返回一个false。因此可以用该方法判断是否是普通表单域还是文件上传表单域。</p><a id="more"></a><p>2.String getName():</p><p>getName方法用来获得文件上传字段中的文件名。</p><p>3.String getFieldName():</p><p>getFieldName方法用来返回表单标签的name属性的值。</p><p>4.void write(File file):</p><p>write方法将FileItem对象中的内容保存到某个指定的文件中。如果FileItem对象中的内容是保存在某个临时文件中，该方法完成后，临时文件可以会被删除。该方法也可以将普通表单字段保存在一个文件中，但最主要的用途是把上传的文件内容保存在本地文件系统中。</p><p>5.String getString():</p><p>getString()方法将FileItem对象中保存的数据流内容以一个字符串返回。它有两个重载形式。public java.lang.String getString()和public java.lang.String getString(java.lang.String encodeing) throws java.io.UnsupportedEncodingException。前者使用缺省的字符集编码将主体内容转换成字符串，后者使用参数指定的字符集编码。如果在读取普通表单字段元素的内容时，出现了乱码现象，可以调用第二个方法，并传入 正确的字符集编码名称。</p><p>6.String getContentType():</p><p>此方法用来获得上传文件的类型，即标段字段元素描述头属性“content-type”的值，如image/jpeg。如果FileItem对象对应的是普通的表单字段，将返回null。</p><p>7.boolean isInMemory():</p><p>判断FileItem对象封装的数据是保存在内存中还是硬盘中。</p><p>8.void  delete():</p><p>此方法用来清空FileItem对象中封装的主体内容，如果内容是被保存在临时文件中，该方法会把临时文件删除。</p><p>9.InputStream  getInputStream():</p><p>以流的形式返回上传文件的主体内容。</p><p>10.long  getSize():</p><p>返回上传文件的大小。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL设置远程访问服务器</title>
      <link href="/2018/07/20/MySQL%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/07/20/MySQL%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于工作中需要进行远程登录MySQL服务器，在查阅了相关资料后，总结了一下如何对MySQL进行设置远程访问服务器。在MySQL里面，root用户只允许本地连接。为了考虑安全性，我们需要设置一个远程登录的账户。</p></blockquote><a id="more"></a><ol><li><p>配置mysqld.cnf文件<br>不同的linux版本，这个文件的位置不同。<br>以ubuntu14为例：  该文件位置为  /etc/mysql/my.cnf<br>以ubuntu18为例：  该文件位置为  /etc/mysql/mysql.conf.d/mysqld.cnf<br>编辑该文件，将 <code>bind-address = 127.0.0.1</code> 用#注释起来。</p></li><li><p>建一个远程账户<br>用root账户登录mysql : <code>#mysql -uroot  -p</code><br><code>mysql&gt; GRANT ALL ON *.* TO admin@&#39;%&#39; IDENTIFIED BY &#39;xxxx&#39; WITH GRANT OPTION;</code><br>这句话的意思 ，允许任何IP地址（上面的 % 就是这个意思）的电脑 用admin帐户  和密码（xxxx）来访问这个MySQL Server   </p></li><li><p>刷新权限<br><code>#flush privileges;</code></p></li><li><p>重新启动mysql服务<br><code>#service mysql restart</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本学习指南】第二章-入门</title>
      <link href="/2018/07/17/%E3%80%90shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A5%E9%97%A8/"/>
      <url>/2018/07/17/%E3%80%90shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="2-3-一个简单的脚本"><a href="#2-3-一个简单的脚本" class="headerlink" title="2.3 一个简单的脚本"></a>2.3 一个简单的脚本</h2><p>创建一个脚本，实现计算在当前系统上用户的个数<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; nusers             <span class="comment"># 建立文件，使用cat复制终端的输入</span></span></span><br><span class="line">who | wc -l                # 程序的内容</span><br><span class="line">^D                         # Ctrl-D 表示end-of-file</span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x nusers          <span class="comment"># 让文件拥有执行的权限</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./nusers                 <span class="comment"># 执行测试</span></span></span><br><span class="line">      6                    # 输出我们想要的结果</span><br></pre></td></tr></table></figure></div></p><a id="more"></a><h3 id="2-5-3-简单的echo输出"><a href="#2-5-3-简单的echo输出" class="headerlink" title="2.5.3 简单的echo输出"></a>2.5.3 简单的echo输出</h3><p>echo 在输出一行字符串的时候，会在末尾自动加入一个换行符，<br>在许多的版本中，echo看到第一个参数为 -n 时，会省略结尾的换行符号，例如：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@us1804 echo "Enter your name "</span><br><span class="line">Enter your name </span><br><span class="line">root@us1804 echo -n "Enter your name "</span><br><span class="line">Enter your name root@us1804</span><br></pre></td></tr></table></figure></div></p><h3 id="2-5-4-华丽的printf输出"><a href="#2-5-4-华丽的printf输出" class="headerlink" title="2.5.4 华丽的printf输出"></a>2.5.4 华丽的printf输出</h3><p>printf命令模仿了C程序库里的printf()库程序。printf命令与echo命令最大的不同在于，printf不会像echo那样能够自动的提供一个换行符，必须要显示的指定换行符号\n。</p><p>printf命令的完整语法分为两部分：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format-string [arguments ...]</span><br></pre></td></tr></table></figure></div></p><p>第一部分是一个字符串，包含按字面显示的字符和格式声明。<br>第二部分是与格式声明相对于的参数列表，常用的格式声明有两个：%s 和 %d。<br>其中%s用于字符串，%d用于十进制整数；  </p><p>例如，%s用于字符串的输出：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@us1804 printf "The first program always prints %s,%s! \n" Hello world</span><br><span class="line">The first program always prints Hello,word! </span><br><span class="line">root@us1804</span><br></pre></td></tr></table></figure></div></p><h4 id="2-5-5-1-重定向与管道"><a href="#2-5-5-1-重定向与管道" class="headerlink" title="2.5.5.1 重定向与管道"></a>2.5.5.1 重定向与管道</h4><p>以 &lt; 改变标准输入 ：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d '\r' &lt; dos-file.txt</span><br></pre></td></tr></table></figure></div></p><p>以 &gt; 改变标准输出 ：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d '\r' &lt; dos-file.txt &gt; UNIX-file.txt</span><br></pre></td></tr></table></figure></div></p><p>以上这条命令会先以tr将dos-file.txt里的ASCII carriage-return（回车）删除，再将转换完成的数据输出到UNIX-file.txt。dos-file.txt里的原始数据不会有变化。</p><p>以 &gt;&gt; 附加到文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tr 命令详解 :</span><br><span class="line"></span><br><span class="line">Usage: tr [OPTION]... SET1 [SET2]</span><br><span class="line"></span><br><span class="line">Translate, squeeze, and/or delete characters from standard input,</span><br><span class="line">writing to standard output.</span><br><span class="line"></span><br><span class="line">-c, -C, --complement    use the complement of SET1</span><br><span class="line">将标准输入中的字符不在SET1中的内容，都替换为SET2中的字符  </span><br><span class="line"></span><br><span class="line">-d, --delete            delete characters in SET1, do not translate  </span><br><span class="line"></span><br><span class="line">-s, --squeeze-repeats   replace each sequence of a repeated character</span><br><span class="line">                    that is listed in the last specified SET,</span><br><span class="line">                    with a single occurrence of that character </span><br><span class="line">浓缩重复的字符，如果标准输入中有连续出现的SET1里面的字符，则将其浓缩为一个。如果有SET2参数，则代表浓缩为一个后替换为SET2所示参数。</span><br><span class="line"></span><br><span class="line">-t, --truncate-set1     first truncate SET1 to length of SET2</span><br><span class="line">将标准输入中的SET1中的内容替换为SET2中的内容，替换的内容为从SET1开始等字符长度替换。</span><br></pre></td></tr></table></figure></div><h4 id="2-5-5-2-特殊文件：-dev-null-和-dev-tty"><a href="#2-5-5-2-特殊文件：-dev-null-和-dev-tty" class="headerlink" title="2.5.5.2 特殊文件： /dev/null 和 /dev/tty"></a>2.5.5.2 特殊文件： /dev/null 和 /dev/tty</h4><p>/dev/null,就是位桶（bit bucket）. 传送到此文件的数据都会被系统丢掉。<br>如果你需要的是命令的退出状态，而非它的输入，此功能会很有用。</p><p>/dev/tty当程序打开此文件时，UNIX会自动将它重定向到一个终端或串行端口。例如下脚本：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">printf "Enter new password:\n"  # 提示输入</span><br><span class="line">stty -echo                      # 关闭自动打印输入字符的功能，打开输入的终端</span><br><span class="line">read pass &lt; /dev/tty            # 读取密码</span><br><span class="line">printf "Enter again:\n"         # 提示再输入一次</span><br><span class="line">read pass2 &lt; /dev/tty           # 再读取一次以确认</span><br><span class="line">stty echo                       # 打开自动打印输入字符的功能,关闭输入的终端</span><br></pre></td></tr></table></figure></div></p><h3 id="2-5-6-基本命令查找"><a href="#2-5-6-基本命令查找" class="headerlink" title="2.5.6 基本命令查找"></a>2.5.6 基本命令查找</h3><p>Shell会沿着查找路径$PATH来寻址命令。$PATH是一个以冒号分隔的目录列表，可以在列表所指定的目录下找到所要执行的命令。</p><p>查看当前的默认路径：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure></div></p><p>如果你想编写自己的脚本，最好准备自己的bin目录来存放它们，并且让Shell能够自动找到它们。做法为建立自己的bin目录，并将它加入$PATH中的列表即可:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@us1804: cd                     # 切换到home目录</span><br><span class="line">root@us1804: mkdir bin              # 建立个人bin目录</span><br><span class="line">root@us1804: mv nusers bin          # 将我们的脚本置入该目录</span><br><span class="line">root@us1804: PATH=$PATH:$HOME/bin   # 将个人的bin目录附加到PATH</span><br><span class="line">root@us1804: nusers                 # 试试看</span><br><span class="line">root@us1804: 6                      # Shell有找到它并执行</span><br></pre></td></tr></table></figure></div></p><p>若要让修改永久生效，在.profile文件中把你的bin目录加入$PATH,而每次登陆时Shell都将读取.profile文件。<br>$PAHT里的空项目表示当前目录。例如:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin::/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure></div></p><h2 id="2-6-访问Shell脚本的参数"><a href="#2-6-访问Shell脚本的参数" class="headerlink" title="2.6 访问Shell脚本的参数"></a>2.6 访问Shell脚本的参数</h2><p>在执行Shell脚本的时候可以附加参数，也就是命令行参数。<br>基于历史原因，当参数的个数超过9个的时候，就应该用大括号把数字框起来，例如：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo first arg is $1</span><br><span class="line">echo tench arg is $&#123;10&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="2-7-简单的执行跟踪"><a href="#2-7-简单的执行跟踪" class="headerlink" title="2.7 简单的执行跟踪"></a>2.7 简单的执行跟踪</h2><p>程序是人写的，难免会出错。如果想知道你的程序在做什么，有个好方法，就是把执行跟踪的功能打开。这会使得Shell显示每个被执行到的命令，并在前面加上”+”:一个加号后面跟着一个空格。例如：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh -x nusers           # 打开执行跟踪功能</span><br><span class="line">+ who                  # 被跟踪的功能</span><br><span class="line">+ wc -l                </span><br><span class="line">      7                # 实际的输出</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本】操作MySQL数据库相关脚本</title>
      <link href="/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E5%A4%87%E4%BB%BD%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E5%A4%87%E4%BB%BD%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备份整个库的脚本：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line">bak_date=`date -d today +"%Y%m%d"`  </span><br><span class="line">bak_path="/back/mysql/audit_2_54/$bak_date" </span><br><span class="line"></span><br><span class="line">for table_name in `echo "show tables;" | mysql -u$BACKUP_USER -p$BACKUP_PASSWORD -h$BACKUP_HOST -P$BACKUP_PORT $BACKUP_DB | grep -v Tables`;</span><br><span class="line">do</span><br><span class="line">  mysqldump -h$BACKUP_HOST -u$BACKUP_USER -p$BACKUP_PASSWORD -P$BACKUP_PORT --single-transaction --verbose --default-character-set=utf8 $BACKUP_DB $table_name | gzip &gt; $&#123;bak_path&#125;/BAK_"$table_name".sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div><hr><a id="more"></a><blockquote><p>备份库里面的部分表的脚本，需要借助外部文件存储要备份的部分表名：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line">bak_date=`date -d today +"%Y%m%d"`  </span><br><span class="line">bak_path="/back/mysql/audit_2_54/$bak_date" </span><br><span class="line"></span><br><span class="line">mkdir -pv $bak_path</span><br><span class="line"></span><br><span class="line">for table_name in `cat /back/mysql/audit_2_54/shell/bak.log`</span><br><span class="line">do</span><br><span class="line">  mysqldump -h$BACKUP_HOST -u$BACKUP_USER -p$BACKUP_PASSWORD -P$BACKUP_PORT --single-transaction --verbose --default-character-set=utf8 $BACKUP_DB $table_name | gzip &gt; $&#123;bak_path&#125;/BAK_"$table_name".sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div><hr><blockquote><p>删除库里部分表的脚本：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for table_name in `cat /root/audit_temp_del/del.log`</span><br><span class="line">do</span><br><span class="line"> delSqlStr="DROP TABLE $table_name " #删除表的SQL语句</span><br><span class="line"> mysql -u$DEL_USER -p$DEL_PASSWORD -h$DEL_HOST -P$DEL_PORT $DEL_DB -e "$delSqlStr"  #执行SQL语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div><blockquote><p>获取某个库里面的所有表的表名、表名注释、字段名、字段名注释信息</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指定数据库里面的所有表名，表名注释，字段名，字段名注释</span></span><br><span class="line"></span><br><span class="line">touch information.sql</span><br><span class="line"></span><br><span class="line">for table_name in `echo "show tables;" | mysql -uroot -proot -hlocalhost -P3306 audit | grep -v Tables`;</span><br><span class="line">do</span><br><span class="line">  sqlStr1="Select table_name 表名,TABLE_COMMENT 表注释 from INFORMATION_SCHEMA.TABLES Where table_schema='audit' and table_name='$table_name';"</span><br><span class="line">  mysql -uroot -proot -hlocalhost -P3306 audit -e "$sqlStr1" &gt;&gt; test  # 执行SQL语句</span><br><span class="line">  sqlStr2="select COLUMN_NAME 字段,COLUMN_COMMENT 字段注释 from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='audit' and TABLE_NAME='$table_name';"</span><br><span class="line">  mysql -uroot -proot -hlocalhost -P3306 audit -e "$sqlStr2" | grep -v 字段 &gt;&gt; test  # 执行SQL语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 【shell脚本】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本】逐行处理文本文件</title>
      <link href="/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E9%80%90%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E9%80%90%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-通过read命令完成"><a href="#1-通过read命令完成" class="headerlink" title="1.通过read命令完成"></a>1.通过read命令完成</h3><ul><li>read命令接收标准输入，或其他文件描述符的输入，得到输入后，read命令将数据放入一个标准变量中。</li><li>利用read读取文件时，每次调用read命令都会读取文件中的”一行”文本。</li><li>当文件没有可读的行时，read命令将以非零状态退出。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一种方式 </span></span><br><span class="line">cat data.dat | while read line</span><br><span class="line"> do</span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种方式</span></span><br><span class="line"> while read line</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done &lt; data.dat</span><br></pre></td></tr></table></figure></div></li></ul><a id="more"></a><h3 id="2-使用awk命令完成"><a href="#2-使用awk命令完成" class="headerlink" title="2.使用awk命令完成"></a>2.使用awk命令完成</h3><ul><li>awk是一种优良的文本处理工具，提供了极其强大的功能。</li><li><p>利用awk读取文件中的每行数据，并且可以对每行数据做一些处理，还可以单独处理每行数据里的每列数据。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat data.dat | awk '&#123;print $0&#125;'</span><br><span class="line">cat data.dat | awk '&#123;for(i=2;i&lt;NF;i++) &#123;printf $i&#125; printf "\n"&#125;'</span><br></pre></td></tr></table></figure></div></li><li><p>第1行代码输出data.dat里的每行数据，第2代码输出每行中从第2列之后的数据。<br>如果是单纯的数据或文本文件的按行读取和显示的话，使用awk命令比较方便。</p></li></ul><h3 id="3-使用for-var-in-file-命令完成"><a href="#3-使用for-var-in-file-命令完成" class="headerlink" title="3.使用for var in file 命令完成"></a>3.使用for var in file 命令完成</h3><ul><li><p>for var in file　表示变量var在file中循环取值，取值的分隔符由$IFS确定。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方案一</span></span><br><span class="line"> for line in $(cat data.dat)</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 方案二</span></span><br><span class="line"> for line in `cat data.dat`</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br></pre></td></tr></table></figure></div></li><li><p>如果输入文本每行中没有空格，则line在输入文本中按换行符分隔符循环取值。</p></li><li>如果输入文本中包括空格或制表符，则不是换行读取，line在输入文本中按空格分隔符或制表符或换行符特环取值。</li><li>可以通过把IFS设置为换行符来达到逐行读取的功能。</li><li>IFS的默认值为：空白(包括：空格，制表符，换行符)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 【shell脚本】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java遍历删除list中的元素</title>
      <link href="/2018/07/09/Java%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4list%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>/2018/07/09/Java%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4list%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>JAVA中循环遍历list有三种方式for循环、增强for循环（也就是常说的foreach循环）、iterator遍历。</p><hr><ol><li>for循环遍历list<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i).equals(<span class="string">"del"</span>))</span><br><span class="line">        list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><a id="more"></a><ul><li>这种方式的问题在于，删除某个元素后，list的大小发生了变化，而你的索引也在变化，所以会导致你在遍历的时候漏掉某些元素。比如当你删除第1个元素后，继续根据索引访问第2个元素时，因为删除的关系后面的元素都往前移动了一位，所以实际访问的是第3个元素。因此，这种方式可以用在删除特定的一个元素时使用，但不适合循环删除多个元素时使用。</li><li>对于for循环遍历list的解决办法<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i).equals(<span class="string">"del"</span>)) &#123;</span><br><span class="line">        list.remove(i);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><hr><ol start="2"><li>增强for循环<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String x:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.equals(<span class="string">"del"</span>))</span><br><span class="line">        list.remove(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><ul><li>这种方式的问题在于，删除元素后继续循环会报错误信息ConcurrentModificationException，因为元素在使用的时候发生了并发的修改，导致异常抛出。但是删除完毕马上使用break跳出，则不会触发报错。</li></ul><hr><ol start="3"><li>iterator遍历<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String x = it.next();</span><br><span class="line">    <span class="keyword">if</span>(x.equals(<span class="string">"del"</span>))&#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><ul><li>这种方式可以正常的循环及删除。但要注意的是，使用iterator的remove方法，如果用list的remove方法同样会报上面提到的ConcurrentModificationException错误。</li></ul><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>（1）循环删除list中特定一个元素的，可以使用三种方式中的任意一种，但在使用中要注意上面分析的各个问题。</p><p>（2）循环删除list中多个元素的，应该使用迭代器iterator方式。或则for循环的修改版本。　　</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA获取当前时间的前一天或者前几天时间</title>
      <link href="/2018/07/09/JAVA%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E7%9A%84%E5%89%8D%E4%B8%80%E5%A4%A9%E6%88%96%E8%80%85%E5%89%8D%E5%87%A0%E5%A4%A9%E6%97%B6%E9%97%B4/"/>
      <url>/2018/07/09/JAVA%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E7%9A%84%E5%89%8D%E4%B8%80%E5%A4%A9%E6%88%96%E8%80%85%E5%89%8D%E5%87%A0%E5%A4%A9%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<ul><li>方案一：老方法，不推荐使用<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="comment">// 获取前一天的时间</span></span><br><span class="line">Date date=<span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime()-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure></div></li></ul><a id="more"></a><ul><li>方案二：推荐使用<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">Date date=<span class="keyword">new</span> Date();  </span><br><span class="line">Calendar calendar = Calendar.getInstance();  </span><br><span class="line">calendar.setTime(date);  </span><br><span class="line"><span class="comment">// 获取前一天的时间</span></span><br><span class="line">calendar.add(Calendar.DATE, -<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取后一天的时间</span></span><br><span class="line">calendar.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">date = calendar.getTime();  </span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
