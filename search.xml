<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>手动升级nextcloud</title>
      <link href="/2019/12/21/%E6%89%8B%E5%8A%A8%E5%8D%87%E7%BA%A7nextcloud/"/>
      <url>/2019/12/21/%E6%89%8B%E5%8A%A8%E5%8D%87%E7%BA%A7nextcloud/</url>
      
        <content type="html"><![CDATA[<ol><li><p>备份现有的Nextcloud Server数据库，数据目录和 config.php文件。</p><p>备份数据库<br>mysqldump -hlocalhost -uroot -proot nextcloud | gzip &gt; nextcloud.sql.gz</p></li></ol><a id="more"></a><ol start="2"><li><p>从nextcloud.com/install/下载最新的Nextcloud Server版本（存档文件）并将其解压缩 到当前安装之外的空目录中。</p><p>wget –no-check-certificate <a href="https://download.nextcloud.com/server/releases/nextcloud-17.0.0.zip" target="_blank" rel="noopener">https://download.nextcloud.com/server/releases/nextcloud-17.0.0.zip</a></p></li><li><p>停止Web服务器。</p><p>sudo systemctl stop apache2</p></li><li><p>重命名当前的Nextcloud目录nextcloud-old。</p><p>rm nextcloud-old<br>mv nextcloud nextcloud-old</p></li><li><p>解压缩新存档会创建一个nextcloud填充了新服务器文件的新目录。例如/var/www/html，将此目录及其内容复制到旧服务器的原始位置，以便再次使用/var/www/html/nextcloud。</p><p>unzip nextcloud-17.0.x.zip</p></li><li><p>将config.php文件从旧的Nextcloud目录复制到新的Nextcloud目录。</p><p>cp nextcloud-old/config/config.php nextcloud/config/</p></li><li><p>如果将data/目录保存在目录中，请将nextcloud/其从旧版本的Nextcloud复制到新目录中nextcloud/。<br>如果您将其保留在其外，nextcloud/则无需对其执行任何操作，因为其位置是使用原始配置进行的config.php，并且没有任何升级步骤会触及它。</p></li><li><p>如果您使用的是第三方应用程序，请查看新nextcloud/apps/ 目录以查看它们是否存在。<br>如果没有，请将它们从旧apps/ 目录复制到新目录。确保第三方应用程序目录的目录权限与其他目录权限相同。</p><p>cp nextcloud-old/apps/calendar/ -r nextcloud/apps/<br>cp nextcloud-old/apps/twofactor_totp/ -r nextcloud/apps/<br>cp nextcloud-old/apps/news/ -r nextcloud/apps/<br>cp nextcloud-old/apps/files_markdown/ -r nextcloud/apps/</p></li><li><p>调整文件所有权和权限：</p><p>chown -R www-data:www-data nextcloud<br>find nextcloud/ -type d -exec chmod 750 {} \;<br>find nextcloud/ -type f -exec chmod 640 {} \;</p></li><li><p>重新启动Web服务器。</p><p>sudo systemctl start apache2</p></li><li><p>现在使用命令行启动升级occ，就像Ubuntu Linux上的这个例子一样：</p><p>cd nextcloud<br>sudo -u www-data php occ upgrade</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> nextcloud </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>feilong源码学习-AggregateUtil</title>
      <link href="/2019/12/20/feilong%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-AggregateUtil/"/>
      <url>/2019/12/20/feilong%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-AggregateUtil/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录feilong源码-AggregateUtil统计类学习笔记<br>AggregateUtil 是一个专门用来统计数据的一个工具类，有点类似于SQL里面的统计函数</p><hr><a id="more"></a><h2 id="feilong源码工具类特点"><a href="#feilong源码工具类特点" class="headerlink" title="feilong源码工具类特点"></a>feilong源码工具类特点</h2><ul><li><p>工具类灵活运用泛型</p><p>初次查看feilong源码，让我眼前一亮的是源码中的工具类能够做到特别灵活的运用java中的泛型，这样工具类的方法在被调用的时候可拓展性就非常的强，此时我想起了我自己之前在项目中写过的那几个工具类，好像也就项目自己能用用吧，拓展性可谈不上。</p></li><li><p>先做校验</p><p>在规范的开发过程中我们写方法之前都要做边缘验证，feilong源码中很好的体现了这一点，在每个方法之前都先做了校验;</p></li></ul><hr><h2 id="AggregateUtil类中相关知识点"><a href="#AggregateUtil类中相关知识点" class="headerlink" title="AggregateUtil类中相关知识点"></a>AggregateUtil类中相关知识点</h2><h3 id="Java参数类型后面三个点-String…-和数组-String-的区别"><a href="#Java参数类型后面三个点-String…-和数组-String-的区别" class="headerlink" title="Java参数类型后面三个点(String…)和数组(String[])的区别"></a>Java参数类型后面三个点(String…)和数组(String[])的区别</h3><p>java类型后面三个点(String…)，是从Java 5开始，是Java语言对方法参数支持一种新写法，叫可变长度参数列表，其语法就是类型后跟…，表示此处接受的参数为0到多个Object类型的对象，或者是一个Object[]。 </p><p>例如我们有一个方法叫做test(String…strings)，那么你还可以写方法test()，但你不能写test(String[] strings)，这样会出编译错误，系统提示出现重复的方法。</p><p>在使用的时候，对于test(String…strings)，你可以直接用test()去调用，标示没有参数，也可以用去test(“aaa”)，也可以用test(new String[]{“aaa”,”bbb”})。</p><p>另外如果既有test(String…strings)函数，又有test()函数，我们在调用test()时，会优先使用test()函数。只有当没有test()函数式，我们调用test()，程序才会走test(String…strings)。</p><hr><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 调用PropertyUtil类中的泛型方法getProperty(obj, propertyName)，指定方法返回类型为Number类型  </span><br><span class="line">PropertyUtil.&lt;Number&gt; getProperty(obj, propertyName)</span><br></pre></td></tr></table></figure><hr><h3 id="LRU算法原理与实践"><a href="#LRU算法原理与实践" class="headerlink" title="LRU算法原理与实践"></a>LRU算法原理与实践</h3><p><a href="https://www.jianshu.com/p/720dda0c418f" target="_blank" rel="noopener">原文链接</a></p><h4 id="LRU算法简介"><a href="#LRU算法简介" class="headerlink" title="LRU算法简介"></a>LRU算法简介</h4><p>在操作系统中进行内存管理时会采用一些页面置换算法，如LRU、LFU和FIFO等。其中LRU应用较为广泛。LRU的全称是Least Recently Used，即最近最少使用算法。</p><p>大家都知道在缓存的大小是有限的，那么我们应该基于什么策略进行缓存数据呢？LRU提供的思路是将最近没有使用的数据从缓存中移除，这样的思路在实际的环境中比较符合常识。</p><h4 id="LRU算法原理"><a href="#LRU算法原理" class="headerlink" title="LRU算法原理"></a>LRU算法原理</h4><p>LRU算法的原理比较简单，数据存储的数据结构为链表。当访问数据时，如缓存中有数据，则将该数据移动至链表的顶端；没有该数据则在顶端加入该数据，并移除链表中的底端的数据。</p><p>LRU涉及一个概念叫做缺页中断，缺页中断的次数即一次访问过程时没有没有在缓存中找到数据。</p><p>假如页面大小为3，序列为4、3、2、3、5，下面的缺页次数为4次</p><table><thead><tr><th>4</th><th>3</th><th>2</th><th>3</th><th>5</th></tr></thead><tbody><tr><td>4</td><td>3</td><td>2</td><td>3</td><td>5</td></tr><tr><td>null</td><td>4</td><td>3</td><td>2</td><td>3</td></tr><tr><td>null</td><td>null</td><td>4</td><td>4</td><td>2</td></tr><tr><td>缺页</td><td>缺页</td><td>缺页</td><td>不缺</td><td>缺页</td></tr></tbody></table><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>LRU算法原理较为简单，但是实现较为复杂，尤其是处理页面替换时，在Java中的LinkedHashMap的访问有序性恰好满足LRU的需求。下面通过LeetCode第146题描述下算法的实现过程</p><p>样例：</p><p>实现如下操作，且时间复杂度为O(1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* capacity */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // returns 1</span><br><span class="line">cache.put(3, 3);    // evicts key 2</span><br><span class="line">cache.get(2);       // returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    // evicts key 1</span><br><span class="line">cache.get(1);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3</span><br><span class="line">cache.get(4);       // returns 4</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class LRUCache &#123;</span><br><span class="line">    private LinkedHashMap&lt;Integer, Integer&gt; map;</span><br><span class="line">    private final int CAPACITY;</span><br><span class="line">    public LRUCache(int capacity) &#123;</span><br><span class="line">        CAPACITY = capacity;</span><br><span class="line">        map = new LinkedHashMap&lt;Integer, Integer&gt;(capacity, 0.75f, true)&#123;</span><br><span class="line">            protected boolean removeEldestEntry(Map.Entry eldest) &#123;</span><br><span class="line">                return size() &gt; CAPACITY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    public int get(int key) &#123;</span><br><span class="line">        return map.getOrDefault(key, -1);</span><br><span class="line">    &#125;</span><br><span class="line">    public void put(int key, int value) &#123;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Map相关知识"><a href="#Map相关知识" class="headerlink" title="Map相关知识"></a>Map相关知识</h2><p>在feilong-AggregateUtil类中，有好几处都巧用map，特此学习了一些map相关知识点记录于此。</p><h3 id="HashMap-LinkedHashMap-TreeMap什么时候用"><a href="#HashMap-LinkedHashMap-TreeMap什么时候用" class="headerlink" title="HashMap/LinkedHashMap/TreeMap什么时候用"></a>HashMap/LinkedHashMap/TreeMap什么时候用</h3><ul><li>HashMap 是线程不安全的哈希表，如果需要同步用Collections.synchronizedMap(map); 键不能重复，值可以，可以存储null键值，取数据无顺序之分</li><li>LinkedHashMap：是一个维持双向链表，是一个有序的Map，怎么put的进去的输出时怎么取出，FIFO的顺序</li><li>TreeMap： 在需要排序的时候使用，在一个map放入很多数据，需要按照什么规则排序显示的时候。</li></ul><h3 id="HashMap、HashTable的key和value是否可为null"><a href="#HashMap、HashTable的key和value是否可为null" class="headerlink" title="HashMap、HashTable的key和value是否可为null"></a>HashMap、HashTable的key和value是否可为null</h3><ul><li>HashMap对象的key、value值均可为null。  </li><li>HahTable对象的key、value值均不可为null。</li><li>且两者的的key值均不能重复，若添加key相同的键值对，后面的value会自动覆盖前面的value，但不会报错。</li></ul><p>参考链接：<br><a href="https://blog.csdn.net/justloveyou_/article/details/62893086" target="_blank" rel="noopener">Map 综述（一）：彻头彻尾理解 HashMap</a><br><a href="https://blog.csdn.net/justloveyou_/article/details/71713781" target="_blank" rel="noopener">Map 综述（二）：彻头彻尾理解 LinkedHashMap</a></p>]]></content>
      
      
      <categories>
          
          <category> feilong </category>
          
      </categories>
      
      
        <tags>
            
            <tag> feilong </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2019/12/20/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/12/20/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">参考链接</a></p><a id="more"></a><h2 id="Ubuntu18-04搭建Hexo博客"><a href="#Ubuntu18-04搭建Hexo博客" class="headerlink" title="Ubuntu18.04搭建Hexo博客"></a>Ubuntu18.04搭建Hexo博客</h2><ul><li><p>安装nodejs<br>sudo apt-get install nodejs</p></li><li><p>安装git<br>sudo apt-get install git</p></li><li><p>安装npm：<br>apt install npm</p></li><li><p>使用npm安装hexo<br>npm install -g hexo-cli</p></li><li><p>创建hexo文件夹<br>mkdir hexo<br>cd hexo</p></li><li><p>创建博客文件夹（在hexo目录下执行命令）<br>hexo init myhome<br>cd myhome</p></li><li><p>安装依赖<br>npm install</p></li><li><p>安装搜索<br>npm install hexo-generator-search –save</p></li><li><p>启动hexo服务（在myhome目录下执行命令）：<br>hexo s</p></li></ul><p>此时可以通过<a href="http://ip:4000访问" target="_blank" rel="noopener">http://ip:4000访问</a></p><p>发布新的文章：<br>hexo n “博客名字”</p><h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><ul><li><p>Git配置（在myhome目录下执行命令）：<br>cd myhome<br>git config –global user.name “username”   // username为你自己的github用户名<br>git config –global user.email “email”</p></li><li><p>生成秘钥：<br>ssh-keygen -t rsa -C “email”<br>连续3个回车。如果不需要密码的话。<br>如果不是第一次，就选择overwrite.</p></li><li><p>添加密钥到ssh-agent<br>eval “$(ssh-agent -s)”</p></li><li><p>添加生成的 SSH key 到 ssh-agent。<br>ssh-add ~/.ssh/id_rsa</p></li><li><p>登陆Github, 添加 ssh :<br>cat ~/.ssh/id_rsa.pub<br>把id_rsa.pub文件里的内容复制到github仓库里面的ssh配置里面，勾选可以读取。</p></li><li><p>测试：<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>选择yes<br>Hi humingx! You’ve successfully authenticated, but GitHub does not provide shell access.<br>如果看到Hi后面是你的用户名，就说明成功了。</p></li><li><p>配置文件配置</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_config.yml里最后一段的配置：</span><br><span class="line">#Deployment 这里设置了Git获</span><br><span class="line">#这里一定要注意不要写错了，否则部署到Github上会出问题</span><br><span class="line">#Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: &apos;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH/mm/ss&quot;)&#125;&#125;&apos;</span><br></pre></td></tr></table></figure><ul><li><p>安装git依赖：<br>command npm install hexo-deployer-git –save</p></li><li><p>编译<br>hexo g</p></li><li><p>部署 在myhome目录下 执行以下命令将自动更新到Github<br>hexo d</p></li><li><p>最后：<br>username.github.io<br>就可以访问博客了~</p></li><li><p>将自己的域名绑定到username.github.io域名上面：</p></li></ul><ol><li>解析自己的域名，记录类型为CNAME，记录值为username.github.io,主机记录为blog；</li><li>登录GitHub，进入仓库，点击settings，设置Custom domain，输入域名：blog.myhome.top</li><li>进入myhome/source目录下，vim CNAME    ,输入域名： blog.myhome.top  , 保存</li><li>进入myhome目录，依次输入命令：hexo clean 、   hexo g   、  hexo d</li><li>输入自己的域名blog.myhome.top,可以访问！</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>在myhome目录中的themes文件夹中查看自己的主题是什么  </p><p>下载主题到themes文件夹中<br>在myhome目录下下载next主题示例<br>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p><p>接下来修改主题为next<br>打开站点的_config.yml配置文件，修改主题为next：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"># theme: landscape</span><br><span class="line"># theme: next</span><br></pre></td></tr></table></figure><p>打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>next主题有四个样式，我用的是Pisces，选择你自己喜欢的样式，选择好后，再次部署网站，hexo clean 、 hexo g 、hexo d，查看效果。<br>选择其他主题，按照上述过程即可实现。</p><p>可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。<br>写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h2><p>在站点配置文件_config.yml修改基本的站点信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Jingwl&apos;s Blog</span><br><span class="line">subtitle: Hello,world</span><br><span class="line">description: Jingwl</span><br><span class="line">keywords:</span><br><span class="line">author: Jingwl</span><br><span class="line">avatar: # 网站头像外部链接</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure></p><p>依次是网站标题、副标题、网站描述、keywords、作者、网站头像外部链接、网站语言、时区等。</p><ul><li><p>在next主题的配置文件_config.yml中设置博文分享的插件jiathis，值设置为true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Share</span><br><span class="line">  jiathis: true</span><br><span class="line"># This plugin is more useful in China, make sure you known how to use it.</span><br><span class="line"># And you can find the use guide at official webiste: http://www.jiathis.com/.</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">#jiathis:</span><br><span class="line">  ##uid: Get this uid from http://www.jiathis.com/</span><br><span class="line">#add_this_id:</span><br></pre></td></tr></table></figure></li><li><p>增加侧栏菜单条目：<br>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。<br>如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about || user</span><br><span class="line">  tags: /tags || tags</span><br><span class="line">  archives: /archives || archive</span><br><span class="line">  categories: /categories || th</span><br><span class="line">  #schedule: /schedule/</span><br><span class="line">  #love: /love/</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  categories: th</span><br></pre></td></tr></table></figure><h2 id="文章模板设置"><a href="#文章模板设置" class="headerlink" title="文章模板设置"></a>文章模板设置</h2><p>修改文件<br>hexo/jingwl/scaffolds/post.md</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql 常用命令</title>
      <link href="/2019/12/20/sql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/12/20/sql-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本文记录一些工作与日常中会用到的一些SQL命令，需要用到的时候方便查找</p><a id="more"></a><h2 id="mysql-字段相关命令"><a href="#mysql-字段相关命令" class="headerlink" title="mysql 字段相关命令"></a>mysql 字段相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- mysql表新增字段</span><br><span class="line">ALTER TABLE table_name ADD filed INT(11) DEFAULT &apos;0&apos; COMMENT &apos;&apos;;</span><br><span class="line">-- 在指定字段名后新增字段</span><br><span class="line">ALTER TABLE table_name ADD filed DECIMAL(16,2) DEFAULT &apos;0.00&apos; COMMENT &apos;&apos; AFTER filed;</span><br><span class="line">-- hive表新增字段</span><br><span class="line">alter table tmp.tmp_20xx add columns(usr_id int);</span><br><span class="line"></span><br><span class="line">-- 表删除字段</span><br><span class="line">alter table t2 drop column c;</span><br><span class="line"></span><br><span class="line">-- 表修改字段类型</span><br><span class="line">ALTER TABLE DIM_INTEGRAL_TYPE MODIFY PRODUCT_ID int(5);</span><br><span class="line">-- 表修改字段名称类型</span><br><span class="line">ALTER TABLE table_name CHANGE old_field new_field VARCHAR(16) DEFAULT &apos;0&apos; COMMENT &apos;&apos;;</span><br></pre></td></tr></table></figure><h2 id="mysql-用戶及权限相关"><a href="#mysql-用戶及权限相关" class="headerlink" title="mysql 用戶及权限相关"></a>mysql 用戶及权限相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 更新mysql用户的密码</span><br><span class="line">use mysql</span><br><span class="line">update user set authentication_string=password(&apos;password&apos;) where user=&apos;user_name&apos;;</span><br><span class="line"></span><br><span class="line">-- 创建用户 host为localhost时，表示可本地登录；使用通配符%时，表示可以从任意远程主机登陆。</span><br><span class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class="line"></span><br><span class="line">-- 限制用户权限</span><br><span class="line">--‘db_test’为指定的数据库，’user_test’是限制的用户，’localhost’表示只能本地访问，如果想让远程IP访问，可将’localhost’换成’%’</span><br><span class="line">GRANT SELECT, INSERT, UPDATE, REFERENCES, DELETE, CREATE, DROP, ALTER, INDEX, CREATE VIEW, SHOW VIEW ON `db_test`.* TO &apos;user_test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure><h2 id="mysql-表及索引相关命令"><a href="#mysql-表及索引相关命令" class="headerlink" title="mysql 表及索引相关命令"></a>mysql 表及索引相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 修改表名</span><br><span class="line">ALTER  TABLE old_table RENAME TO new_table_name;</span><br><span class="line"></span><br><span class="line">-- 创建索引</span><br><span class="line">ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br><span class="line">ALTER TABLE table_name ADD UNIQUE (column_list);</span><br><span class="line">ALTER TABLE table_name ADD PRIMARY KEY (column_list);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">DROP INDEX index_name ON talbe_name;</span><br><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br><span class="line">ALTER TABLE table_name DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">-- 查找表的占用大小 数据大小 索引大小</span><br><span class="line">SELECT table_name as &apos;表名&apos; ,table_comment as &apos;表注释&apos;,table_rows as &apos;条数&apos;,data_length as &apos;数据大小&apos;,index_length as &apos;索引大小&apos;,(data_length + index_length) as &apos;总大小&apos;</span><br><span class="line">FROM information_schema.tables </span><br><span class="line">WHERE table_schema = &apos;fund&apos;</span><br><span class="line">-- ORDER BY data_length DESC</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">-- 查找库里所有表名表注释</span><br><span class="line">SELECT table_name 表名,TABLE_COMMENT 表注释 </span><br><span class="line">FROM INFORMATION_SCHEMA.TABLES </span><br><span class="line">WHERE table_schema=&apos;audit&apos; </span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">-- 修改表注释</span><br><span class="line">ALTER TABLE ODS_FP_FORECAST_AUTO_CALCULATION_INCOME_DATA COMMENT &apos;财务平台预测模块收入自动计算数据表&apos;;</span><br></pre></td></tr></table></figure><h2 id="mysql-dump相关命令"><a href="#mysql-dump相关命令" class="headerlink" title="mysql dump相关命令"></a>mysql dump相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 从服务器dump表</span><br><span class="line">mysqldump -uusername -ppasswd -h127.0.0.1 -P3306 db tablename &gt; /root/tablename.sql</span><br><span class="line">-- 从服务器dump表 附带 where 条件</span><br><span class="line">mysqldump -uusername -ppasswd -h127.0.0.1 -P3306 db tablename --where &quot;id &gt; 302 AND pay_type IN (1,10)&quot; &gt; /root/tablename.sql</span><br><span class="line">-- 备份整个数据库到1个文件</span><br><span class="line">mysqldump -uusername -ppasswd -h127.0.0.1 -P3306 --single-transaction --verbose --default-character-set=utf8 db_name | gzip &gt; /root/dbname.sql.gz</span><br></pre></td></tr></table></figure><h2 id="mysql-保留小数点相关命令"><a href="#mysql-保留小数点相关命令" class="headerlink" title="mysql 保留小数点相关命令"></a>mysql 保留小数点相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select cast(19.16558 as decimal(9,2))精确到几位</span><br><span class="line">select format(123.3434,3) 保留小数点后3位</span><br><span class="line">select round(123.5); 四舍五入</span><br><span class="line">select ceil(123.5);向上取整</span><br><span class="line">select floor(123.5);向下取整</span><br></pre></td></tr></table></figure><h2 id="mysql-端口修改"><a href="#mysql-端口修改" class="headerlink" title="mysql 端口修改"></a>mysql 端口修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看端口 : </span><br><span class="line">show global variables like &apos;port&apos;;</span><br><span class="line"></span><br><span class="line">修改端口 : </span><br><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">重启服务 ：</span><br><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><h2 id="mysql-创建表相关"><a href="#mysql-创建表相关" class="headerlink" title="mysql 创建表相关"></a>mysql 创建表相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 创建时间、更新时间</span><br><span class="line">INSERT_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;插入时间&apos;,</span><br><span class="line">UPDATE_TIME TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;更新时间&apos;,</span><br><span class="line"></span><br><span class="line">-- hive 建表语句</span><br><span class="line">CREATE TABLE tmp.table_name(</span><br><span class="line">  filed string comment &apos;&apos;, </span><br><span class="line">) comment &apos;&apos;</span><br><span class="line">PARTITIONED BY (log_date string)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">-- mysql 建表语句</span><br><span class="line">CREATE TABLE table_name (</span><br><span class="line">  ID int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;&apos;,</span><br><span class="line">  field varchar(16) NOT NULL COMMENT &apos;&apos;</span><br><span class="line">  INSERT_TIME timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;插入时间&apos;,</span><br><span class="line">  UPDATE_TIME timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`ID`),</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;&apos;</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git相关命令</title>
      <link href="/2019/12/15/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/12/15/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux下Git和GitHub环境的搭建"><a href="#Linux下Git和GitHub环境的搭建" class="headerlink" title="Linux下Git和GitHub环境的搭建"></a>Linux下Git和GitHub环境的搭建</h2><ol><li>安装Git，使用命令 <code>sudo apt-get install git</code></li><li>创建GitHub帐号</li></ol><a id="more"></a><ol start="3"><li>生成ssh key，使用命令 <code>ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code>，your_email是你的email<br>默认在用户的家目录下.ssh/id_rsa.pub文件里面</li><li>回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。</li><li>测试ssh key是否成功，使用命令<code>ssh -T git@github.com</code>，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</li><li>配置Git的配置文件，username和email<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//配置用户名</span><br><span class="line">git config --global user.name &quot;your name&quot;   </span><br><span class="line">//配置email</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="利用Git从本地上传到GitHub"><a href="#利用Git从本地上传到GitHub" class="headerlink" title="利用Git从本地上传到GitHub"></a>利用Git从本地上传到GitHub</h2><ol><li>进入要所要上传文件的目录输入命令<code>git init</code></li><li>创建一个本地仓库，使用命令 <code>git remote add origin git@github.com:yourName/yourRepo.git</code>，youname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库</li><li>比如你要添加一个文件xxx到本地仓库，使用命令 <code>git add xxx”，可以使用“git add .</code>自动判断添加哪些文件，然后把这个添加提交到本地的仓库，使用命令 <code>git commit -m &#39;说明这次的提交&#39;</code>，最后把本地仓库提交到远程的GitHub仓库，使用命令 <code>git push origin master</code></li></ol><h2 id="从GitHub克隆项目到本地"><a href="#从GitHub克隆项目到本地" class="headerlink" title="从GitHub克隆项目到本地"></a>从GitHub克隆项目到本地</h2><ol><li>到GitHub的某个仓库，然后复制右边的有个<code>HTTPS clone url</code></li><li>回到要存放的目录下，使用命令 <code>git clone https://github.com/chenguolin/scrapy.git</code>，url只是一个例子</li><li>如果本地的版本不是最新的，可以使用命令 <code>git fetch origin</code></li><li>把更新的内容合并到本地分支，可以使用命令 <code>git merge origin/master</code>，如果你不想手动去合并，那么你可以使用： <code>git pull origin master</code>，这个命令可以拉去最新版本并自动合并</li></ol><h2 id="GitHub的分支管理"><a href="#GitHub的分支管理" class="headerlink" title="GitHub的分支管理"></a>GitHub的分支管理</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol><li>创建一个本地分支： git branch &lt;新分支名字&gt;</li><li>将本地分支同步到GitHub上面： git push &lt;本地仓库名&gt; &lt;新分支名&gt;</li><li>切换到新建立的分支： git checkout &lt;新分支名&gt;</li><li>为你的分支加入一个新的远程端： git remote add &lt;远程端名字&gt; &lt;地址&gt;</li><li>查看当前仓库有几个分支: git branch</li></ol><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol><li>从本地删除一个分支： git branch -d &lt;分支名称&gt;</li><li>同步到GitHub上面删除这个分支： git push &lt;本地仓库名&gt; :&lt;GitHub端分支&gt;</li></ol><h2 id="不用一直输入密码"><a href="#不用一直输入密码" class="headerlink" title="不用一直输入密码"></a>不用一直输入密码</h2><ol><li>git config –global credential.helper store</li><li>git push origin your-branch   (会让你输入用户名和密码，这时你输入就好了，然后下次再git push /pull 的时候就不用密码)</li></ol><h2 id="fatal-refusing-to-merge-unrelated-histories-解决方法"><a href="#fatal-refusing-to-merge-unrelated-histories-解决方法" class="headerlink" title="fatal: refusing to merge unrelated histories 解决方法 :"></a>fatal: refusing to merge unrelated histories 解决方法 :</h2><p><code>git pull origin master --allow-unrelated-histories</code></p><h2 id="git仓库删除所有历史提交记录"><a href="#git仓库删除所有历史提交记录" class="headerlink" title="git仓库删除所有历史提交记录"></a>git仓库删除所有历史提交记录</h2><ol><li><p>Checkout<br><code>git checkout --orphan latest_branch</code></p></li><li><p>Add all the files<br><code>git add -A</code></p></li><li><p>Commit the changes<br><code>git commit -am &quot;commit message&quot;</code></p></li><li><p>Delete the branch<br><code>git branch -D master</code></p></li><li><p>Rename the current branch to master<br><code>git branch -m master</code></p></li><li><p>Finally, force update your repository<br><code>git push -f origin master</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux技巧</title>
      <link href="/2019/12/15/Linux%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/12/15/Linux%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>在此记录一些，日常与工作中经常会用到的一些Linux技巧，命令，算是做个小总结吧。</p><a id="more"></a><h4 id="批量替换文件内容"><a href="#批量替换文件内容" class="headerlink" title="批量替换文件内容"></a>批量替换文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 批量替换内容 ossfs-bj 批量替换为 ossfs/bj</span><br><span class="line">grep &quot;ossfs-bj&quot; -rl ./ | xargs sed -i &quot;s/ossfs-bj/ossfs\/bj/g&quot;</span><br></pre></td></tr></table></figure><h4 id="批量修改文件后缀"><a href="#批量修改文件后缀" class="headerlink" title="批量修改文件后缀"></a>批量修改文件后缀</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 把.html 后缀的改成 .php后缀</span><br><span class="line">rename &quot;s/.html/.php/&quot; *</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于【缓存穿透、缓存击穿、缓存雪崩、热点数据失效】问题的解决方案</title>
      <link href="/2019/12/15/%E5%85%B3%E4%BA%8E%E3%80%90%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E3%80%91%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/12/15/%E5%85%B3%E4%BA%8E%E3%80%90%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E3%80%91%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="本文转载自公众号：乔二爷"><a href="#本文转载自公众号：乔二爷" class="headerlink" title="本文转载自公众号：乔二爷"></a>本文转载自公众号：乔二爷</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNzk4MzA5MA==&amp;mid=2247483739&amp;idx=1&amp;sn=38c69ba17fd095b42d4e066758945434&amp;chksm=fadfe046cda86950ba42bedc5494103d60d6784b72f0e8706055de820ed47798662a8cdfadbb&amp;mpshare=1&amp;scene=24&amp;srcid=1215ey12YbzOMvQ1fRFkjXk4&amp;sharer_sharetime=1576400637960&amp;sharer_shareid=7f88951f2298e00bd399759b890669f4&amp;key=1ed37e8b659a14659809a4dd40a3ea4492a19eacc8e029628706ea45c76f9607a305be16d18731d1de51dfd7f45d3a8fc73fe08b0a2066400787e9a95d29d6d0becb6c4beb52e8cb0626ab3e0e4b9d17&amp;ascene=14&amp;uin=MTc1MDE0MjU0MA%3D%3D&amp;devicetype=Windows+10&amp;version=62070158&amp;lang=zh_CN&amp;exportkey=Aex2DynF56Bl3XfwAFKYoVk%3D&amp;pass_ticket=JYSNqtgLCu%2FkdnyOPXyetuJszOmD%2BG56jMtmr9mCjyYTl863bKvqf36zzIpLKC6b" target="_blank" rel="noopener">原文链接</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们的平常的项目中多多少少都会使用到缓存，因为一些数据我们没有必要每次查询的时候都去查询到数据库。特别是高 QPS 的系统，每次都去查询数据库，对于你的数据库来说将是灾难。</p><p>今天我们不牵涉多级缓存的知识，就把系统使用到的缓存方案，不管是一级还是多级的都统称为缓存，主要是为了讲述使用缓存的时候可能会遇到的一些问题以及一些解决办法。</p><p>我们使用缓存时，我们的业务系统大概的调用流程如下图：</p><p><img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-06.png" alt=""></p><p>当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能会出现一些现象。</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h3><p>正常情况下，我们去查询数据都是存在。那么请求去查询一条压根数据库中根本就不存在的数据，也就是缓存和数据库都查询不到这条数据，但是请求每次都会打到数据库上面去。</p><p>这种查询不存在数据的现象我们称为缓存穿透。</p><h3 id="缓存穿透带来的问题"><a href="#缓存穿透带来的问题" class="headerlink" title="缓存穿透带来的问题"></a>缓存穿透带来的问题</h3><p>试想一下，如果有黑客会对你的系统进行攻击，拿一个不存在的id 去查询数据，会产生大量的请求到数据库去查询。可能会导致你的数据库由于压力过大而宕掉。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="缓存空值"><a href="#缓存空值" class="headerlink" title="缓存空值"></a>缓存空值</h4><p>之所以会发生穿透，就是因为缓存中没有存储这些空数据的key。从而导致每次查询都到数据库去了。</p><p>那么我们就可以为这些key 设置的值设置为null 丢到缓存里面去。后面再出现查询这个key 的请求的时候，直接返回null ,就不用在到 数据库中去走一圈了。但是别忘了设置过期时间。</p><h4 id="BloomFilter"><a href="#BloomFilter" class="headerlink" title="BloomFilter"></a>BloomFilter</h4><p>BloomFilter 类似于一个hase set 用来判断某个元素（key）是否存在于某个集合中。</p><p>这种方式在大数据场景应用比较多，比如 Hbase 中使用它去判断数据是否在磁盘上。还有在爬虫场景判断url 是否已经被爬取过。</p><p>这种方案可以加在第一种方案中，在缓存之前在加一层 BloomFilter ，在查询的时候先去 BloomFilter 去查询 key 是否存在，如果不存在就直接返回，存在再走查 缓存 -&gt; 查 DB。</p><p>流程图如下：</p><p><img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-07.png" alt=""></p><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>针对于一些恶意攻击，攻击带过来的大量key 是不存在的，那么我们采用第一种方案就会缓存大量不存在 key 的数据。此时我们采用第一种方案就不合适了，我们完全可以先对使用第二种方案进行过滤掉这些key。</p><p>针对这种key 异常多，请求重复率比较低的数据，我们就没有必要进行缓存，使用第二种方案直接过滤掉。</p><p>对于空数据的key 有限的，重复率比较高的，我们则可以采用第一种方式进行缓存。</p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="什么是击穿"><a href="#什么是击穿" class="headerlink" title="什么是击穿"></a>什么是击穿</h3><p>缓存击穿是我们可能遇到的第二个使用缓存方案可能遇到的问题。</p><p>在平常高并发的系统中，大量的请求同时查询一个 key 时，此时 这个key 正好失效了，就会导致大量的请求都打到数据库上面去。这种现象我们成为击穿。</p><h3 id="会带来什么问题"><a href="#会带来什么问题" class="headerlink" title="会带来什么问题"></a>会带来什么问题</h3><p>会造成某一时刻数据库请求量过大，压力剧增。</p><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>上面的现象是多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上使用一个 互斥锁来锁住它。其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有缓存了，就直接走缓存。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="什么是缓存雪崩"><a href="#什么是缓存雪崩" class="headerlink" title="什么是缓存雪崩"></a>什么是缓存雪崩</h3><p>缓存雪崩的情况是说，当某一时刻发生大规模的缓存失效的情况。比如你的缓存服务宕机了，会有大量的请求进来直接打到DB上面。结果就是DB 称不住，挂掉。</p><h3 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="事前：使用集群缓存，保证缓存服务的高可用"><a href="#事前：使用集群缓存，保证缓存服务的高可用" class="headerlink" title="事前：使用集群缓存，保证缓存服务的高可用"></a>事前：使用集群缓存，保证缓存服务的高可用</h4><p>这种方案就是在发生雪崩前对缓存集群实现高可用，如果是使用 Redis，可以使用 主从+哨兵 ，Redis Cluster 来避免 Redis 全盘崩溃的情况。</p><h4 id="事中：使用-ehcache-本地缓存-Hystrix-限流-amp-降级-避免-MySQL-被打死的情况发生。"><a href="#事中：使用-ehcache-本地缓存-Hystrix-限流-amp-降级-避免-MySQL-被打死的情况发生。" class="headerlink" title="事中：使用 ehcache 本地缓存 + Hystrix 限流&amp;降级 ,避免 MySQL 被打死的情况发生。"></a>事中：使用 ehcache 本地缓存 + Hystrix 限流&amp;降级 ,避免 MySQL 被打死的情况发生。</h4><p>使用 ehcache 本地缓存的目的也是考虑在 Redis Cluster 完全不可用的时候，ehcache 本地缓存还能够支撑一阵。</p><p>使用 Hystrix 进行 限流 &amp; 降级 ，比如一秒来了5000个请求，我们可以设置假设只能有一秒 2000 个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑，然后去调用我们自己开发的降级组件（降级）。比如设置的一些默认值呀之类的。以此来保护最后的 MySQL 不会被大量的请求给打死。</p><h4 id="事后：开启-Redis-持久化机制，尽快恢复缓存集群"><a href="#事后：开启-Redis-持久化机制，尽快恢复缓存集群" class="headerlink" title="事后：开启 Redis 持久化机制，尽快恢复缓存集群"></a>事后：开启 Redis 持久化机制，尽快恢复缓存集群</h4><p>一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</p><p>防止雪崩方案如下图所示：</p><p><img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-08.png" alt=""></p><h2 id="热点数据集中失效问题怎么解决"><a href="#热点数据集中失效问题怎么解决" class="headerlink" title="热点数据集中失效问题怎么解决"></a>热点数据集中失效问题怎么解决</h2><p>我们在设置缓存的时候，一般会给缓存设置一个失效时间，过了这个时间，缓存就失效了。对于一些热点的数据来说，当缓存失效以后会存在大量的请求过来，然后打到数据库去，从而可能导致数据库崩溃的情况。</p><h3 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="设置不同的失效时间"><a href="#设置不同的失效时间" class="headerlink" title="设置不同的失效时间"></a>设置不同的失效时间</h4><p>为了避免这些热点的数据集中失效，那么我们在设置缓存过期时间的时候，我们让他们失效的时间错开。比如在一个基础的时间上加上或者减去一个范围内的随机值。</p><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>结合上面的击穿的情况，在第一个请求去查询数据库的时候对他加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。但是也是由于它会阻塞其他的线程，此时系统吞吐量会下降。需要结合实际的业务去考虑是否要这么做。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="noopener">缓存穿透，缓存击穿，缓存雪崩解决方案分析</a><br><a href="https://blog.csdn.net/wang0112233/article/details/79558612" target="_blank" rel="noopener">Redis缓存雪崩、缓存穿透、热点Key解决方案和分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下安装redis</title>
      <link href="/2019/12/15/Linux%E4%B8%8B%E5%AE%89%E8%A3%85redis/"/>
      <url>/2019/12/15/Linux%E4%B8%8B%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>wget <a href="http://download.redis.io/releases/redis-5.0.7.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.7.tar.gz</a></p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>tar -zxvf redis-5.0.7.tar.gz</p><a id="more"></a><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>cd redis-5.0.7 执行命令 make</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>cd redis-5.0.7/src 执行命令 make install</p><h4 id="内部一些文件的移动"><a href="#内部一些文件的移动" class="headerlink" title="内部一些文件的移动"></a>内部一些文件的移动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.7</span><br><span class="line">mkdir etc</span><br><span class="line">mkdir bin</span><br><span class="line">mv redis.conf etc/</span><br><span class="line">cd src</span><br><span class="line">mv mkreleasehdr.sh  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server  redis-trib.rb ../bin</span><br></pre></td></tr></table></figure><h4 id="配置Redis服务可后台启动"><a href="#配置Redis服务可后台启动" class="headerlink" title="配置Redis服务可后台启动"></a>配置Redis服务可后台启动</h4><p><code>vim redis-5.0.7/etc/redis.conf</code></p><p>搜索 <code>daemonize</code></p><p>将 no 改为 yes</p><h4 id="带上配置文件启动redis-server-可后台启动redis"><a href="#带上配置文件启动redis-server-可后台启动redis" class="headerlink" title="带上配置文件启动redis-server(可后台启动redis)"></a>带上配置文件启动redis-server(可后台启动redis)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.7/bin/</span><br><span class="line">./redis-server ../etc/redis.conf</span><br></pre></td></tr></table></figure><h4 id="客户端登录"><a href="#客户端登录" class="headerlink" title="客户端登录"></a>客户端登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.7/bin/</span><br><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><p>exit 命令退出客户端命令行</p><h4 id="Redis服务关闭"><a href="#Redis服务关闭" class="headerlink" title="Redis服务关闭"></a>Redis服务关闭</h4><p>pkill redis-server</p><h4 id="设置Redis密码"><a href="#设置Redis密码" class="headerlink" title="设置Redis密码"></a>设置Redis密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 默认无密码</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;&quot;</span><br><span class="line"># 设置请求密码</span><br><span class="line">127.0.0.1:6379&gt; config set requirepass 123</span><br><span class="line">OK</span><br><span class="line"># 获取密码，无权限，无法访问</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"># 认证密码</span><br><span class="line">127.0.0.1:6379&gt; auth 123</span><br><span class="line">OK</span><br><span class="line"># 认证通过后，获取密码</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;123&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="设置Redis可远程访问"><a href="#设置Redis可远程访问" class="headerlink" title="设置Redis可远程访问"></a>设置Redis可远程访问</h4><p>由于 redis 采用的安全策略，默认会只准许本地访问。需要通过简单配置，完成允许外网访问。</p><p>修改 redis 的配置文件，将所有 bind 信息全部屏蔽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># bind 192.168.1.100 10.0.0.1 </span><br><span class="line"># bind 192.168.1.8 </span><br><span class="line"># bind 127.0.0.1</span><br></pre></td></tr></table></figure><p>修改完成后，需要重新启动 redis 服务。</p><p>至此，就能够链接到 redis 服务，并且能够正确显示了。</p><p>链接远程Redis:</p><p><code>redis-cli -h host -p port -a password</code></p><p>强烈建议不要在公网访问 redis,因为 redis 的处理速度非常快，所以如果你的密码比较简单，很容易就会通过暴力破解破解出密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"># 150k passwords per second against a good box. This means that you should</span><br><span class="line"># use a very strong password otherwise it will be very easy to break.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis 数据类型</title>
      <link href="/2019/12/15/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/12/15/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p></blockquote><a id="more"></a><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><ul><li><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p></li><li><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比.png图片或者序列化的对象。</p></li><li><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET test &quot;test-string&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET test </span><br><span class="line">&quot;test-string&quot;</span><br></pre></td></tr></table></figure><p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 test，对应的值为 test-string。</p><p>注意：一个键最大能存储 512MB。</p><h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><p>Redis hash 是一个键值(key=&gt;value)对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 删除前面测试用过的key值test</span><br><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hmset test field1 &apos;test1&apos; field2 &apos;test2&apos; field3 &apos;test3&apos;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hget test field1</span><br><span class="line">&quot;test1&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget test field2</span><br><span class="line">&quot;test2&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget test field3</span><br><span class="line">&quot;test3&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget test field4</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>实例中我们使用了 Redis HMSET, HGET 命令，HMSET 设置了两个 field=&gt;value 对, HGET 获取对应 field 对应的 value。</p><p>每个 hash 可以存储 232 -1 键值对（40多亿）。</p><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush test redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush test mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush test mysql</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange test 0 10</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test mysql</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd test mysql</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS test</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>注意：以上实例中 mysql 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p><p>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。</p><h2 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 3 redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 2 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 1 mysql</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd test 1 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE test 0 1000</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h2 id="各个数据类型应用场景"><a href="#各个数据类型应用场景" class="headerlink" title="各个数据类型应用场景"></a>各个数据类型应用场景</h2><table><thead><tr><th>类型</th><th>简介</th><th>特性</th><th>场景</th></tr></thead><tbody><tr><td>String(字符串)</td><td>二进制安全</td><td>可以包含任何数据,比.png图片或者序列化的对象,一个键最大能存储512M</td><td>—</td></tr><tr><td>Hash(字典)</td><td>键值对集合,即编程语言中的Map类型</td><td>适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td>存储、读取、修改用户属性</td></tr><tr><td>List(列表)</td><td>链表(双向链表)</td><td>增删快,提供了操作某一段元素的API</td><td>1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td>Set(集合)</td><td>哈希表实现,元素不重复</td><td>1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td>1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td>Sorted Set(有序集合)</td><td>将Set中的元素增加一个权重参数score,元素按score有序排列</td><td>数据插入集合时,已经进行天然排序</td><td>1、排行榜 2、带权重的消息队列</td></tr></tbody></table><h2 id="Redis-笔记"><a href="#Redis-笔记" class="headerlink" title="Redis 笔记"></a>Redis 笔记</h2><p>注意：Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p><p>Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p><p>每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE test 0 1000</span><br><span class="line">1) &quot;mysql&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; ZRANGEBYSCORE test 0 1000</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379[1]&gt;</span><br></pre></td></tr></table></figure><p>Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个空Redis实例占用的内在只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis 简介</title>
      <link href="/2019/12/15/Redis-%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/12/15/Redis-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><a id="more"></a><p>Redis 与其他 key-value 缓存产品有以下三个特点：</p><ol><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ol><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h2><ul><li><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p></li><li><p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云 OSS 挂载到服务器</title>
      <link href="/2019/12/14/%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/12/14/%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E6%8C%82%E8%BD%BD%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://help.aliyun.com/document_detail/32196.html" target="_blank" rel="noopener">ecs服务器挂载ossfs官方教程</a></p><h3 id="获取用户AccessKey"><a href="#获取用户AccessKey" class="headerlink" title="获取用户AccessKey :"></a>获取用户AccessKey :</h3><p>登录阿里云OSS控制台，获取用户AccessKey：<br>AccessKeyID：xxxxxxxxxxxxxxxx<br>AccessKeySecret：xxxxxxxxxxxxxxxx</p><a id="more"></a><h3 id="在服务器创建ossfs密码文件"><a href="#在服务器创建ossfs密码文件" class="headerlink" title="在服务器创建ossfs密码文件"></a>在服务器创建ossfs密码文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo oss-jwl-bj:AccessKeyID:AccessKeySecret &gt; /etc/passwd-ossfs  </span><br><span class="line">chmod 640 /etc/passwd-ossfs</span><br></pre></td></tr></table></figure><h3 id="将Bucket挂载到指定目录"><a href="#将Bucket挂载到指定目录" class="headerlink" title="将Bucket挂载到指定目录"></a>将Bucket挂载到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /ossfs/bj/</span><br><span class="line">-- 内网  </span><br><span class="line">ossfs oss-jwl-bj /ossfs/bj/ -ourl=oss-cn-beijing-internal.aliyuncs.com -oallow_other -ononempty</span><br><span class="line">-- 外网  </span><br><span class="line">ossfs oss-jwl-bj /ossfs/bj/ -ourl=oss-cn-beijing.aliyuncs.com -oallow_other -ononempty</span><br></pre></td></tr></table></figure><h3 id="设置OSS开机自动挂载"><a href="#设置OSS开机自动挂载" class="headerlink" title="设置OSS开机自动挂载"></a>设置OSS开机自动挂载</h3><p>将上面的命令添加到以下文件中<br><code>vim /etc/rc.local</code></p><p>重启服务器测试oss是否开机挂载<br><code>df -h</code></p><h3 id="卸载硬盘"><a href="#卸载硬盘" class="headerlink" title="卸载硬盘"></a>卸载硬盘</h3><p><code>fusermount -u /ossfs/bj</code></p>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入分析Session和Cookie</title>
      <link href="/2019/12/11/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Session%E5%92%8CCookie/"/>
      <url>/2019/12/11/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Session%E5%92%8CCookie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5b7c1f4d6fb9a019f221ca14" target="_blank" rel="noopener">原文链接</a></p><a id="more"></a><h2 id="为什么需要cookie和session"><a href="#为什么需要cookie和session" class="headerlink" title="为什么需要cookie和session"></a>为什么需要cookie和session</h2><p>在Web发展史中，我们知道浏览器与服务器间采用的是http协议，而这种协议是无状态的，所以这就导致了服务器无法知道是谁在浏览网页，但很明显，一些网页需要知道用户的状态，例如登陆，购物车等。 </p><p>所以为了解决这一问题，先后出现了四种技术，分别是隐藏表单域，URL重写，cookie，session。而用的最多也是比较重要的就是cookie和session了。 </p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h3><ol><li>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。</li><li>浏览器需要保存这段数据，不得轻易删除。</li><li>此后每次浏览器访问该服务器，都必须带上这段数据。</li></ol><blockquote><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。</p></blockquote><h3 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a>Cookie的创建</h3><p>当前Cookie有两个版本，分别对应两种设置响应头：“Set-Cookie”和“Set-Cookie2”。<br>在Servlet中并不支持Set-Cookie2，所以我们来看看Set-Cookie的属性项：</p><table><thead><tr><th>属性项</th><th>属性介绍</th></tr></thead><tbody><tr><td>NAME=VALUE</td><td>键值对，可以设置保存的Key/Value，这里NAME不能和其他属性项名字一样</td></tr><tr><td>Expires</td><td>过期时间，在这个时间点后Cookie失效</td></tr><tr><td>Domain</td><td>生成Cookie域名</td></tr><tr><td>Path</td><td>该Cookie是在当前那个路径下生成的</td></tr><tr><td>Secure</td><td>加密设置，设置他之后，只会在SSH连接时才会回传该Cookie</td></tr></tbody></table><h3 id="属性中-Domain-的作用"><a href="#属性中-Domain-的作用" class="headerlink" title="属性中 Domain 的作用"></a>属性中 Domain 的作用</h3><p>在 cookie 中其属性 domain 的作用是：  </p><ul><li>决定了cookie的作用域</li></ul><p>cookie的作用域：</p><ul><li>cookie的作用域是domain本身以及domain下的所有子域名。</li></ul><p>为什么cookie无法设置除当前域名或者其父域名之外的其他domain？  </p><ul><li>这个是浏览器出于对cookie的保护造成的，也就是cookie无法跨域设置。</li></ul><p>为什么cookie的作用域一定要设置正确？  </p><ul><li>当我们给网站设置cookie时，在网站的其他域名下也会接收到这些cookie。这些没用的cookie看似不占多少流量，但如果对一个日PV千万的站点来说，那浪费的资源就不是一点点了。</li></ul><p>对于域名的设置有2点要注意的地方：</p><ol><li>在setcookie中省略domain参数，那么domain默认为当前域名。</li><li>domain参数可以设置父域名以及自身，但不能设置其它域名，包括子域名，否则cookie不起作用。</li></ol><h3 id="开始创建-Cookie"><a href="#开始创建-Cookie" class="headerlink" title="开始创建 Cookie"></a>开始创建 Cookie</h3><p>Web服务器通过发送一个称为Set-Cookie的http消息来创建一个Cookie：</p><p><code>Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</code></p><p>这里我们思考一个问题，当我们在服务器创建多个Cookie时，这些Cookie最终是在一个Header项中还是以独立的Header存在的呢？</p><ul><li>构建http返回字节流时是将Header中所有的项顺序写出，而没有进行任何修改。所以可以想象在浏览器在接收http返回的数据时是分别解析每一个Header项。</li></ul><p>++ 接着，在客户端进行保存，如何保存呢？这里又要对Cookie进行进一步的了解。 ++</p><h2 id="Cookie-的分类"><a href="#Cookie-的分类" class="headerlink" title="Cookie 的分类"></a>Cookie 的分类</h2><h3 id="会话级别的-Cookie"><a href="#会话级别的-Cookie" class="headerlink" title="会话级别的 Cookie"></a>会话级别的 Cookie</h3><p>所谓会话级别Cookie，就是在浏览器关闭之后Cookie就会失效。</p><h3 id="持久级别的-Cookie"><a href="#持久级别的-Cookie" class="headerlink" title="持久级别的 Cookie"></a>持久级别的 Cookie</h3><p>保存在硬盘的Cookie，只要设置了过期时间就是硬盘级别Cookie。</p><hr><p>好的，现在cookie保存在了客户端，当我们去请求一个URL时，浏览器会根据这个URL路径将符合条件的Cookie放在请求头中传给服务器。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>各位客官看到这里实属不易，但我们还是要想想，Cookie是有大小限制和数量限制的，并且越来越多的Cookie代表客户端和服务器的传输量增加，可不可以每次传的时候不传所有cookie值，而只传一个唯一ID，通过这个ID直接在服务器查找用户信息呢？答案是有的，这就是我们的session。</p><h3 id="理解Session"><a href="#理解Session" class="headerlink" title="理解Session"></a>理解Session</h3><h4 id="Session-是啥？"><a href="#Session-是啥？" class="headerlink" title="Session 是啥？"></a>Session 是啥？</h4><p>Session是基于Cookie来工作的，同一个客户端每次访问服务器时，只要当浏览器在第一次访问服务器时，服务器设置一个id并保存一些信息(例如登陆就保存用户信息，视具体情况)，并把这个id通过Cookie存到客户端，客户端每次和服务器交互时只传这个id，就可以实现维持浏览器和服务器的状态，而这个ID通常是NAME为JSESSIONID的一个Cookie。</p><h4 id="Session-有哈好处啊？"><a href="#Session-有哈好处啊？" class="headerlink" title="Session 有哈好处啊？"></a>Session 有哈好处啊？</h4><p>session 的信息是存储在服务器端，所以很好的解决了安全性问题</p><h4 id="让-Session-正常工作的4种方式"><a href="#让-Session-正常工作的4种方式" class="headerlink" title="让 Session 正常工作的4种方式"></a>让 Session 正常工作的4种方式</h4><ol><li>通过URL传递SessionID</li><li>通过Cookie传递SessionID</li><li>通过SSL传递SessionID</li><li>通过隐藏表单传递SessionID</li></ol><h4 id="Session-的工作时序图"><a href="#Session-的工作时序图" class="headerlink" title="Session 的工作时序图"></a>Session 的工作时序图</h4><p>我们先来看看 session 工作的时序图</p><p><img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-01.png" alt="session时序图"></p><h4 id="一、创建Session"><a href="#一、创建Session" class="headerlink" title="一、创建Session"></a>一、创建Session</h4><p>当客户端访问到服务器，服务器会为这个客户端通过request.getSession()方法创建一个Session，如果当前SessionID还没有对应的HttpSession对象，就创建一个新的，并添加到org.apache.catalina.Manager的sessions容器中保存，这就做到了对状态的保持。  </p><p>当然，这个SessionID是唯一的。  </p><p>一个常见的误解是以为session在有客户端访问时就被创建，然而事实是直到某server端程序调用 HttpServletRequest.getSession(true)这样的语句时才被创建。  </p><p>注意如果JSP没有显示的使用 <code>&lt;% @page session=&quot;false&quot;%&gt;</code> 关闭session，则JSP文件在编译成Servlet时将会自动加上这样一条语句 <code>HttpSession session = HttpServletRequest.getSession(true);</code><br>这也是JSP中隐含的 session对象的来历。<br>由于session会消耗内存资源，因此，如果不打算使用session，应该在所有的JSP中关闭它。</p><p>引申:</p><ol><li>访问*.html的静态资源因为不会被编译为Servlet，也就不涉及session的问题。</li><li>当JSP页面没有显式禁止session的时候，在打开浏览器第一次请求该jsp的时候，服务器会自动为其创建一个session，并赋予其一个sessionID，发送给客户端的浏览器。以后客户端接着请求本应用中其他资源的时候，会自动在请求头上添加：<br><code>Cookie:JSESSIONID=客户端第一次拿到的session ID</code><br>这样，服务器端在接到请求时候，就会收到session ID，并根据ID在内存中找到之前创建的session对象，提供给请求使用。这也是session使用的基本原理</li></ol><p>—-搞不懂这个，就永远不明白session的原理。</p><h4 id="二、session保存"><a href="#二、session保存" class="headerlink" title="二、session保存"></a>二、session保存</h4><p>session存放在哪里： </p><ul><li>服务器端的内存中。不过session可以通过特殊的方式做持久化管理。</li></ul><p>当Servlet容器关闭：</p><ul><li>StandardManager将持久化没过期的StandardSession对象(必须调用Servlet容器中的stop和start命令，不能直接kill)</li></ul><p>当Servlet容器重启时：</p><ul><li>StandardManager初始化会重读这个文件，解析出所有session对象。</li></ul><h4 id="三、session的销毁"><a href="#三、session的销毁" class="headerlink" title="三、session的销毁"></a>三、session的销毁</h4><p>这里有一个误区，也是我之前的错误理解，就是我将session的生命周期理解成一次会话，浏览器打开就创建，浏览器关闭就销毁，这样理解是错的！！  </p><ol><li>Session超时：超时指的是连续一定时间服务器没有收到该Session所对应客户端的请求，并且这个时间超过了服务器设置的Session超时的最大时间。</li><li>程序调用HttpSession.invalidate()</li><li>服务器关闭或服务停止</li></ol><h4 id="四、检查session失效"><a href="#四、检查session失效" class="headerlink" title="四、检查session失效"></a>四、检查session失效</h4><p>检查每个Session是否失效是在Tomcat的一个后台线程完成的(backgroundProcess()方法中)；除了后台进程检验session是否失效外，调用request.getSession()也会检查该session是否过期，当然，调用这种方法如果过期的话又会重新创建一个新的session。</p><h4 id="五、session的id是从哪里来的，sessionID是如何使用的"><a href="#五、session的id是从哪里来的，sessionID是如何使用的" class="headerlink" title="五、session的id是从哪里来的，sessionID是如何使用的"></a>五、session的id是从哪里来的，sessionID是如何使用的</h4><p>当客户端第一次请求session对象时候，服务器会为客户端创建一个session，并将通过特殊算法算出一个session的ID，用来标识该session对象，当浏览器下次（session继续有效时）请求别的资源的时候，浏览器会偷偷地将sessionID放置到请求头中，服务器接收到请求后就得到该请求的sessionID，服务器找到该id的session返还给请求者（Servlet）使用。一个会话只能有一个session对象，对session来说是只认id不认人。</p><h4 id="六、同一客户端机器多次请求同一个资源，session一样吗？"><a href="#六、同一客户端机器多次请求同一个资源，session一样吗？" class="headerlink" title="六、同一客户端机器多次请求同一个资源，session一样吗？"></a>六、同一客户端机器多次请求同一个资源，session一样吗？</h4><p>一般来说，每次请求都会新创建一个session。</p><p>其实，这个也不一定的，总结下：  </p><ol><li>对于多标签的浏览器（比如360浏览器）来说，在一个浏览器窗口中，多个标签同时访问一个页面，session是一个。 </li><li>对于多个浏览器窗口之间，同时或者相隔很短时间访问一个页面，session是多个的，和浏览器的进程有关。  </li><li>对于一个同一个浏览器窗口，直接录入url访问同一应用的不同资源，session是一样的。  </li></ol><h2 id="做个总结"><a href="#做个总结" class="headerlink" title="做个总结"></a>做个总结</h2><h3 id="相同点和不同点"><a href="#相同点和不同点" class="headerlink" title="相同点和不同点"></a>相同点和不同点</h3><h4 id="相同点-有关系的地方"><a href="#相同点-有关系的地方" class="headerlink" title="相同点(有关系的地方)"></a>相同点(有关系的地方)</h4><p>Session和Cookie都是为了让http协议又状态而存在<br>Session通过Cookie工作，Cookie传输的SessionID让Session知道这个客户端到底是谁</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>Session将信息保存到服务器，Cookie将信息保存在客户端</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>当浏览器第一次访问服务器时，服务器创建Session并将SessionID通过Cookie带给浏览器保存在客户端，同时服务器根据业务逻辑保存相应的客户端信息保存在session中；客户端再访问时上传Cookie，服务器得到Cookie后获取里面的SessionID，来维持状态。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现开根号sqrt</title>
      <link href="/2018/12/09/%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%A0%B9%E5%8F%B7sqrt/"/>
      <url>/2018/12/09/%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%A0%B9%E5%8F%B7sqrt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513476&amp;idx=1&amp;sn=9b88e4c10e56f5c980b03da7cacb9d21&amp;chksm=80d67a47b7a1f351cc0c7251966884053a7a1e4be9e6c83451aae93b7abad4bf428c32547741&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">原文参考链接</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个函数, 完成 开根号 的操作, 方法签名如下：</p><p>double sqrt(int v, double t)</p><a id="more"></a><h3 id="要求"><a href="#要求" class="headerlink" title="要求:"></a>要求:</h3><ul><li>不能调用系统库函数, 诸如 Math.sqrt(v) 之类的;</li></ul><ul><li>假设函数的返回结果为 r,  要求 r 要满足一定的误差条件， 用公式表达就是：    <img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-02.png" alt="image">,其中 <img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-03.png" alt="image">是真实的值,t  为给定的一个误差, 例如0.1 。   举例而言, 我调用你的接口 sqrt(9, 0.1) ， 返回值是3.05,    就满足上面的误差范围， 因为9的平方根是3 ，  |3.05 - 3| = 0.05  ， 0.05 是小于0.1的。   如果返回值是2.95 也是满足条件的。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">double</span> t)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span> || t == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">double</span> m = (<span class="keyword">double</span>)v/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> h = v;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> v2 = <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"第一条测试语句："</span>+m);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        v1 = m*m + t*t - <span class="number">2</span>*m*t;</span><br><span class="line">        v2 = m*m + t*t + <span class="number">2</span>*m*t;</span><br><span class="line">        System.out.println(<span class="string">"第二条测试语句："</span>+v1+<span class="string">"|"</span>+v2);</span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">        * 限定条件为：</span></span><br><span class="line"><span class="comment">        * 假设函数的返回结果为 r,  要求 r 要满足一定的误差条件， </span></span><br><span class="line"><span class="comment">        * 用公式表达就是：|r-根号下v| &lt;= t , </span></span><br><span class="line"><span class="comment">        * 其中 根号下v 是真实的值 ,t为给定的一个误差, 例如0.1 。</span></span><br><span class="line"><span class="comment">        * 转换表达式为：</span></span><br><span class="line"><span class="comment">        * r*r + t*t -2rt &lt;= v</span></span><br><span class="line"><span class="comment">        * r*r + t*t +2rt &gt;= v</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="keyword">if</span> ( v1 &lt;= v &amp;&amp; v2 &gt;= v )&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v1 &lt; v &amp;&amp; v2 &lt; v )&#123;</span><br><span class="line">                l = m;</span><br><span class="line">                m = (l + h)/<span class="number">2</span>;</span><br><span class="line">                System.out.println(<span class="string">"第三条测试语句："</span>+m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( v1 &gt; v &amp;&amp; v2 &gt; v )&#123;</span><br><span class="line">                h = m;</span><br><span class="line">                m = (h - l)/<span class="number">2</span> + l;</span><br><span class="line">                System.out.println(<span class="string">"第四条测试语句："</span>+m);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>两列数据去重问题</title>
      <link href="/2018/12/09/%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/09/%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="两列数据去重问题描述："><a href="#两列数据去重问题描述：" class="headerlink" title="两列数据去重问题描述："></a>两列数据去重问题描述：</h3><pre><code>现有两列数据，列A(发信人ID)，列B(收信人ID)，用户的ID为数字组成；我们称A和B为一对关系，可用C来表示：C=A&amp;B，对于C列在整个表中是没有重复值的；但是如果用D来表示：D=B&amp;A，那么D列和C列合并在一起会出现重复值；现在我们要解决的问题就是:将A、B组合当中的第一行或者第二行，去掉一行，保留一个唯一行。</code></pre><a id="more"></a> <ul><li>列子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A       B       C       D   </span><br><span class="line">1       2       12      21  </span><br><span class="line">2       1       21      12  </span><br><span class="line">3       4       34      43</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将C列放到一个集合中，对C列的集合进行遍历，如果当前元素（12）的置换结果（21）</span><br><span class="line">在集合C中，那么删除当前元素（12）。当C列集合迭代结束后，当前C列就实现了本题</span><br><span class="line">目当中的去重。</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该类实现数据去重 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">unique</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String[]&gt; list = <span class="keyword">new</span> ArrayList&lt;String[]&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        getList();</span><br><span class="line">        dataUnique(list);</span><br><span class="line">        output(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"/usr/java/files/unique/AB.txt"</span>)));</span><br><span class="line">            String line = br.readLine();</span><br><span class="line">            String[] temp = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (line!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                temp = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">                temp[<span class="number">0</span>] = line.split(<span class="string">"\t"</span>)[<span class="number">0</span>];</span><br><span class="line">                temp[<span class="number">1</span>] = line.split(<span class="string">"\t"</span>)[<span class="number">1</span>];</span><br><span class="line">                list.add(temp);</span><br><span class="line">                line = br.readLine();</span><br><span class="line">            &#125;   </span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123; </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据去重</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dataUnique</span><span class="params">(ArrayList&lt;String[]&gt; list)</span></span>&#123;</span><br><span class="line">        Iterator&lt;String[]&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            String[] temp = it.next();</span><br><span class="line">            <span class="comment">// int count = 0;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                <span class="comment">// count++;</span></span><br><span class="line">                <span class="keyword">if</span> (temp[<span class="number">0</span>].equals(list.get(i)[<span class="number">1</span>]) &amp;&amp; temp[<span class="number">1</span>].equals(list.get(i)[<span class="number">0</span>])) &#123;</span><br><span class="line">                    <span class="comment">// System.out.println("删除前："+list.size());</span></span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="comment">// System.out.println("删除后："+list.size());</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="comment">// System.out.println("遍历了多少次："+count);</span></span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出去重后的文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(ArrayList&lt;String[]&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"/usr/java/files/unique/unique.txt"</span>)));</span><br><span class="line">            <span class="keyword">for</span> (String[] temp : list) &#123;</span><br><span class="line">                bw.write(temp[<span class="number">0</span>]+<span class="string">"\t"</span>+temp[<span class="number">1</span>]+<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Mockito进行Java单元测试</title>
      <link href="/2018/12/08/%E4%BD%BF%E7%94%A8Mockito%E8%BF%9B%E8%A1%8CJava%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/12/08/%E4%BD%BF%E7%94%A8Mockito%E8%BF%9B%E8%A1%8CJava%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：桃子妈咪<br>链接：<a href="https://www.jianshu.com/p/3d6f76df21f9" target="_blank" rel="noopener">https://www.jianshu.com/p/3d6f76df21f9</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p></blockquote><blockquote><p>Google在3月份推出了一个关于Android MVP架构的官方Sample，除MVP架构本身之外，在这个Sample中配备了完善的单元测试用例，这对学习如何在Android中进行单元测试具有极高的价值。这篇文章主要是对其中使用的Mock框架-Mockito的学习总结。</p></blockquote><a id="more"></a><h4 id="什么是Mock？"><a href="#什么是Mock？" class="headerlink" title="什么是Mock？"></a>什么是Mock？</h4><p>Mock是虚拟对象，是为了模拟真实对象而创建的，这些虚拟对象的行为是可控的。为方便理解，可以把Mock视为『汽车碰撞实验』中的『假人』。<br><img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-04.png" alt="image"><br><img src="https://oss-jwl-bj.oss-cn-beijing.aliyuncs.com/graph-bed/2019/2019-12-15-05.png" alt="image"></p><h4 id="为什么需要Mock？"><a href="#为什么需要Mock？" class="headerlink" title="为什么需要Mock？"></a>为什么需要Mock？</h4><ol><li>真实软件架构中的对象行为是不确定的（eg:时间、对象的状态）</li><li>真实对象的一些状态又很难构造（eg:网络抖动）</li><li>真实对象在进行某种操作时需要很长时间，影响测试进度（eg:一些数据库的初始化）</li><li>TDD（测试驱动开发）要求先写测试代码，再进行开发，那么经常会出现真实对象还没有开发完成的现象，又或者真实对象是一个硬件，只能模拟</li><li>实际测试中需要关注真实对象如何被调用，真实对象内部状态如何</li></ol><p>上述的问题都是可以通过引入Mock来解决的。</p><h4 id="什么是Mockito？"><a href="#什么是Mockito？" class="headerlink" title="什么是Mockito？"></a>什么是Mockito？</h4><p>Mockito是用于Java单元测试的一个Mock框架。</p><h4 id="为什么选择Mockito？"><a href="#为什么选择Mockito？" class="headerlink" title="为什么选择Mockito？"></a>为什么选择Mockito？</h4><ol><li>Mockito是StackOverflow社区票选的最佳Java Mock框架</li><li>Github 中位于Top4的Library</li><li>使用简洁、优雅的API即可写出漂亮的单元测试用例，这些单元测试语法符合自然语言，方便阅读</li></ol><h4 id="Mockito可以完成哪些功能？"><a href="#Mockito可以完成哪些功能？" class="headerlink" title="Mockito可以完成哪些功能？"></a>Mockito可以完成哪些功能？</h4><ol><li>验证Mock对象某函数是否执行，执行次数</li><li>Mock对象某函数有返回值，可以设置返回值。对于void的函数，可以设置抛出异常（即常说的安装桩）</li><li>验证Mock对象函数执行顺序</li><li>参数匹配（有很多内建的参数，也可以自己实现），这样使得验证函数交互或者设置返回值更加灵活</li><li>可以捕获参数用于后续进一步验证或设置</li></ol><h4 id="Mockito常用API及使用方法"><a href="#Mockito常用API及使用方法" class="headerlink" title="Mockito常用API及使用方法"></a>Mockito常用API及使用方法</h4><ol><li>创建Mock对象-创建Mock对象有两种方法</li></ol><ul><li>使用mock函数 - <code>public static &lt;T&gt; T mock(Class&lt;T&gt; classToMock)</code></li><li>使用@Mock注释 - 但必须在@Test函数中初始化或使用内建的Junit Runner</li></ul><ol start="2"><li><p>验证Mock对象函数是否执行、执行次数 - <code>public static &lt;T&gt; T verify(T mock,VerificationMode mode)</code>，其中mode可以为times(x), atLeastOnce() 或者 never()<br><code>verify(mock, times(5)).someMethod(&quot;was called five times&quot;);</code><br><code>verify(mock, atLeast(2)).someMethod(&quot;was called at least two times&quot;);</code><br><code>verify(mock, atLeastOnce()).someMethod(anyString());</code></p></li><li><p>给模拟对象的有返回值的函数安装桩 -<br><code>when(methodCall).thenReturn() 或 when(methodCall).thenThrow()</code></p></li><li><p>给模拟对象返回void的函数安装桩 -<br><code>doThrow(new RuntimeException()).when(mockObject).methodCall();</code></p></li><li><p>参数匹配-Mockito默认使用java的equals判断函数参数值，但有时为了更加灵活，可以使用参数匹配功能<br><code>when(mockedObject.methodCall(anyInt())).thenReturn(&quot;element&quot;)</code> <code>when(mockedObject.contains(argThat(isValid())).thenReturn(&quot;element&quot;);//isValid()是自定义的参数匹配</code></p></li><li><p>验证模拟对象函数执行顺序<br><code>personDAL.add(any()); personDAL.getAll(); InOrder inOrder = inOrder(personDAL); inOrder.verify(personDAL).add(any()); inOrder.verify(personDAL).getAll();</code></p></li><li><p>捕获模拟对象函数参数，进一步验证捕获的参数<br><code>ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class); verify(mock).doSomething(argument.capture()); assertEquals(&quot;John&quot;, argument.getValue().getName());</code></p></li></ol><p>关于Mockito会继续根据实际项目进一步整理实践知识。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> test </tag>
            
            <tag> mockito </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件上传-FileItem类</title>
      <link href="/2018/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-FileItem%E7%B1%BB/"/>
      <url>/2018/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-FileItem%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="http://blog.csdn.net/smallhorn/article/details/7864658" target="_blank" rel="noopener">http://blog.csdn.net/smallhorn/article/details/7864658</a></p></blockquote><p> FileItem类的常用方法</p><hr><p>1.boolean  isFormField():</p><p>isFormField方法用来判断FileItem对象里面封装的数据是一个普通文本表单字段，还是一个文件表单字段。如果是普通文本表单字段，返回一个true否则返回一个false。因此可以用该方法判断是否是普通表单域还是文件上传表单域。</p><a id="more"></a><p>2.String getName():</p><p>getName方法用来获得文件上传字段中的文件名。</p><p>3.String getFieldName():</p><p>getFieldName方法用来返回表单标签的name属性的值。</p><p>4.void write(File file):</p><p>write方法将FileItem对象中的内容保存到某个指定的文件中。如果FileItem对象中的内容是保存在某个临时文件中，该方法完成后，临时文件可以会被删除。该方法也可以将普通表单字段保存在一个文件中，但最主要的用途是把上传的文件内容保存在本地文件系统中。</p><p>5.String getString():</p><p>getString()方法将FileItem对象中保存的数据流内容以一个字符串返回。它有两个重载形式。public java.lang.String getString()和public java.lang.String getString(java.lang.String encodeing) throws java.io.UnsupportedEncodingException。前者使用缺省的字符集编码将主体内容转换成字符串，后者使用参数指定的字符集编码。如果在读取普通表单字段元素的内容时，出现了乱码现象，可以调用第二个方法，并传入 正确的字符集编码名称。</p><p>6.String getContentType():</p><p>此方法用来获得上传文件的类型，即标段字段元素描述头属性“content-type”的值，如image/jpeg。如果FileItem对象对应的是普通的表单字段，将返回null。</p><p>7.boolean isInMemory():</p><p>判断FileItem对象封装的数据是保存在内存中还是硬盘中。</p><p>8.void  delete():</p><p>此方法用来清空FileItem对象中封装的主体内容，如果内容是被保存在临时文件中，该方法会把临时文件删除。</p><p>9.InputStream  getInputStream():</p><p>以流的形式返回上传文件的主体内容。</p><p>10.long  getSize():</p><p>返回上传文件的大小。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL设置远程访问服务器</title>
      <link href="/2018/07/20/MySQL%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/07/20/MySQL%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于工作中需要进行远程登录MySQL服务器，在查阅了相关资料后，总结了一下如何对MySQL进行设置远程访问服务器。在MySQL里面，root用户只允许本地连接。为了考虑安全性，我们需要设置一个远程登录的账户。</p></blockquote><a id="more"></a><ol><li><p>配置mysqld.cnf文件<br>不同的linux版本，这个文件的位置不同。<br>以ubuntu14为例：  该文件位置为  /etc/mysql/my.cnf<br>以ubuntu18为例：  该文件位置为  /etc/mysql/mysql.conf.d/mysqld.cnf<br>编辑该文件，将 <code>bind-address = 127.0.0.1</code> 用#注释起来。</p></li><li><p>建一个远程账户<br>用root账户登录mysql : <code>#mysql -uroot  -p</code><br><code>mysql&gt; GRANT ALL ON *.* TO admin@&#39;%&#39; IDENTIFIED BY &#39;xxxx&#39; WITH GRANT OPTION;</code><br>这句话的意思 ，允许任何IP地址（上面的 % 就是这个意思）的电脑 用admin帐户  和密码（xxxx）来访问这个MySQL Server   </p></li><li><p>刷新权限<br><code>#flush privileges;</code></p></li><li><p>重新启动mysql服务<br><code>#service mysql restart</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本学习指南】第二章-入门</title>
      <link href="/2018/07/17/%E3%80%90shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A5%E9%97%A8/"/>
      <url>/2018/07/17/%E3%80%90shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="2-3-一个简单的脚本"><a href="#2-3-一个简单的脚本" class="headerlink" title="2.3 一个简单的脚本"></a>2.3 一个简单的脚本</h2><p>创建一个脚本，实现计算在当前系统上用户的个数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat &gt; nusers             # 建立文件，使用cat复制终端的输入</span><br><span class="line">who | wc -l                # 程序的内容</span><br><span class="line">^D                         # Ctrl-D 表示end-of-file</span><br><span class="line"><span class="meta">$</span> chmod +x nusers          # 让文件拥有执行的权限</span><br><span class="line"><span class="meta">$</span> ./nusers                 # 执行测试</span><br><span class="line">      6                    # 输出我们想要的结果</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="2-5-3-简单的echo输出"><a href="#2-5-3-简单的echo输出" class="headerlink" title="2.5.3 简单的echo输出"></a>2.5.3 简单的echo输出</h3><p>echo 在输出一行字符串的时候，会在末尾自动加入一个换行符，<br>在许多的版本中，echo看到第一个参数为 -n 时，会省略结尾的换行符号，例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@us1804 echo "Enter your name "</span><br><span class="line">Enter your name </span><br><span class="line">root@us1804 echo -n "Enter your name "</span><br><span class="line">Enter your name root@us1804</span><br></pre></td></tr></table></figure></p><h3 id="2-5-4-华丽的printf输出"><a href="#2-5-4-华丽的printf输出" class="headerlink" title="2.5.4 华丽的printf输出"></a>2.5.4 华丽的printf输出</h3><p>printf命令模仿了C程序库里的printf()库程序。printf命令与echo命令最大的不同在于，printf不会像echo那样能够自动的提供一个换行符，必须要显示的指定换行符号\n。</p><p>printf命令的完整语法分为两部分：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format-string [arguments ...]</span><br></pre></td></tr></table></figure></p><p>第一部分是一个字符串，包含按字面显示的字符和格式声明。<br>第二部分是与格式声明相对于的参数列表，常用的格式声明有两个：%s 和 %d。<br>其中%s用于字符串，%d用于十进制整数；  </p><p>例如，%s用于字符串的输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@us1804 printf "The first program always prints %s,%s! \n" Hello world</span><br><span class="line">The first program always prints Hello,word! </span><br><span class="line">root@us1804</span><br></pre></td></tr></table></figure></p><h4 id="2-5-5-1-重定向与管道"><a href="#2-5-5-1-重定向与管道" class="headerlink" title="2.5.5.1 重定向与管道"></a>2.5.5.1 重定向与管道</h4><p>以 &lt; 改变标准输入 ：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d '\r' &lt; dos-file.txt</span><br></pre></td></tr></table></figure></p><p>以 &gt; 改变标准输出 ：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d '\r' &lt; dos-file.txt &gt; UNIX-file.txt</span><br></pre></td></tr></table></figure></p><p>以上这条命令会先以tr将dos-file.txt里的ASCII carriage-return（回车）删除，再将转换完成的数据输出到UNIX-file.txt。dos-file.txt里的原始数据不会有变化。</p><p>以 &gt;&gt; 附加到文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tr 命令详解 :</span><br><span class="line"></span><br><span class="line">Usage: tr [OPTION]... SET1 [SET2]</span><br><span class="line"></span><br><span class="line">Translate, squeeze, and/or delete characters from standard input,</span><br><span class="line">writing to standard output.</span><br><span class="line"></span><br><span class="line">-c, -C, --complement    use the complement of SET1</span><br><span class="line">将标准输入中的字符不在SET1中的内容，都替换为SET2中的字符  </span><br><span class="line"></span><br><span class="line">-d, --delete            delete characters in SET1, do not translate  </span><br><span class="line"></span><br><span class="line">-s, --squeeze-repeats   replace each sequence of a repeated character</span><br><span class="line">                    that is listed in the last specified SET,</span><br><span class="line">                    with a single occurrence of that character </span><br><span class="line">浓缩重复的字符，如果标准输入中有连续出现的SET1里面的字符，则将其浓缩为一个。如果有SET2参数，则代表浓缩为一个后替换为SET2所示参数。</span><br><span class="line"></span><br><span class="line">-t, --truncate-set1     first truncate SET1 to length of SET2</span><br><span class="line">将标准输入中的SET1中的内容替换为SET2中的内容，替换的内容为从SET1开始等字符长度替换。</span><br></pre></td></tr></table></figure><h4 id="2-5-5-2-特殊文件：-dev-null-和-dev-tty"><a href="#2-5-5-2-特殊文件：-dev-null-和-dev-tty" class="headerlink" title="2.5.5.2 特殊文件： /dev/null 和 /dev/tty"></a>2.5.5.2 特殊文件： /dev/null 和 /dev/tty</h4><p>/dev/null,就是位桶（bit bucket）. 传送到此文件的数据都会被系统丢掉。<br>如果你需要的是命令的退出状态，而非它的输入，此功能会很有用。</p><p>/dev/tty当程序打开此文件时，UNIX会自动将它重定向到一个终端或串行端口。例如下脚本：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">printf "Enter new password:\n"  # 提示输入</span><br><span class="line">stty -echo                      # 关闭自动打印输入字符的功能，打开输入的终端</span><br><span class="line">read pass &lt; /dev/tty            # 读取密码</span><br><span class="line">printf "Enter again:\n"         # 提示再输入一次</span><br><span class="line">read pass2 &lt; /dev/tty           # 再读取一次以确认</span><br><span class="line">stty echo                       # 打开自动打印输入字符的功能,关闭输入的终端</span><br></pre></td></tr></table></figure></p><h3 id="2-5-6-基本命令查找"><a href="#2-5-6-基本命令查找" class="headerlink" title="2.5.6 基本命令查找"></a>2.5.6 基本命令查找</h3><p>Shell会沿着查找路径$PATH来寻址命令。$PATH是一个以冒号分隔的目录列表，可以在列表所指定的目录下找到所要执行的命令。</p><p>查看当前的默认路径：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure></p><p>如果你想编写自己的脚本，最好准备自己的bin目录来存放它们，并且让Shell能够自动找到它们。做法为建立自己的bin目录，并将它加入$PATH中的列表即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@us1804: cd                     # 切换到home目录</span><br><span class="line">root@us1804: mkdir bin              # 建立个人bin目录</span><br><span class="line">root@us1804: mv nusers bin          # 将我们的脚本置入该目录</span><br><span class="line">root@us1804: PATH=$PATH:$HOME/bin   # 将个人的bin目录附加到PATH</span><br><span class="line">root@us1804: nusers                 # 试试看</span><br><span class="line">root@us1804: 6                      # Shell有找到它并执行</span><br></pre></td></tr></table></figure></p><p>若要让修改永久生效，在.profile文件中把你的bin目录加入$PATH,而每次登陆时Shell都将读取.profile文件。<br>$PAHT里的空项目表示当前目录。例如:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin::/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure></p><h2 id="2-6-访问Shell脚本的参数"><a href="#2-6-访问Shell脚本的参数" class="headerlink" title="2.6 访问Shell脚本的参数"></a>2.6 访问Shell脚本的参数</h2><p>在执行Shell脚本的时候可以附加参数，也就是命令行参数。<br>基于历史原因，当参数的个数超过9个的时候，就应该用大括号把数字框起来，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo first arg is $1</span><br><span class="line">echo tench arg is $&#123;10&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-7-简单的执行跟踪"><a href="#2-7-简单的执行跟踪" class="headerlink" title="2.7 简单的执行跟踪"></a>2.7 简单的执行跟踪</h2><p>程序是人写的，难免会出错。如果想知道你的程序在做什么，有个好方法，就是把执行跟踪的功能打开。这会使得Shell显示每个被执行到的命令，并在前面加上”+”:一个加号后面跟着一个空格。例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh -x nusers           # 打开执行跟踪功能</span><br><span class="line">+ who                  # 被跟踪的功能</span><br><span class="line">+ wc -l                </span><br><span class="line">      7                # 实际的输出</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本】操作MySQL数据库相关脚本</title>
      <link href="/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E5%A4%87%E4%BB%BD%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E5%A4%87%E4%BB%BD%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备份整个库的脚本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line">bak_date=`date -d today +"%Y%m%d"`  </span><br><span class="line">bak_path="/back/mysql/audit_2_54/$bak_date" </span><br><span class="line"></span><br><span class="line">for table_name in `echo "show tables;" | mysql -u$BACKUP_USER -p$BACKUP_PASSWORD -h$BACKUP_HOST -P$BACKUP_PORT $BACKUP_DB | grep -v Tables`;</span><br><span class="line">do</span><br><span class="line">  mysqldump -h$BACKUP_HOST -u$BACKUP_USER -p$BACKUP_PASSWORD -P$BACKUP_PORT --single-transaction --verbose --default-character-set=utf8 $BACKUP_DB $table_name | gzip &gt; $&#123;bak_path&#125;/BAK_"$table_name".sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><a id="more"></a><blockquote><p>备份库里面的部分表的脚本，需要借助外部文件存储要备份的部分表名：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line">bak_date=`date -d today +"%Y%m%d"`  </span><br><span class="line">bak_path="/back/mysql/audit_2_54/$bak_date" </span><br><span class="line"></span><br><span class="line">mkdir -pv $bak_path</span><br><span class="line"></span><br><span class="line">for table_name in `cat /back/mysql/audit_2_54/shell/bak.log`</span><br><span class="line">do</span><br><span class="line">  mysqldump -h$BACKUP_HOST -u$BACKUP_USER -p$BACKUP_PASSWORD -P$BACKUP_PORT --single-transaction --verbose --default-character-set=utf8 $BACKUP_DB $table_name | gzip &gt; $&#123;bak_path&#125;/BAK_"$table_name".sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><blockquote><p>删除库里部分表的脚本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for table_name in `cat /root/audit_temp_del/del.log`</span><br><span class="line">do</span><br><span class="line"> delSqlStr="DROP TABLE $table_name " #删除表的SQL语句</span><br><span class="line"> mysql -u$DEL_USER -p$DEL_PASSWORD -h$DEL_HOST -P$DEL_PORT $DEL_DB -e "$delSqlStr"  #执行SQL语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>获取某个库里面的所有表的表名、表名注释、字段名、字段名注释信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取指定数据库里面的所有表名，表名注释，字段名，字段名注释</span><br><span class="line"></span><br><span class="line">touch information.sql</span><br><span class="line"></span><br><span class="line">for table_name in `echo "show tables;" | mysql -uroot -proot -hlocalhost -P3306 audit | grep -v Tables`;</span><br><span class="line">do</span><br><span class="line">  sqlStr1="Select table_name 表名,TABLE_COMMENT 表注释 from INFORMATION_SCHEMA.TABLES Where table_schema='audit' and table_name='$table_name';"</span><br><span class="line">  mysql -uroot -proot -hlocalhost -P3306 audit -e "$sqlStr1" &gt;&gt; test  # 执行SQL语句</span><br><span class="line">  sqlStr2="select COLUMN_NAME 字段,COLUMN_COMMENT 字段注释 from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='audit' and TABLE_NAME='$table_name';"</span><br><span class="line">  mysql -uroot -proot -hlocalhost -P3306 audit -e "$sqlStr2" | grep -v 字段 &gt;&gt; test  # 执行SQL语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 【shell脚本】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本】逐行处理文本文件</title>
      <link href="/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E9%80%90%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E9%80%90%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-通过read命令完成"><a href="#1-通过read命令完成" class="headerlink" title="1.通过read命令完成"></a>1.通过read命令完成</h3><ul><li>read命令接收标准输入，或其他文件描述符的输入，得到输入后，read命令将数据放入一个标准变量中。</li><li>利用read读取文件时，每次调用read命令都会读取文件中的”一行”文本。</li><li>当文件没有可读的行时，read命令将以非零状态退出。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 第一种方式 </span><br><span class="line">cat data.dat | while read line</span><br><span class="line"> do</span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 第二种方式</span><br><span class="line"> while read line</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done &lt; data.dat</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="2-使用awk命令完成"><a href="#2-使用awk命令完成" class="headerlink" title="2.使用awk命令完成"></a>2.使用awk命令完成</h3><ul><li>awk是一种优良的文本处理工具，提供了极其强大的功能。</li><li><p>利用awk读取文件中的每行数据，并且可以对每行数据做一些处理，还可以单独处理每行数据里的每列数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat data.dat | awk '&#123;print $0&#125;'</span><br><span class="line">cat data.dat | awk '&#123;for(i=2;i&lt;NF;i++) &#123;printf $i&#125; printf "\n"&#125;'</span><br></pre></td></tr></table></figure></li><li><p>第1行代码输出data.dat里的每行数据，第2代码输出每行中从第2列之后的数据。<br>如果是单纯的数据或文本文件的按行读取和显示的话，使用awk命令比较方便。</p></li></ul><h3 id="3-使用for-var-in-file-命令完成"><a href="#3-使用for-var-in-file-命令完成" class="headerlink" title="3.使用for var in file 命令完成"></a>3.使用for var in file 命令完成</h3><ul><li><p>for var in file　表示变量var在file中循环取值，取值的分隔符由$IFS确定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 方案一</span><br><span class="line"> for line in $(cat data.dat)</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span> 方案二</span><br><span class="line"> for line in `cat data.dat`</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br></pre></td></tr></table></figure></li><li><p>如果输入文本每行中没有空格，则line在输入文本中按换行符分隔符循环取值。</p></li><li>如果输入文本中包括空格或制表符，则不是换行读取，line在输入文本中按空格分隔符或制表符或换行符特环取值。</li><li>可以通过把IFS设置为换行符来达到逐行读取的功能。</li><li>IFS的默认值为：空白(包括：空格，制表符，换行符)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 【shell脚本】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java遍历删除list中的元素</title>
      <link href="/2018/07/09/Java%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4list%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>/2018/07/09/Java%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4list%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>JAVA中循环遍历list有三种方式for循环、增强for循环（也就是常说的foreach循环）、iterator遍历。</p><hr><ol><li>for循环遍历list<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i).equals(<span class="string">"del"</span>))</span><br><span class="line">        list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ul><li>这种方式的问题在于，删除某个元素后，list的大小发生了变化，而你的索引也在变化，所以会导致你在遍历的时候漏掉某些元素。比如当你删除第1个元素后，继续根据索引访问第2个元素时，因为删除的关系后面的元素都往前移动了一位，所以实际访问的是第3个元素。因此，这种方式可以用在删除特定的一个元素时使用，但不适合循环删除多个元素时使用。</li><li>对于for循环遍历list的解决办法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i).equals(<span class="string">"del"</span>)) &#123;</span><br><span class="line">        list.remove(i);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li>增强for循环<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String x:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.equals(<span class="string">"del"</span>))</span><br><span class="line">        list.remove(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这种方式的问题在于，删除元素后继续循环会报错误信息ConcurrentModificationException，因为元素在使用的时候发生了并发的修改，导致异常抛出。但是删除完毕马上使用break跳出，则不会触发报错。</li></ul><hr><ol start="3"><li>iterator遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String x = it.next();</span><br><span class="line">    <span class="keyword">if</span>(x.equals(<span class="string">"del"</span>))&#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这种方式可以正常的循环及删除。但要注意的是，使用iterator的remove方法，如果用list的remove方法同样会报上面提到的ConcurrentModificationException错误。</li></ul><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>（1）循环删除list中特定一个元素的，可以使用三种方式中的任意一种，但在使用中要注意上面分析的各个问题。</p><p>（2）循环删除list中多个元素的，应该使用迭代器iterator方式。或则for循环的修改版本。　　</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA获取当前时间的前一天或者前几天时间</title>
      <link href="/2018/07/09/JAVA%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E7%9A%84%E5%89%8D%E4%B8%80%E5%A4%A9%E6%88%96%E8%80%85%E5%89%8D%E5%87%A0%E5%A4%A9%E6%97%B6%E9%97%B4/"/>
      <url>/2018/07/09/JAVA%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E7%9A%84%E5%89%8D%E4%B8%80%E5%A4%A9%E6%88%96%E8%80%85%E5%89%8D%E5%87%A0%E5%A4%A9%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<ul><li>方案一：老方法，不推荐使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="comment">// 获取前一天的时间</span></span><br><span class="line">Date date=<span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime()-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>方案二：推荐使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">Date date=<span class="keyword">new</span> Date();  </span><br><span class="line">Calendar calendar = Calendar.getInstance();  </span><br><span class="line">calendar.setTime(date);  </span><br><span class="line"><span class="comment">// 获取前一天的时间</span></span><br><span class="line">calendar.add(Calendar.DATE, -<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取后一天的时间</span></span><br><span class="line">calendar.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">date = calendar.getTime();  </span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
