<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>深入分析Session和Cookie</title>
      <link href="/2019/12/11/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Session%E5%92%8CCookie/"/>
      <url>/2019/12/11/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Session%E5%92%8CCookie/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要cookie和session"><a href="#为什么需要cookie和session" class="headerlink" title="为什么需要cookie和session"></a>为什么需要cookie和session</h2><p>在Web发展史中，我们知道浏览器与服务器间采用的是http协议，而这种协议是无状态的，所以这就导致了服务器无法知道是谁在浏览网页，但很明显，一些网页需要知道用户的状态，例如登陆，购物车等。 </p><p>所以为了解决这一问题，先后出现了四种技术，分别是隐藏表单域，URL重写，cookie，session。而用的最多也是比较重要的就是cookie和session了。 </p><a id="more"></a><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h3><ol><li>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。</li><li>浏览器需要保存这段数据，不得轻易删除。</li><li>此后每次浏览器访问该服务器，都必须带上这段数据。</li></ol><blockquote><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。</p></blockquote><h3 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a>Cookie的创建</h3><p>当前Cookie有两个版本，分别对应两种设置响应头：“Set-Cookie”和“Set-Cookie2”。<br>在Servlet中并不支持Set-Cookie2，所以我们来看看Set-Cookie的属性项：</p><table><thead><tr><th>属性项</th><th>属性介绍</th></tr></thead><tbody><tr><td>NAME=VALUE</td><td>键值对，可以设置保存的Key/Value，这里NAME不能和其他属性项名字一样</td></tr><tr><td>Expires</td><td>过期时间，在这个时间点后Cookie失效</td></tr><tr><td>Domain</td><td>生成Cookie域名</td></tr><tr><td>Path</td><td>该Cookie是在当前那个路径下生成的</td></tr><tr><td>Secure</td><td>加密设置，设置他之后，只会在SSH连接时才会回传该Cookie</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现开根号sqrt</title>
      <link href="/2018/12/09/%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%A0%B9%E5%8F%B7sqrt/"/>
      <url>/2018/12/09/%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%A0%B9%E5%8F%B7sqrt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513476&amp;idx=1&amp;sn=9b88e4c10e56f5c980b03da7cacb9d21&amp;chksm=80d67a47b7a1f351cc0c7251966884053a7a1e4be9e6c83451aae93b7abad4bf428c32547741&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">原文参考链接</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个函数, 完成 开根号 的操作, 方法签名如下：</p><p>double sqrt(int v, double t)</p><a id="more"></a><h3 id="要求"><a href="#要求" class="headerlink" title="要求:"></a>要求:</h3><ul><li>不能调用系统库函数, 诸如 Math.sqrt(v) 之类的;</li></ul><ul><li>假设函数的返回结果为 r,  要求 r 要满足一定的误差条件， 用公式表达就是：    <img src="https://github.com/chingwl/graph_bed/blob/master/blog/sqrt.jpg?raw=true" alt="image">,其中 <img src="https://github.com/chingwl/graph_bed/blob/master/blog/sqrt1.jpg?raw=true" alt="image">是真实的值,t  为给定的一个误差, 例如0.1 。   举例而言, 我调用你的接口 sqrt(9, 0.1) ， 返回值是3.05,    就满足上面的误差范围， 因为9的平方根是3 ，  |3.05 - 3| = 0.05  ， 0.05 是小于0.1的。   如果返回值是2.95 也是满足条件的。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">double</span> t)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span> || t == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">double</span> m = (<span class="keyword">double</span>)v/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> h = v;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> v1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> v2 = <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"第一条测试语句："</span>+m);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        v1 = m*m + t*t - <span class="number">2</span>*m*t;</span><br><span class="line">        v2 = m*m + t*t + <span class="number">2</span>*m*t;</span><br><span class="line">        System.out.println(<span class="string">"第二条测试语句："</span>+v1+<span class="string">"|"</span>+v2);</span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">        * 限定条件为：</span></span><br><span class="line"><span class="comment">        * 假设函数的返回结果为 r,  要求 r 要满足一定的误差条件， </span></span><br><span class="line"><span class="comment">        * 用公式表达就是：|r-根号下v| &lt;= t , </span></span><br><span class="line"><span class="comment">        * 其中 根号下v 是真实的值 ,t为给定的一个误差, 例如0.1 。</span></span><br><span class="line"><span class="comment">        * 转换表达式为：</span></span><br><span class="line"><span class="comment">        * r*r + t*t -2rt &lt;= v</span></span><br><span class="line"><span class="comment">        * r*r + t*t +2rt &gt;= v</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="keyword">if</span> ( v1 &lt;= v &amp;&amp; v2 &gt;= v )&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v1 &lt; v &amp;&amp; v2 &lt; v )&#123;</span><br><span class="line">                l = m;</span><br><span class="line">                m = (l + h)/<span class="number">2</span>;</span><br><span class="line">                System.out.println(<span class="string">"第三条测试语句："</span>+m);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( v1 &gt; v &amp;&amp; v2 &gt; v )&#123;</span><br><span class="line">                h = m;</span><br><span class="line">                m = (h - l)/<span class="number">2</span> + l;</span><br><span class="line">                System.out.println(<span class="string">"第四条测试语句："</span>+m);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>两列数据去重问题</title>
      <link href="/2018/12/09/%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/09/%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="两列数据去重问题描述："><a href="#两列数据去重问题描述：" class="headerlink" title="两列数据去重问题描述："></a>两列数据去重问题描述：</h3><pre><code>现有两列数据，列A(发信人ID)，列B(收信人ID)，用户的ID为数字组成；我们称A和B为一对关系，可用C来表示：C=A&amp;B，对于C列在整个表中是没有重复值的；但是如果用D来表示：D=B&amp;A，那么D列和C列合并在一起会出现重复值；现在我们要解决的问题就是:将A、B组合当中的第一行或者第二行，去掉一行，保留一个唯一行。</code></pre><a id="more"></a> <ul><li>列子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A       B       C       D   </span><br><span class="line">1       2       12      21  </span><br><span class="line">2       1       21      12  </span><br><span class="line">3       4       34      43</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将C列放到一个集合中，对C列的集合进行遍历，如果当前元素（12）的置换结果（21）</span><br><span class="line">在集合C中，那么删除当前元素（12）。当C列集合迭代结束后，当前C列就实现了本题</span><br><span class="line">目当中的去重。</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该类实现数据去重 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">unique</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String[]&gt; list = <span class="keyword">new</span> ArrayList&lt;String[]&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        getList();</span><br><span class="line">        dataUnique(list);</span><br><span class="line">        output(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"/usr/java/files/unique/AB.txt"</span>)));</span><br><span class="line">            String line = br.readLine();</span><br><span class="line">            String[] temp = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (line!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                temp = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">                temp[<span class="number">0</span>] = line.split(<span class="string">"\t"</span>)[<span class="number">0</span>];</span><br><span class="line">                temp[<span class="number">1</span>] = line.split(<span class="string">"\t"</span>)[<span class="number">1</span>];</span><br><span class="line">                list.add(temp);</span><br><span class="line">                line = br.readLine();</span><br><span class="line">            &#125;   </span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123; </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据去重</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dataUnique</span><span class="params">(ArrayList&lt;String[]&gt; list)</span></span>&#123;</span><br><span class="line">        Iterator&lt;String[]&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            String[] temp = it.next();</span><br><span class="line">            <span class="comment">// int count = 0;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                <span class="comment">// count++;</span></span><br><span class="line">                <span class="keyword">if</span> (temp[<span class="number">0</span>].equals(list.get(i)[<span class="number">1</span>]) &amp;&amp; temp[<span class="number">1</span>].equals(list.get(i)[<span class="number">0</span>])) &#123;</span><br><span class="line">                    <span class="comment">// System.out.println("删除前："+list.size());</span></span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="comment">// System.out.println("删除后："+list.size());</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="comment">// System.out.println("遍历了多少次："+count);</span></span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出去重后的文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(ArrayList&lt;String[]&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"/usr/java/files/unique/unique.txt"</span>)));</span><br><span class="line">            <span class="keyword">for</span> (String[] temp : list) &#123;</span><br><span class="line">                bw.write(temp[<span class="number">0</span>]+<span class="string">"\t"</span>+temp[<span class="number">1</span>]+<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Mockito进行Java单元测试</title>
      <link href="/2018/12/08/%E4%BD%BF%E7%94%A8Mockito%E8%BF%9B%E8%A1%8CJava%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/12/08/%E4%BD%BF%E7%94%A8Mockito%E8%BF%9B%E8%A1%8CJava%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：桃子妈咪<br>链接：<a href="https://www.jianshu.com/p/3d6f76df21f9" target="_blank" rel="noopener">https://www.jianshu.com/p/3d6f76df21f9</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p></blockquote><blockquote><p>Google在3月份推出了一个关于Android MVP架构的官方Sample，除MVP架构本身之外，在这个Sample中配备了完善的单元测试用例，这对学习如何在Android中进行单元测试具有极高的价值。这篇文章主要是对其中使用的Mock框架-Mockito的学习总结。</p></blockquote><a id="more"></a><h4 id="什么是Mock？"><a href="#什么是Mock？" class="headerlink" title="什么是Mock？"></a>什么是Mock？</h4><p>Mock是虚拟对象，是为了模拟真实对象而创建的，这些虚拟对象的行为是可控的。为方便理解，可以把Mock视为『汽车碰撞实验』中的『假人』。<br><img src="https://upload-images.jianshu.io/upload_images/1940444-9e5a2cb54c59b31d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400/format/webp" alt="image"><br><img src="https://upload-images.jianshu.io/upload_images/1940444-181b5c3c1e481881.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400/format/webp" alt="image"></p><h4 id="为什么需要Mock？"><a href="#为什么需要Mock？" class="headerlink" title="为什么需要Mock？"></a>为什么需要Mock？</h4><ol><li>真实软件架构中的对象行为是不确定的（eg:时间、对象的状态）</li><li>真实对象的一些状态又很难构造（eg:网络抖动）</li><li>真实对象在进行某种操作时需要很长时间，影响测试进度（eg:一些数据库的初始化）</li><li>TDD（测试驱动开发）要求先写测试代码，再进行开发，那么经常会出现真实对象还没有开发完成的现象，又或者真实对象是一个硬件，只能模拟</li><li>实际测试中需要关注真实对象如何被调用，真实对象内部状态如何</li></ol><p>上述的问题都是可以通过引入Mock来解决的。</p><h4 id="什么是Mockito？"><a href="#什么是Mockito？" class="headerlink" title="什么是Mockito？"></a>什么是Mockito？</h4><p>Mockito是用于Java单元测试的一个Mock框架。</p><h4 id="为什么选择Mockito？"><a href="#为什么选择Mockito？" class="headerlink" title="为什么选择Mockito？"></a>为什么选择Mockito？</h4><ol><li>Mockito是StackOverflow社区票选的最佳Java Mock框架</li><li>Github 中位于Top4的Library</li><li>使用简洁、优雅的API即可写出漂亮的单元测试用例，这些单元测试语法符合自然语言，方便阅读</li></ol><h4 id="Mockito可以完成哪些功能？"><a href="#Mockito可以完成哪些功能？" class="headerlink" title="Mockito可以完成哪些功能？"></a>Mockito可以完成哪些功能？</h4><ol><li>验证Mock对象某函数是否执行，执行次数</li><li>Mock对象某函数有返回值，可以设置返回值。对于void的函数，可以设置抛出异常（即常说的安装桩）</li><li>验证Mock对象函数执行顺序</li><li>参数匹配（有很多内建的参数，也可以自己实现），这样使得验证函数交互或者设置返回值更加灵活</li><li>可以捕获参数用于后续进一步验证或设置</li></ol><h4 id="Mockito常用API及使用方法"><a href="#Mockito常用API及使用方法" class="headerlink" title="Mockito常用API及使用方法"></a>Mockito常用API及使用方法</h4><ol><li>创建Mock对象-创建Mock对象有两种方法</li></ol><ul><li>使用mock函数 - <code>public static &lt;T&gt; T mock(Class&lt;T&gt; classToMock)</code></li><li>使用@Mock注释 - 但必须在@Test函数中初始化或使用内建的Junit Runner</li></ul><ol start="2"><li><p>验证Mock对象函数是否执行、执行次数 - <code>public static &lt;T&gt; T verify(T mock,VerificationMode mode)</code>，其中mode可以为times(x), atLeastOnce() 或者 never()<br><code>verify(mock, times(5)).someMethod(&quot;was called five times&quot;);</code><br><code>verify(mock, atLeast(2)).someMethod(&quot;was called at least two times&quot;);</code><br><code>verify(mock, atLeastOnce()).someMethod(anyString());</code></p></li><li><p>给模拟对象的有返回值的函数安装桩 -<br><code>when(methodCall).thenReturn() 或 when(methodCall).thenThrow()</code></p></li><li><p>给模拟对象返回void的函数安装桩 -<br><code>doThrow(new RuntimeException()).when(mockObject).methodCall();</code></p></li><li><p>参数匹配-Mockito默认使用java的equals判断函数参数值，但有时为了更加灵活，可以使用参数匹配功能<br><code>when(mockedObject.methodCall(anyInt())).thenReturn(&quot;element&quot;)</code> <code>when(mockedObject.contains(argThat(isValid())).thenReturn(&quot;element&quot;);//isValid()是自定义的参数匹配</code></p></li><li><p>验证模拟对象函数执行顺序<br><code>personDAL.add(any()); personDAL.getAll(); InOrder inOrder = inOrder(personDAL); inOrder.verify(personDAL).add(any()); inOrder.verify(personDAL).getAll();</code></p></li><li><p>捕获模拟对象函数参数，进一步验证捕获的参数<br><code>ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class); verify(mock).doSomething(argument.capture()); assertEquals(&quot;John&quot;, argument.getValue().getName());</code></p></li></ol><p>关于Mockito会继续根据实际项目进一步整理实践知识。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> test </tag>
            
            <tag> mockito </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件上传-FileItem类</title>
      <link href="/2018/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-FileItem%E7%B1%BB/"/>
      <url>/2018/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-FileItem%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="http://blog.csdn.net/smallhorn/article/details/7864658" target="_blank" rel="noopener">http://blog.csdn.net/smallhorn/article/details/7864658</a></p></blockquote><p> FileItem类的常用方法</p><hr><p>1.boolean  isFormField():</p><p>isFormField方法用来判断FileItem对象里面封装的数据是一个普通文本表单字段，还是一个文件表单字段。如果是普通文本表单字段，返回一个true否则返回一个false。因此可以用该方法判断是否是普通表单域还是文件上传表单域。</p><a id="more"></a><p>2.String getName():</p><p>getName方法用来获得文件上传字段中的文件名。</p><p>3.String getFieldName():</p><p>getFieldName方法用来返回表单标签的name属性的值。</p><p>4.void write(File file):</p><p>write方法将FileItem对象中的内容保存到某个指定的文件中。如果FileItem对象中的内容是保存在某个临时文件中，该方法完成后，临时文件可以会被删除。该方法也可以将普通表单字段保存在一个文件中，但最主要的用途是把上传的文件内容保存在本地文件系统中。</p><p>5.String getString():</p><p>getString()方法将FileItem对象中保存的数据流内容以一个字符串返回。它有两个重载形式。public java.lang.String getString()和public java.lang.String getString(java.lang.String encodeing) throws java.io.UnsupportedEncodingException。前者使用缺省的字符集编码将主体内容转换成字符串，后者使用参数指定的字符集编码。如果在读取普通表单字段元素的内容时，出现了乱码现象，可以调用第二个方法，并传入 正确的字符集编码名称。</p><p>6.String getContentType():</p><p>此方法用来获得上传文件的类型，即标段字段元素描述头属性“content-type”的值，如image/jpeg。如果FileItem对象对应的是普通的表单字段，将返回null。</p><p>7.boolean isInMemory():</p><p>判断FileItem对象封装的数据是保存在内存中还是硬盘中。</p><p>8.void  delete():</p><p>此方法用来清空FileItem对象中封装的主体内容，如果内容是被保存在临时文件中，该方法会把临时文件删除。</p><p>9.InputStream  getInputStream():</p><p>以流的形式返回上传文件的主体内容。</p><p>10.long  getSize():</p><p>返回上传文件的大小。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL设置远程访问服务器</title>
      <link href="/2018/07/20/MySQL%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/07/20/MySQL%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于工作中需要进行远程登录MySQL服务器，在查阅了相关资料后，总结了一下如何对MySQL进行设置远程访问服务器。在MySQL里面，root用户只允许本地连接。为了考虑安全性，我们需要设置一个远程登录的账户。</p></blockquote><a id="more"></a><ol><li><p>配置mysqld.cnf文件<br>不同的linux版本，这个文件的位置不同。<br>以ubuntu14为例：  该文件位置为  /etc/mysql/my.cnf<br>以ubuntu18为例：  该文件位置为  /etc/mysql/mysql.conf.d/mysqld.cnf<br>编辑该文件，将 <code>bind-address = 127.0.0.1</code> 用#注释起来。</p></li><li><p>建一个远程账户<br>用root账户登录mysql : <code>#mysql -uroot  -p</code><br><code>mysql&gt; GRANT ALL ON *.* TO admin@&#39;%&#39; IDENTIFIED BY &#39;xxxx&#39; WITH GRANT OPTION;</code><br>这句话的意思 ，允许任何IP地址（上面的 % 就是这个意思）的电脑 用admin帐户  和密码（xxxx）来访问这个MySQL Server   </p></li><li><p>刷新权限<br><code>#flush privileges;</code></p></li><li><p>重新启动mysql服务<br><code>#service mysql restart</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本学习指南】第二章-入门</title>
      <link href="/2018/07/17/%E3%80%90shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A5%E9%97%A8/"/>
      <url>/2018/07/17/%E3%80%90shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="2-3-一个简单的脚本"><a href="#2-3-一个简单的脚本" class="headerlink" title="2.3 一个简单的脚本"></a>2.3 一个简单的脚本</h2><p>创建一个脚本，实现计算在当前系统上用户的个数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat &gt; nusers             # 建立文件，使用cat复制终端的输入</span><br><span class="line">who | wc -l                # 程序的内容</span><br><span class="line">^D                         # Ctrl-D 表示end-of-file</span><br><span class="line"><span class="meta">$</span> chmod +x nusers          # 让文件拥有执行的权限</span><br><span class="line"><span class="meta">$</span> ./nusers                 # 执行测试</span><br><span class="line">      6                    # 输出我们想要的结果</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="2-5-3-简单的echo输出"><a href="#2-5-3-简单的echo输出" class="headerlink" title="2.5.3 简单的echo输出"></a>2.5.3 简单的echo输出</h3><p>echo 在输出一行字符串的时候，会在末尾自动加入一个换行符，<br>在许多的版本中，echo看到第一个参数为 -n 时，会省略结尾的换行符号，例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@us1804 echo "Enter your name "</span><br><span class="line">Enter your name </span><br><span class="line">root@us1804 echo -n "Enter your name "</span><br><span class="line">Enter your name root@us1804</span><br></pre></td></tr></table></figure></p><h3 id="2-5-4-华丽的printf输出"><a href="#2-5-4-华丽的printf输出" class="headerlink" title="2.5.4 华丽的printf输出"></a>2.5.4 华丽的printf输出</h3><p>printf命令模仿了C程序库里的printf()库程序。printf命令与echo命令最大的不同在于，printf不会像echo那样能够自动的提供一个换行符，必须要显示的指定换行符号\n。</p><p>printf命令的完整语法分为两部分：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format-string [arguments ...]</span><br></pre></td></tr></table></figure></p><p>第一部分是一个字符串，包含按字面显示的字符和格式声明。<br>第二部分是与格式声明相对于的参数列表，常用的格式声明有两个：%s 和 %d。<br>其中%s用于字符串，%d用于十进制整数；  </p><p>例如，%s用于字符串的输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@us1804 printf "The first program always prints %s,%s! \n" Hello world</span><br><span class="line">The first program always prints Hello,word! </span><br><span class="line">root@us1804</span><br></pre></td></tr></table></figure></p><h4 id="2-5-5-1-重定向与管道"><a href="#2-5-5-1-重定向与管道" class="headerlink" title="2.5.5.1 重定向与管道"></a>2.5.5.1 重定向与管道</h4><p>以 &lt; 改变标准输入 ：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d '\r' &lt; dos-file.txt</span><br></pre></td></tr></table></figure></p><p>以 &gt; 改变标准输出 ：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d '\r' &lt; dos-file.txt &gt; UNIX-file.txt</span><br></pre></td></tr></table></figure></p><p>以上这条命令会先以tr将dos-file.txt里的ASCII carriage-return（回车）删除，再将转换完成的数据输出到UNIX-file.txt。dos-file.txt里的原始数据不会有变化。</p><p>以 &gt;&gt; 附加到文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tr 命令详解 :</span><br><span class="line"></span><br><span class="line">Usage: tr [OPTION]... SET1 [SET2]</span><br><span class="line"></span><br><span class="line">Translate, squeeze, and/or delete characters from standard input,</span><br><span class="line">writing to standard output.</span><br><span class="line"></span><br><span class="line">-c, -C, --complement    use the complement of SET1</span><br><span class="line">将标准输入中的字符不在SET1中的内容，都替换为SET2中的字符  </span><br><span class="line"></span><br><span class="line">-d, --delete            delete characters in SET1, do not translate  </span><br><span class="line"></span><br><span class="line">-s, --squeeze-repeats   replace each sequence of a repeated character</span><br><span class="line">                    that is listed in the last specified SET,</span><br><span class="line">                    with a single occurrence of that character </span><br><span class="line">浓缩重复的字符，如果标准输入中有连续出现的SET1里面的字符，则将其浓缩为一个。如果有SET2参数，则代表浓缩为一个后替换为SET2所示参数。</span><br><span class="line"></span><br><span class="line">-t, --truncate-set1     first truncate SET1 to length of SET2</span><br><span class="line">将标准输入中的SET1中的内容替换为SET2中的内容，替换的内容为从SET1开始等字符长度替换。</span><br></pre></td></tr></table></figure><h4 id="2-5-5-2-特殊文件：-dev-null-和-dev-tty"><a href="#2-5-5-2-特殊文件：-dev-null-和-dev-tty" class="headerlink" title="2.5.5.2 特殊文件： /dev/null 和 /dev/tty"></a>2.5.5.2 特殊文件： /dev/null 和 /dev/tty</h4><p>/dev/null,就是位桶（bit bucket）. 传送到此文件的数据都会被系统丢掉。<br>如果你需要的是命令的退出状态，而非它的输入，此功能会很有用。</p><p>/dev/tty当程序打开此文件时，UNIX会自动将它重定向到一个终端或串行端口。例如下脚本：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">printf "Enter new password:\n"  # 提示输入</span><br><span class="line">stty -echo                      # 关闭自动打印输入字符的功能，打开输入的终端</span><br><span class="line">read pass &lt; /dev/tty            # 读取密码</span><br><span class="line">printf "Enter again:\n"         # 提示再输入一次</span><br><span class="line">read pass2 &lt; /dev/tty           # 再读取一次以确认</span><br><span class="line">stty echo                       # 打开自动打印输入字符的功能,关闭输入的终端</span><br></pre></td></tr></table></figure></p><h3 id="2-5-6-基本命令查找"><a href="#2-5-6-基本命令查找" class="headerlink" title="2.5.6 基本命令查找"></a>2.5.6 基本命令查找</h3><p>Shell会沿着查找路径$PATH来寻址命令。$PATH是一个以冒号分隔的目录列表，可以在列表所指定的目录下找到所要执行的命令。</p><p>查看当前的默认路径：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure></p><p>如果你想编写自己的脚本，最好准备自己的bin目录来存放它们，并且让Shell能够自动找到它们。做法为建立自己的bin目录，并将它加入$PATH中的列表即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@us1804: cd                     # 切换到home目录</span><br><span class="line">root@us1804: mkdir bin              # 建立个人bin目录</span><br><span class="line">root@us1804: mv nusers bin          # 将我们的脚本置入该目录</span><br><span class="line">root@us1804: PATH=$PATH:$HOME/bin   # 将个人的bin目录附加到PATH</span><br><span class="line">root@us1804: nusers                 # 试试看</span><br><span class="line">root@us1804: 6                      # Shell有找到它并执行</span><br></pre></td></tr></table></figure></p><p>若要让修改永久生效，在.profile文件中把你的bin目录加入$PATH,而每次登陆时Shell都将读取.profile文件。<br>$PAHT里的空项目表示当前目录。例如:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin::/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure></p><h2 id="2-6-访问Shell脚本的参数"><a href="#2-6-访问Shell脚本的参数" class="headerlink" title="2.6 访问Shell脚本的参数"></a>2.6 访问Shell脚本的参数</h2><p>在执行Shell脚本的时候可以附加参数，也就是命令行参数。<br>基于历史原因，当参数的个数超过9个的时候，就应该用大括号把数字框起来，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo first arg is $1</span><br><span class="line">echo tench arg is $&#123;10&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-7-简单的执行跟踪"><a href="#2-7-简单的执行跟踪" class="headerlink" title="2.7 简单的执行跟踪"></a>2.7 简单的执行跟踪</h2><p>程序是人写的，难免会出错。如果想知道你的程序在做什么，有个好方法，就是把执行跟踪的功能打开。这会使得Shell显示每个被执行到的命令，并在前面加上”+”:一个加号后面跟着一个空格。例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh -x nusers           # 打开执行跟踪功能</span><br><span class="line">+ who                  # 被跟踪的功能</span><br><span class="line">+ wc -l                </span><br><span class="line">      7                # 实际的输出</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本】操作MySQL数据库相关脚本</title>
      <link href="/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E5%A4%87%E4%BB%BD%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E5%A4%87%E4%BB%BD%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备份整个库的脚本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line">bak_date=`date -d today +"%Y%m%d"`  </span><br><span class="line">bak_path="/back/mysql/audit_2_54/$bak_date" </span><br><span class="line"></span><br><span class="line">for table_name in `echo "show tables;" | mysql -u$BACKUP_USER -p$BACKUP_PASSWORD -h$BACKUP_HOST -P$BACKUP_PORT $BACKUP_DB | grep -v Tables`;</span><br><span class="line">do</span><br><span class="line">  mysqldump -h$BACKUP_HOST -u$BACKUP_USER -p$BACKUP_PASSWORD -P$BACKUP_PORT --single-transaction --verbose --default-character-set=utf8 $BACKUP_DB $table_name | gzip &gt; $&#123;bak_path&#125;/BAK_"$table_name".sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><a id="more"></a><blockquote><p>备份库里面的部分表的脚本，需要借助外部文件存储要备份的部分表名：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line">bak_date=`date -d today +"%Y%m%d"`  </span><br><span class="line">bak_path="/back/mysql/audit_2_54/$bak_date" </span><br><span class="line"></span><br><span class="line">mkdir -pv $bak_path</span><br><span class="line"></span><br><span class="line">for table_name in `cat /back/mysql/audit_2_54/shell/bak.log`</span><br><span class="line">do</span><br><span class="line">  mysqldump -h$BACKUP_HOST -u$BACKUP_USER -p$BACKUP_PASSWORD -P$BACKUP_PORT --single-transaction --verbose --default-character-set=utf8 $BACKUP_DB $table_name | gzip &gt; $&#123;bak_path&#125;/BAK_"$table_name".sql.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><blockquote><p>删除库里部分表的脚本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">BACKUP_HOST=host</span><br><span class="line">BACKUP_USER=user</span><br><span class="line">BACKUP_PASSWORD=passwd</span><br><span class="line">BACKUP_PORT=3306</span><br><span class="line">BACKUP_DB=db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for table_name in `cat /root/audit_temp_del/del.log`</span><br><span class="line">do</span><br><span class="line"> delSqlStr="DROP TABLE $table_name " #删除表的SQL语句</span><br><span class="line"> mysql -u$DEL_USER -p$DEL_PASSWORD -h$DEL_HOST -P$DEL_PORT $DEL_DB -e "$delSqlStr"  #执行SQL语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>获取某个库里面的所有表的表名、表名注释、字段名、字段名注释信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取指定数据库里面的所有表名，表名注释，字段名，字段名注释</span><br><span class="line"></span><br><span class="line">touch information.sql</span><br><span class="line"></span><br><span class="line">for table_name in `echo "show tables;" | mysql -uroot -proot -hlocalhost -P3306 audit | grep -v Tables`;</span><br><span class="line">do</span><br><span class="line">  sqlStr1="Select table_name 表名,TABLE_COMMENT 表注释 from INFORMATION_SCHEMA.TABLES Where table_schema='audit' and table_name='$table_name';"</span><br><span class="line">  mysql -uroot -proot -hlocalhost -P3306 audit -e "$sqlStr1" &gt;&gt; test  # 执行SQL语句</span><br><span class="line">  sqlStr2="select COLUMN_NAME 字段,COLUMN_COMMENT 字段注释 from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='audit' and TABLE_NAME='$table_name';"</span><br><span class="line">  mysql -uroot -proot -hlocalhost -P3306 audit -e "$sqlStr2" | grep -v 字段 &gt;&gt; test  # 执行SQL语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 【shell脚本】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【shell脚本】逐行处理文本文件</title>
      <link href="/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E9%80%90%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/15/%E3%80%90shell%E8%84%9A%E6%9C%AC%E3%80%91%E9%80%90%E8%A1%8C%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-通过read命令完成"><a href="#1-通过read命令完成" class="headerlink" title="1.通过read命令完成"></a>1.通过read命令完成</h3><ul><li>read命令接收标准输入，或其他文件描述符的输入，得到输入后，read命令将数据放入一个标准变量中。</li><li>利用read读取文件时，每次调用read命令都会读取文件中的”一行”文本。</li><li>当文件没有可读的行时，read命令将以非零状态退出。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 第一种方式 </span><br><span class="line">cat data.dat | while read line</span><br><span class="line"> do</span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 第二种方式</span><br><span class="line"> while read line</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done &lt; data.dat</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="2-使用awk命令完成"><a href="#2-使用awk命令完成" class="headerlink" title="2.使用awk命令完成"></a>2.使用awk命令完成</h3><ul><li>awk是一种优良的文本处理工具，提供了极其强大的功能。</li><li><p>利用awk读取文件中的每行数据，并且可以对每行数据做一些处理，还可以单独处理每行数据里的每列数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat data.dat | awk '&#123;print $0&#125;'</span><br><span class="line">cat data.dat | awk '&#123;for(i=2;i&lt;NF;i++) &#123;printf $i&#125; printf "\n"&#125;'</span><br></pre></td></tr></table></figure></li><li><p>第1行代码输出data.dat里的每行数据，第2代码输出每行中从第2列之后的数据。<br>如果是单纯的数据或文本文件的按行读取和显示的话，使用awk命令比较方便。</p></li></ul><h3 id="3-使用for-var-in-file-命令完成"><a href="#3-使用for-var-in-file-命令完成" class="headerlink" title="3.使用for var in file 命令完成"></a>3.使用for var in file 命令完成</h3><ul><li><p>for var in file　表示变量var在file中循环取值，取值的分隔符由$IFS确定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 方案一</span><br><span class="line"> for line in $(cat data.dat)</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span> 方案二</span><br><span class="line"> for line in `cat data.dat`</span><br><span class="line"> do </span><br><span class="line">     echo "File:$&#123;line&#125;"</span><br><span class="line"> done</span><br></pre></td></tr></table></figure></li><li><p>如果输入文本每行中没有空格，则line在输入文本中按换行符分隔符循环取值。</p></li><li>如果输入文本中包括空格或制表符，则不是换行读取，line在输入文本中按空格分隔符或制表符或换行符特环取值。</li><li>可以通过把IFS设置为换行符来达到逐行读取的功能。</li><li>IFS的默认值为：空白(包括：空格，制表符，换行符)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 【shell脚本】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java遍历删除list中的元素</title>
      <link href="/2018/07/09/Java%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4list%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>/2018/07/09/Java%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4list%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>JAVA中循环遍历list有三种方式for循环、增强for循环（也就是常说的foreach循环）、iterator遍历。</p><hr><ol><li>for循环遍历list<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i).equals(<span class="string">"del"</span>))</span><br><span class="line">        list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ul><li>这种方式的问题在于，删除某个元素后，list的大小发生了变化，而你的索引也在变化，所以会导致你在遍历的时候漏掉某些元素。比如当你删除第1个元素后，继续根据索引访问第2个元素时，因为删除的关系后面的元素都往前移动了一位，所以实际访问的是第3个元素。因此，这种方式可以用在删除特定的一个元素时使用，但不适合循环删除多个元素时使用。</li><li>对于for循环遍历list的解决办法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i).equals(<span class="string">"del"</span>)) &#123;</span><br><span class="line">        list.remove(i);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="2"><li>增强for循环<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String x:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.equals(<span class="string">"del"</span>))</span><br><span class="line">        list.remove(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这种方式的问题在于，删除元素后继续循环会报错误信息ConcurrentModificationException，因为元素在使用的时候发生了并发的修改，导致异常抛出。但是删除完毕马上使用break跳出，则不会触发报错。</li></ul><hr><ol start="3"><li>iterator遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String x = it.next();</span><br><span class="line">    <span class="keyword">if</span>(x.equals(<span class="string">"del"</span>))&#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>这种方式可以正常的循环及删除。但要注意的是，使用iterator的remove方法，如果用list的remove方法同样会报上面提到的ConcurrentModificationException错误。</li></ul><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>（1）循环删除list中特定一个元素的，可以使用三种方式中的任意一种，但在使用中要注意上面分析的各个问题。</p><p>（2）循环删除list中多个元素的，应该使用迭代器iterator方式。或则for循环的修改版本。　　</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA获取当前时间的前一天或者前几天时间</title>
      <link href="/2018/07/09/JAVA%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E7%9A%84%E5%89%8D%E4%B8%80%E5%A4%A9%E6%88%96%E8%80%85%E5%89%8D%E5%87%A0%E5%A4%A9%E6%97%B6%E9%97%B4/"/>
      <url>/2018/07/09/JAVA%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E7%9A%84%E5%89%8D%E4%B8%80%E5%A4%A9%E6%88%96%E8%80%85%E5%89%8D%E5%87%A0%E5%A4%A9%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<ul><li>方案一：老方法，不推荐使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="comment">// 获取前一天的时间</span></span><br><span class="line">Date date=<span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime()-<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>方案二：推荐使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">Date date=<span class="keyword">new</span> Date();  </span><br><span class="line">Calendar calendar = Calendar.getInstance();  </span><br><span class="line">calendar.setTime(date);  </span><br><span class="line"><span class="comment">// 获取前一天的时间</span></span><br><span class="line">calendar.add(Calendar.DATE, -<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取后一天的时间</span></span><br><span class="line">calendar.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">date = calendar.getTime();  </span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
